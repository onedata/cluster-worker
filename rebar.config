%% behaviours should be compiled before other files
{erl_first_files, [
    "src/veil_modules/worker_plugin_behaviour.erl",
    "src/veil_modules/control_panel/rest_modules/rest_module_behaviour.erl"
]}.

%% directory for releases
{sub_dirs, ["releases"]}.

%% options for documentation tool
{edoc_opts, [no_packages]}.

%% eunit opts - Maven-like output formatting
{eunit_opts, [verbose, {report, {eunit_surefire, [{dir, "../test/eunit_results"}]}}]}.

%% Test coverage
{cover_enabled, true}.

%% deps options
{deps, [
    {meck, "0.8.1", {git, "https://github.com/eproxus/meck.git", {tag, "0.8.1"}}},
    {lager, "2.0.0", {git, "git://github.com/basho/lager.git", {tag, "2.0.0"}}},
    {ranch, "0.8.5", {git, "https://github.com/extend/ranch.git", {tag, "0.8.5"}}},
    {protobuffs, "0.8.1", {git, "https://github.com/basho/erlang_protobuffs.git", {tag, "0.8.1"}}},
    {cowboy, "0.8.6", {git, "git://github.com/extend/cowboy.git", {tag, "0.8.6"}}},
    {nitrogen_core, "2.2.0", {git, "git://github.com/nitrogen/nitrogen_core.git", {tag, "v2.2.0"}}},
    {nprocreg, "0.2.0", {git, "git://github.com/nitrogen/nprocreg.git", {tag, "v0.2.0"}}},
    {simple_bridge, "1.3.0", {git, "git://github.com/nitrogen/simple_bridge.git", {tag, "v1.3.0"}}},
    {mimetypes, "1.0", {git, "git://github.com/spawngrid/mimetypes.git", {tag, "1.0"}}},
    {gen_server_mock, ".*", {git, "git://github.com/brucexin/gen_server_mock.git", {tag, "de3cd8e"}}},
    {yamler, ".*", {git, "git://github.com/goertzenator/yamler.git", {tag, "c0ec227"}}},
    {ibrowse, "4.0.1", {git, "git://github.com/cmullaparthi/ibrowse.git", {tag, "v4.0.1"}}},
    {basho_bench, ".*", {git, "git://github.com/RoXeon/basho_bench.git", {tag, "95feab1"}}, [raw]},
    {websocket_client, ".*", {git, "git://github.com/RoXeon/websocket_client"}}
]}.

%% pre-hooks
{pre_hooks, [
    {eunit, "mkdir -p test/eunit_results"}, %% Make dir for eunit' surefire test results
    {eunit, "epmd -daemon"}, %% Sometimes, in some cases epmd daemon doesn't start during eunit tests, so we need to force start it
    {compile, "mkdir -p c_lib"},
    {compile, "ln -sf `g++ -print-file-name=libstdc++.a` c_lib"}, %% libstdc++ static linkage
    {compile, "chmod +x c_src/veilhelpers_nif/build_veilhelpers.sh"},
    {compile, "c_src/veilhelpers_nif/build_veilhelpers.sh"}
]}.

{post_hooks, [
    {compile, "chmod +x c_src/link_shared.sh"},
    {compile, "./c_src/link_shared.sh globus gpv_drv.so veilhelpers_drv.so"},
    {compile, "./c_src/link_shared.sh boost veilhelpers_drv.so gpv_drv.so libveilhelpers.so libveilhelpers.dylib"},
    {compile, "./c_src/link_shared.sh ssl veilhelpers_drv.so gpv_drv.so libveilhelpers.so libveilhelpers.dylib"},
    {compile, "./c_src/link_shared.sh ltdl gpv_drv.so veilhelpers_drv.so libveilhelpers.so libveilhelpers.dylib"},
    {compile, "./c_src/link_shared.sh krb gpv_drv.so veilhelpers_drv.so libveilhelpers.so libveilhelpers.dylib"},
    {compile, "./c_src/link_shared.sh c++ gpv_drv.so veilhelpers_drv.so libveilhelpers.so libveilhelpers.dylib"},
    {compile, "./c_src/link_shared.sh stdc++ gpv_drv.so veilhelpers_drv.so libveilhelpers.so libveilhelpers.dylib"},
    {compile, "./c_src/link_shared.sh k5 gpv_drv.so veilhelpers_drv.so libveilhelpers.so libveilhelpers.dylib"},
    {compile, "./c_src/link_shared.sh crypto veilhelpers_drv.so gpv_drv.so libveilhelpers.so libveilhelpers.dylib"},	
    {compile, "./c_src/link_shared.sh protobuf veilhelpers_drv.so libveilhelpers.so libveilhelpers.dylib"},
    {compile, "rm -rf c_lib/*.a"},
	{doc, "./generate_test_doc.sh"},
    %% Change rpath in NIF libs on Darwin
    {"darwin", compile, "install_name_tool -change libveilhelpers.dylib @loader_path/libveilhelpers.dylib c_lib/veilhelpers_drv.so"},
    {"darwin", compile, "install_name_tool -change libveilhelpers.dylib @loader_path/libveilhelpers.dylib c_lib/gpv_drv.so"}
]}.

%% Cleanup
{clean_files, ["test/eunit_results", "distributed_tests_out", "c_lib", "veilhelpers/build"]}.

%% Logging 
%% Add the tuple below to erl_opts proplist to completely turn off debug messages
%% {d, skip_debug}
{erl_opts, [{parse_transform, lager_transform}]}.

{port_specs, [
    {"c_lib/gpv_drv.so",["c_src/gpv_nif/grid_proxy_verify.c", "c_src/gpv_nif/gpv_nif.c"]},
    {"c_lib/veilhelpers_drv.so",["c_src/veilhelpers_nif/veilhelpers_nif.cc", "c_src/veilhelpers_nif/term_translator.cc"]}
]}.

{port_env, [
    {"LDFLAGS", "$LDFLAGS -lssl -lcrypto -lglobus_gsi_callback -lveilhelpers -Bstatic -lboost_system-mt -lboost_thread-mt -Wl,-rpath,./c_lib -Wl,-rpath,./c_lib -Wl,-rpath,../c_lib -Wl,-rpath,. -L ./c_lib"},
    {"CXXFLAGS", "$CXXFLAGS -I ./veilhelpers/include -I ./veilhelpers/release -I ./veilhelpers/release/include -D_FILE_OFFSET_BITS=64 -DFUSE_USE_VERSION=29"}
]}.
