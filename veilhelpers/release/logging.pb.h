// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging.proto

#ifndef PROTOBUF_logging_2eproto__INCLUDED
#define PROTOBUF_logging_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace veil {
namespace protocol {
namespace logging {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logging_2eproto();
void protobuf_AssignDesc_logging_2eproto();
void protobuf_ShutdownFile_logging_2eproto();

class ChangeRemoteLogLevel;
class LogMessage;

enum LogLevel {
  LDEBUG = 0,
  INFO = 1,
  WARNING = 2,
  ERROR = 3,
  FATAL = 4,
  NONE = 5
};
bool LogLevel_IsValid(int value);
const LogLevel LogLevel_MIN = LDEBUG;
const LogLevel LogLevel_MAX = NONE;
const int LogLevel_ARRAYSIZE = LogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor();
inline const ::std::string& LogLevel_Name(LogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogLevel_descriptor(), value);
}
inline bool LogLevel_Parse(
    const ::std::string& name, LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogLevel>(
    LogLevel_descriptor(), name, value);
}
// ===================================================================

class ChangeRemoteLogLevel : public ::google::protobuf::Message {
 public:
  ChangeRemoteLogLevel();
  virtual ~ChangeRemoteLogLevel();

  ChangeRemoteLogLevel(const ChangeRemoteLogLevel& from);

  inline ChangeRemoteLogLevel& operator=(const ChangeRemoteLogLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeRemoteLogLevel& default_instance();

  void Swap(ChangeRemoteLogLevel* other);

  // implements Message ----------------------------------------------

  ChangeRemoteLogLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeRemoteLogLevel& from);
  void MergeFrom(const ChangeRemoteLogLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .veil.protocol.logging.LogLevel level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::veil::protocol::logging::LogLevel level() const;
  inline void set_level(::veil::protocol::logging::LogLevel value);

  // @@protoc_insertion_point(class_scope:veil.protocol.logging.ChangeRemoteLogLevel)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();

  void InitAsDefaultInstance();
  static ChangeRemoteLogLevel* default_instance_;
};
// -------------------------------------------------------------------

class LogMessage : public ::google::protobuf::Message {
 public:
  LogMessage();
  virtual ~LogMessage();

  LogMessage(const LogMessage& from);

  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogMessage& default_instance();

  void Swap(LogMessage* other);

  // implements Message ----------------------------------------------

  LogMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogMessage& from);
  void MergeFrom(const LogMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .veil.protocol.logging.LogLevel level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::veil::protocol::logging::LogLevel level() const;
  inline void set_level(::veil::protocol::logging::LogLevel value);

  // required uint32 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // required string file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required uint32 line = 4;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 4;
  inline ::google::protobuf::uint32 line() const;
  inline void set_line(::google::protobuf::uint32 value);

  // required uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required string message = 6;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 6;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:veil.protocol.logging.LogMessage)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int level_;
  ::google::protobuf::uint32 pid_;
  ::std::string* file_name_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* message_;
  ::google::protobuf::uint32 line_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();

  void InitAsDefaultInstance();
  static LogMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ChangeRemoteLogLevel

// required .veil.protocol.logging.LogLevel level = 1;
inline bool ChangeRemoteLogLevel::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeRemoteLogLevel::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeRemoteLogLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeRemoteLogLevel::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::veil::protocol::logging::LogLevel ChangeRemoteLogLevel::level() const {
  return static_cast< ::veil::protocol::logging::LogLevel >(level_);
}
inline void ChangeRemoteLogLevel::set_level(::veil::protocol::logging::LogLevel value) {
  assert(::veil::protocol::logging::LogLevel_IsValid(value));
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// LogMessage

// required .veil.protocol.logging.LogLevel level = 1;
inline bool LogMessage::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMessage::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMessage::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMessage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::veil::protocol::logging::LogLevel LogMessage::level() const {
  return static_cast< ::veil::protocol::logging::LogLevel >(level_);
}
inline void LogMessage::set_level(::veil::protocol::logging::LogLevel value) {
  assert(::veil::protocol::logging::LogLevel_IsValid(value));
  set_has_level();
  level_ = value;
}

// required uint32 pid = 2;
inline bool LogMessage::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMessage::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMessage::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMessage::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 LogMessage::pid() const {
  return pid_;
}
inline void LogMessage::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
}

// required string file_name = 3;
inline bool LogMessage::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMessage::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMessage::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMessage::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& LogMessage::file_name() const {
  return *file_name_;
}
inline void LogMessage::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void LogMessage::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void LogMessage::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMessage::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* LogMessage::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogMessage::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 line = 4;
inline bool LogMessage::has_line() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMessage::set_has_line() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMessage::clear_has_line() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMessage::clear_line() {
  line_ = 0u;
  clear_has_line();
}
inline ::google::protobuf::uint32 LogMessage::line() const {
  return line_;
}
inline void LogMessage::set_line(::google::protobuf::uint32 value) {
  set_has_line();
  line_ = value;
}

// required uint64 timestamp = 5;
inline bool LogMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 LogMessage::timestamp() const {
  return timestamp_;
}
inline void LogMessage::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string message = 6;
inline bool LogMessage::has_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogMessage::set_has_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& LogMessage::message() const {
  return *message_;
}
inline void LogMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void LogMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void LogMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* LogMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logging
}  // namespace protocol
}  // namespace veil

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::veil::protocol::logging::LogLevel>() {
  return ::veil::protocol::logging::LogLevel_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logging_2eproto__INCLUDED
