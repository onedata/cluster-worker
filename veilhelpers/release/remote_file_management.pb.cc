// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_file_management.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remote_file_management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace veil {
namespace protocol {
namespace remote_file_management {

namespace {

const ::google::protobuf::Descriptor* RemoteFileMangement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteFileMangement_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageAttibutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageAttibutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFileAtStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFileAtStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruncateFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruncateFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePermsAtStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePermsAtStorage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_remote_5ffile_5fmanagement_2eproto() {
  protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "remote_file_management.proto");
  GOOGLE_CHECK(file != NULL);
  RemoteFileMangement_descriptor_ = file->message_type(0);
  static const int RemoteFileMangement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileMangement, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileMangement, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileMangement, space_id_),
  };
  RemoteFileMangement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteFileMangement_descriptor_,
      RemoteFileMangement::default_instance_,
      RemoteFileMangement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileMangement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileMangement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteFileMangement));
  GetAttr_descriptor_ = file->message_type(1);
  static const int GetAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttr, file_id_),
  };
  GetAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAttr_descriptor_,
      GetAttr::default_instance_,
      GetAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAttr));
  StorageAttibutes_descriptor_ = file->message_type(2);
  static const int StorageAttibutes_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, ino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, nlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, rdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, blksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, ctime_),
  };
  StorageAttibutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageAttibutes_descriptor_,
      StorageAttibutes::default_instance_,
      StorageAttibutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAttibutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageAttibutes));
  CreateFile_descriptor_ = file->message_type(3);
  static const int CreateFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFile, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFile, mode_),
  };
  CreateFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateFile_descriptor_,
      CreateFile::default_instance_,
      CreateFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateFile));
  DeleteFileAtStorage_descriptor_ = file->message_type(4);
  static const int DeleteFileAtStorage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileAtStorage, file_id_),
  };
  DeleteFileAtStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFileAtStorage_descriptor_,
      DeleteFileAtStorage::default_instance_,
      DeleteFileAtStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileAtStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileAtStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFileAtStorage));
  TruncateFile_descriptor_ = file->message_type(5);
  static const int TruncateFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateFile, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateFile, length_),
  };
  TruncateFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruncateFile_descriptor_,
      TruncateFile::default_instance_,
      TruncateFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruncateFile));
  ReadFile_descriptor_ = file->message_type(6);
  static const int ReadFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, offset_),
  };
  ReadFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadFile_descriptor_,
      ReadFile::default_instance_,
      ReadFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadFile));
  FileData_descriptor_ = file->message_type(7);
  static const int FileData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileData, answer_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileData, operation_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileData, new_data_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileData, data_),
  };
  FileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileData_descriptor_,
      FileData::default_instance_,
      FileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileData));
  WriteFile_descriptor_ = file->message_type(8);
  static const int WriteFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, offset_),
  };
  WriteFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteFile_descriptor_,
      WriteFile::default_instance_,
      WriteFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteFile));
  WriteInfo_descriptor_ = file->message_type(9);
  static const int WriteInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteInfo, answer_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteInfo, bytes_written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteInfo, operation_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteInfo, new_data_listener_),
  };
  WriteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteInfo_descriptor_,
      WriteInfo::default_instance_,
      WriteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteInfo));
  ChangePermsAtStorage_descriptor_ = file->message_type(10);
  static const int ChangePermsAtStorage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePermsAtStorage, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePermsAtStorage, perms_),
  };
  ChangePermsAtStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePermsAtStorage_descriptor_,
      ChangePermsAtStorage::default_instance_,
      ChangePermsAtStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePermsAtStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePermsAtStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePermsAtStorage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_remote_5ffile_5fmanagement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteFileMangement_descriptor_, &RemoteFileMangement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAttr_descriptor_, &GetAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageAttibutes_descriptor_, &StorageAttibutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateFile_descriptor_, &CreateFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFileAtStorage_descriptor_, &DeleteFileAtStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruncateFile_descriptor_, &TruncateFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadFile_descriptor_, &ReadFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileData_descriptor_, &FileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteFile_descriptor_, &WriteFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteInfo_descriptor_, &WriteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePermsAtStorage_descriptor_, &ChangePermsAtStorage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_remote_5ffile_5fmanagement_2eproto() {
  delete RemoteFileMangement::default_instance_;
  delete RemoteFileMangement_reflection_;
  delete GetAttr::default_instance_;
  delete GetAttr_reflection_;
  delete StorageAttibutes::default_instance_;
  delete StorageAttibutes_reflection_;
  delete StorageAttibutes::_default_answer_;
  delete CreateFile::default_instance_;
  delete CreateFile_reflection_;
  delete DeleteFileAtStorage::default_instance_;
  delete DeleteFileAtStorage_reflection_;
  delete TruncateFile::default_instance_;
  delete TruncateFile_reflection_;
  delete ReadFile::default_instance_;
  delete ReadFile_reflection_;
  delete FileData::default_instance_;
  delete FileData_reflection_;
  delete WriteFile::default_instance_;
  delete WriteFile_reflection_;
  delete WriteInfo::default_instance_;
  delete WriteInfo_reflection_;
  delete ChangePermsAtStorage::default_instance_;
  delete ChangePermsAtStorage_reflection_;
}

void protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034remote_file_management.proto\022$veil.pro"
    "tocol.remote_file_management\"N\n\023RemoteFi"
    "leMangement\022\024\n\014message_type\030\001 \002(\t\022\r\n\005inp"
    "ut\030\002 \002(\014\022\022\n\010space_id\030\003 \001(\t:\000\"\032\n\007GetAttr\022"
    "\017\n\007file_id\030\001 \002(\t\"\210\002\n\020StorageAttibutes\022\022\n"
    "\006answer\030\001 \001(\t:\002ok\022\016\n\003dev\030\002 \001(\003:\0010\022\016\n\003ino"
    "\030\003 \001(\003:\0010\022\017\n\004mode\030\004 \001(\003:\0010\022\020\n\005nlink\030\005 \001("
    "\003:\0011\022\016\n\003uid\030\006 \001(\003:\0010\022\016\n\003gid\030\007 \001(\003:\0010\022\017\n\004"
    "rdev\030\010 \001(\003:\0010\022\017\n\004size\030\t \001(\003:\0010\022\022\n\007blksiz"
    "e\030\n \001(\003:\0010\022\021\n\006blocks\030\013 \001(\003:\0010\022\020\n\005atime\030\014"
    " \001(\003:\0010\022\020\n\005mtime\030\r \001(\003:\0010\022\020\n\005ctime\030\016 \001(\003"
    ":\0010\"+\n\nCreateFile\022\017\n\007file_id\030\001 \002(\t\022\014\n\004mo"
    "de\030\002 \002(\r\"&\n\023DeleteFileAtStorage\022\017\n\007file_"
    "id\030\001 \002(\t\"/\n\014TruncateFile\022\017\n\007file_id\030\001 \002("
    "\t\022\016\n\006length\030\002 \002(\003\"<\n\010ReadFile\022\017\n\007file_id"
    "\030\001 \002(\t\022\014\n\004size\030\002 \002(\003\022\021\n\006offset\030\003 \001(\003:\0010\""
    "`\n\010FileData\022\025\n\ranswer_status\030\001 \002(\t\022\026\n\016op"
    "eration_guid\030\002 \001(\t\022\027\n\017new_data_source\030\003 "
    "\001(\t\022\014\n\004data\030\004 \001(\014\"K\n\tWriteFile\022\017\n\007file_i"
    "d\030\001 \002(\t\022\014\n\004size\030\002 \001(\003\022\014\n\004data\030\003 \001(\014\022\021\n\006o"
    "ffset\030\004 \001(\003:\0010\"o\n\tWriteInfo\022\025\n\ranswer_st"
    "atus\030\001 \002(\t\022\030\n\rbytes_written\030\002 \001(\003:\0010\022\026\n\016"
    "operation_guid\030\003 \001(\t\022\031\n\021new_data_listene"
    "r\030\004 \001(\t\"6\n\024ChangePermsAtStorage\022\017\n\007file_"
    "id\030\001 \002(\t\022\r\n\005perms\030\002 \002(\005", 983);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "remote_file_management.proto", &protobuf_RegisterTypes);
  RemoteFileMangement::default_instance_ = new RemoteFileMangement();
  GetAttr::default_instance_ = new GetAttr();
  StorageAttibutes::_default_answer_ =
      new ::std::string("ok", 2);
  StorageAttibutes::default_instance_ = new StorageAttibutes();
  CreateFile::default_instance_ = new CreateFile();
  DeleteFileAtStorage::default_instance_ = new DeleteFileAtStorage();
  TruncateFile::default_instance_ = new TruncateFile();
  ReadFile::default_instance_ = new ReadFile();
  FileData::default_instance_ = new FileData();
  WriteFile::default_instance_ = new WriteFile();
  WriteInfo::default_instance_ = new WriteInfo();
  ChangePermsAtStorage::default_instance_ = new ChangePermsAtStorage();
  RemoteFileMangement::default_instance_->InitAsDefaultInstance();
  GetAttr::default_instance_->InitAsDefaultInstance();
  StorageAttibutes::default_instance_->InitAsDefaultInstance();
  CreateFile::default_instance_->InitAsDefaultInstance();
  DeleteFileAtStorage::default_instance_->InitAsDefaultInstance();
  TruncateFile::default_instance_->InitAsDefaultInstance();
  ReadFile::default_instance_->InitAsDefaultInstance();
  FileData::default_instance_->InitAsDefaultInstance();
  WriteFile::default_instance_->InitAsDefaultInstance();
  WriteInfo::default_instance_->InitAsDefaultInstance();
  ChangePermsAtStorage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_remote_5ffile_5fmanagement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_remote_5ffile_5fmanagement_2eproto {
  StaticDescriptorInitializer_remote_5ffile_5fmanagement_2eproto() {
    protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  }
} static_descriptor_initializer_remote_5ffile_5fmanagement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RemoteFileMangement::kMessageTypeFieldNumber;
const int RemoteFileMangement::kInputFieldNumber;
const int RemoteFileMangement::kSpaceIdFieldNumber;
#endif  // !_MSC_VER

RemoteFileMangement::RemoteFileMangement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteFileMangement::InitAsDefaultInstance() {
}

RemoteFileMangement::RemoteFileMangement(const RemoteFileMangement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteFileMangement::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  space_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteFileMangement::~RemoteFileMangement() {
  SharedDtor();
}

void RemoteFileMangement::SharedDtor() {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    delete message_type_;
  }
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (space_id_ != &::google::protobuf::internal::kEmptyString) {
    delete space_id_;
  }
  if (this != default_instance_) {
  }
}

void RemoteFileMangement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteFileMangement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteFileMangement_descriptor_;
}

const RemoteFileMangement& RemoteFileMangement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

RemoteFileMangement* RemoteFileMangement::default_instance_ = NULL;

RemoteFileMangement* RemoteFileMangement::New() const {
  return new RemoteFileMangement;
}

void RemoteFileMangement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_type()) {
      if (message_type_ != &::google::protobuf::internal::kEmptyString) {
        message_type_->clear();
      }
    }
    if (has_input()) {
      if (input_ != &::google::protobuf::internal::kEmptyString) {
        input_->clear();
      }
    }
    if (has_space_id()) {
      if (space_id_ != &::google::protobuf::internal::kEmptyString) {
        space_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteFileMangement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // required bytes input = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_space_id;
        break;
      }

      // optional string space_id = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_space_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_space_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->space_id().data(), this->space_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteFileMangement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_type(), output);
  }

  // required bytes input = 2;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->input(), output);
  }

  // optional string space_id = 3 [default = ""];
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->space_id().data(), this->space_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->space_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteFileMangement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_type(), target);
  }

  // required bytes input = 2;
  if (has_input()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->input(), target);
  }

  // optional string space_id = 3 [default = ""];
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->space_id().data(), this->space_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->space_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteFileMangement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // required bytes input = 2;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->input());
    }

    // optional string space_id = 3 [default = ""];
    if (has_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->space_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteFileMangement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteFileMangement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteFileMangement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteFileMangement::MergeFrom(const RemoteFileMangement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_input()) {
      set_input(from.input());
    }
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteFileMangement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFileMangement::CopyFrom(const RemoteFileMangement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFileMangement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RemoteFileMangement::Swap(RemoteFileMangement* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(input_, other->input_);
    std::swap(space_id_, other->space_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteFileMangement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteFileMangement_descriptor_;
  metadata.reflection = RemoteFileMangement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAttr::kFileIdFieldNumber;
#endif  // !_MSC_VER

GetAttr::GetAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAttr::InitAsDefaultInstance() {
}

GetAttr::GetAttr(const GetAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAttr::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAttr::~GetAttr() {
  SharedDtor();
}

void GetAttr::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void GetAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttr_descriptor_;
}

const GetAttr& GetAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

GetAttr* GetAttr::default_instance_ = NULL;

GetAttr* GetAttr::New() const {
  return new GetAttr;
}

void GetAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAttr::MergeFrom(const GetAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttr::CopyFrom(const GetAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAttr::Swap(GetAttr* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttr_descriptor_;
  metadata.reflection = GetAttr_reflection_;
  return metadata;
}


// ===================================================================

::std::string* StorageAttibutes::_default_answer_ = NULL;
#ifndef _MSC_VER
const int StorageAttibutes::kAnswerFieldNumber;
const int StorageAttibutes::kDevFieldNumber;
const int StorageAttibutes::kInoFieldNumber;
const int StorageAttibutes::kModeFieldNumber;
const int StorageAttibutes::kNlinkFieldNumber;
const int StorageAttibutes::kUidFieldNumber;
const int StorageAttibutes::kGidFieldNumber;
const int StorageAttibutes::kRdevFieldNumber;
const int StorageAttibutes::kSizeFieldNumber;
const int StorageAttibutes::kBlksizeFieldNumber;
const int StorageAttibutes::kBlocksFieldNumber;
const int StorageAttibutes::kAtimeFieldNumber;
const int StorageAttibutes::kMtimeFieldNumber;
const int StorageAttibutes::kCtimeFieldNumber;
#endif  // !_MSC_VER

StorageAttibutes::StorageAttibutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageAttibutes::InitAsDefaultInstance() {
}

StorageAttibutes::StorageAttibutes(const StorageAttibutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageAttibutes::SharedCtor() {
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(_default_answer_);
  dev_ = GOOGLE_LONGLONG(0);
  ino_ = GOOGLE_LONGLONG(0);
  mode_ = GOOGLE_LONGLONG(0);
  nlink_ = GOOGLE_LONGLONG(1);
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = GOOGLE_LONGLONG(0);
  rdev_ = GOOGLE_LONGLONG(0);
  size_ = GOOGLE_LONGLONG(0);
  blksize_ = GOOGLE_LONGLONG(0);
  blocks_ = GOOGLE_LONGLONG(0);
  atime_ = GOOGLE_LONGLONG(0);
  mtime_ = GOOGLE_LONGLONG(0);
  ctime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageAttibutes::~StorageAttibutes() {
  SharedDtor();
}

void StorageAttibutes::SharedDtor() {
  if (answer_ != _default_answer_) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void StorageAttibutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageAttibutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageAttibutes_descriptor_;
}

const StorageAttibutes& StorageAttibutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

StorageAttibutes* StorageAttibutes::default_instance_ = NULL;

StorageAttibutes* StorageAttibutes::New() const {
  return new StorageAttibutes;
}

void StorageAttibutes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer()) {
      if (answer_ != _default_answer_) {
        answer_->assign(*_default_answer_);
      }
    }
    dev_ = GOOGLE_LONGLONG(0);
    ino_ = GOOGLE_LONGLONG(0);
    mode_ = GOOGLE_LONGLONG(0);
    nlink_ = GOOGLE_LONGLONG(1);
    uid_ = GOOGLE_LONGLONG(0);
    gid_ = GOOGLE_LONGLONG(0);
    rdev_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    size_ = GOOGLE_LONGLONG(0);
    blksize_ = GOOGLE_LONGLONG(0);
    blocks_ = GOOGLE_LONGLONG(0);
    atime_ = GOOGLE_LONGLONG(0);
    mtime_ = GOOGLE_LONGLONG(0);
    ctime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageAttibutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string answer = 1 [default = "ok"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dev;
        break;
      }

      // optional int64 dev = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dev_)));
          set_has_dev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ino;
        break;
      }

      // optional int64 ino = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ino:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ino_)));
          set_has_ino();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // optional int64 mode = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nlink;
        break;
      }

      // optional int64 nlink = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nlink_)));
          set_has_nlink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uid;
        break;
      }

      // optional int64 uid = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gid;
        break;
      }

      // optional int64 gid = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rdev;
        break;
      }

      // optional int64 rdev = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rdev_)));
          set_has_rdev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size;
        break;
      }

      // optional int64 size = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_blksize;
        break;
      }

      // optional int64 blksize = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blksize_)));
          set_has_blksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_blocks;
        break;
      }

      // optional int64 blocks = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocks_)));
          set_has_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_atime;
        break;
      }

      // optional int64 atime = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atime_)));
          set_has_atime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mtime;
        break;
      }

      // optional int64 mtime = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ctime;
        break;
      }

      // optional int64 ctime = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageAttibutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer(), output);
  }

  // optional int64 dev = 2 [default = 0];
  if (has_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dev(), output);
  }

  // optional int64 ino = 3 [default = 0];
  if (has_ino()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ino(), output);
  }

  // optional int64 mode = 4 [default = 0];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->mode(), output);
  }

  // optional int64 nlink = 5 [default = 1];
  if (has_nlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->nlink(), output);
  }

  // optional int64 uid = 6 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->uid(), output);
  }

  // optional int64 gid = 7 [default = 0];
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gid(), output);
  }

  // optional int64 rdev = 8 [default = 0];
  if (has_rdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->rdev(), output);
  }

  // optional int64 size = 9 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->size(), output);
  }

  // optional int64 blksize = 10 [default = 0];
  if (has_blksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->blksize(), output);
  }

  // optional int64 blocks = 11 [default = 0];
  if (has_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->blocks(), output);
  }

  // optional int64 atime = 12 [default = 0];
  if (has_atime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->atime(), output);
  }

  // optional int64 mtime = 13 [default = 0];
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->mtime(), output);
  }

  // optional int64 ctime = 14 [default = 0];
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->ctime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageAttibutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // optional int64 dev = 2 [default = 0];
  if (has_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dev(), target);
  }

  // optional int64 ino = 3 [default = 0];
  if (has_ino()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ino(), target);
  }

  // optional int64 mode = 4 [default = 0];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->mode(), target);
  }

  // optional int64 nlink = 5 [default = 1];
  if (has_nlink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->nlink(), target);
  }

  // optional int64 uid = 6 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->uid(), target);
  }

  // optional int64 gid = 7 [default = 0];
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gid(), target);
  }

  // optional int64 rdev = 8 [default = 0];
  if (has_rdev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->rdev(), target);
  }

  // optional int64 size = 9 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->size(), target);
  }

  // optional int64 blksize = 10 [default = 0];
  if (has_blksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->blksize(), target);
  }

  // optional int64 blocks = 11 [default = 0];
  if (has_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->blocks(), target);
  }

  // optional int64 atime = 12 [default = 0];
  if (has_atime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->atime(), target);
  }

  // optional int64 mtime = 13 [default = 0];
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->mtime(), target);
  }

  // optional int64 ctime = 14 [default = 0];
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->ctime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageAttibutes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string answer = 1 [default = "ok"];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // optional int64 dev = 2 [default = 0];
    if (has_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dev());
    }

    // optional int64 ino = 3 [default = 0];
    if (has_ino()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ino());
    }

    // optional int64 mode = 4 [default = 0];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mode());
    }

    // optional int64 nlink = 5 [default = 1];
    if (has_nlink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nlink());
    }

    // optional int64 uid = 6 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int64 gid = 7 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gid());
    }

    // optional int64 rdev = 8 [default = 0];
    if (has_rdev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rdev());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 size = 9 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional int64 blksize = 10 [default = 0];
    if (has_blksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blksize());
    }

    // optional int64 blocks = 11 [default = 0];
    if (has_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blocks());
    }

    // optional int64 atime = 12 [default = 0];
    if (has_atime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->atime());
    }

    // optional int64 mtime = 13 [default = 0];
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

    // optional int64 ctime = 14 [default = 0];
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageAttibutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageAttibutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageAttibutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageAttibutes::MergeFrom(const StorageAttibutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_dev()) {
      set_dev(from.dev());
    }
    if (from.has_ino()) {
      set_ino(from.ino());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_nlink()) {
      set_nlink(from.nlink());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_rdev()) {
      set_rdev(from.rdev());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_blksize()) {
      set_blksize(from.blksize());
    }
    if (from.has_blocks()) {
      set_blocks(from.blocks());
    }
    if (from.has_atime()) {
      set_atime(from.atime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageAttibutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageAttibutes::CopyFrom(const StorageAttibutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageAttibutes::IsInitialized() const {

  return true;
}

void StorageAttibutes::Swap(StorageAttibutes* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(dev_, other->dev_);
    std::swap(ino_, other->ino_);
    std::swap(mode_, other->mode_);
    std::swap(nlink_, other->nlink_);
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(rdev_, other->rdev_);
    std::swap(size_, other->size_);
    std::swap(blksize_, other->blksize_);
    std::swap(blocks_, other->blocks_);
    std::swap(atime_, other->atime_);
    std::swap(mtime_, other->mtime_);
    std::swap(ctime_, other->ctime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageAttibutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageAttibutes_descriptor_;
  metadata.reflection = StorageAttibutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateFile::kFileIdFieldNumber;
const int CreateFile::kModeFieldNumber;
#endif  // !_MSC_VER

CreateFile::CreateFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateFile::InitAsDefaultInstance() {
}

CreateFile::CreateFile(const CreateFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateFile::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateFile::~CreateFile() {
  SharedDtor();
}

void CreateFile::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void CreateFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateFile_descriptor_;
}

const CreateFile& CreateFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

CreateFile* CreateFile::default_instance_ = NULL;

CreateFile* CreateFile::New() const {
  return new CreateFile;
}

void CreateFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // required uint32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required uint32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required uint32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required uint32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateFile::MergeFrom(const CreateFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFile::CopyFrom(const CreateFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateFile::Swap(CreateFile* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateFile_descriptor_;
  metadata.reflection = CreateFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFileAtStorage::kFileIdFieldNumber;
#endif  // !_MSC_VER

DeleteFileAtStorage::DeleteFileAtStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFileAtStorage::InitAsDefaultInstance() {
}

DeleteFileAtStorage::DeleteFileAtStorage(const DeleteFileAtStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFileAtStorage::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFileAtStorage::~DeleteFileAtStorage() {
  SharedDtor();
}

void DeleteFileAtStorage::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void DeleteFileAtStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFileAtStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFileAtStorage_descriptor_;
}

const DeleteFileAtStorage& DeleteFileAtStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

DeleteFileAtStorage* DeleteFileAtStorage::default_instance_ = NULL;

DeleteFileAtStorage* DeleteFileAtStorage::New() const {
  return new DeleteFileAtStorage;
}

void DeleteFileAtStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFileAtStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFileAtStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFileAtStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFileAtStorage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFileAtStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFileAtStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFileAtStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFileAtStorage::MergeFrom(const DeleteFileAtStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFileAtStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFileAtStorage::CopyFrom(const DeleteFileAtStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileAtStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteFileAtStorage::Swap(DeleteFileAtStorage* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFileAtStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFileAtStorage_descriptor_;
  metadata.reflection = DeleteFileAtStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruncateFile::kFileIdFieldNumber;
const int TruncateFile::kLengthFieldNumber;
#endif  // !_MSC_VER

TruncateFile::TruncateFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TruncateFile::InitAsDefaultInstance() {
}

TruncateFile::TruncateFile(const TruncateFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TruncateFile::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruncateFile::~TruncateFile() {
  SharedDtor();
}

void TruncateFile::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void TruncateFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncateFile_descriptor_;
}

const TruncateFile& TruncateFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

TruncateFile* TruncateFile::default_instance_ = NULL;

TruncateFile* TruncateFile::New() const {
  return new TruncateFile;
}

void TruncateFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    length_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruncateFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int64 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruncateFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required int64 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruncateFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required int64 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruncateFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required int64 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruncateFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruncateFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruncateFile::MergeFrom(const TruncateFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruncateFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateFile::CopyFrom(const TruncateFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TruncateFile::Swap(TruncateFile* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruncateFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruncateFile_descriptor_;
  metadata.reflection = TruncateFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadFile::kFileIdFieldNumber;
const int ReadFile::kSizeFieldNumber;
const int ReadFile::kOffsetFieldNumber;
#endif  // !_MSC_VER

ReadFile::ReadFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadFile::InitAsDefaultInstance() {
}

ReadFile::ReadFile(const ReadFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadFile::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_LONGLONG(0);
  offset_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadFile::~ReadFile() {
  SharedDtor();
}

void ReadFile::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void ReadFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadFile_descriptor_;
}

const ReadFile& ReadFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

ReadFile* ReadFile::default_instance_ = NULL;

ReadFile* ReadFile::New() const {
  return new ReadFile;
}

void ReadFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    size_ = GOOGLE_LONGLONG(0);
    offset_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int64 offset = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required int64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  // optional int64 offset = 3 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required int64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  // optional int64 offset = 3 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required int64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional int64 offset = 3 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadFile::MergeFrom(const ReadFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadFile::CopyFrom(const ReadFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReadFile::Swap(ReadFile* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(size_, other->size_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadFile_descriptor_;
  metadata.reflection = ReadFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileData::kAnswerStatusFieldNumber;
const int FileData::kOperationGuidFieldNumber;
const int FileData::kNewDataSourceFieldNumber;
const int FileData::kDataFieldNumber;
#endif  // !_MSC_VER

FileData::FileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileData::InitAsDefaultInstance() {
}

FileData::FileData(const FileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileData::SharedCtor() {
  _cached_size_ = 0;
  answer_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operation_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_data_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileData::~FileData() {
  SharedDtor();
}

void FileData::SharedDtor() {
  if (answer_status_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_status_;
  }
  if (operation_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete operation_guid_;
  }
  if (new_data_source_ != &::google::protobuf::internal::kEmptyString) {
    delete new_data_source_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileData_descriptor_;
}

const FileData& FileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

FileData* FileData::default_instance_ = NULL;

FileData* FileData::New() const {
  return new FileData;
}

void FileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer_status()) {
      if (answer_status_ != &::google::protobuf::internal::kEmptyString) {
        answer_status_->clear();
      }
    }
    if (has_operation_guid()) {
      if (operation_guid_ != &::google::protobuf::internal::kEmptyString) {
        operation_guid_->clear();
      }
    }
    if (has_new_data_source()) {
      if (new_data_source_ != &::google::protobuf::internal::kEmptyString) {
        new_data_source_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string answer_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer_status().data(), this->answer_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operation_guid;
        break;
      }

      // optional string operation_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operation_guid().data(), this->operation_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_data_source;
        break;
      }

      // optional string new_data_source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_data_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_data_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_data_source().data(), this->new_data_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string answer_status = 1;
  if (has_answer_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_status().data(), this->answer_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer_status(), output);
  }

  // optional string operation_guid = 2;
  if (has_operation_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation_guid().data(), this->operation_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->operation_guid(), output);
  }

  // optional string new_data_source = 3;
  if (has_new_data_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_data_source().data(), this->new_data_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_data_source(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string answer_status = 1;
  if (has_answer_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_status().data(), this->answer_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer_status(), target);
  }

  // optional string operation_guid = 2;
  if (has_operation_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation_guid().data(), this->operation_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operation_guid(), target);
  }

  // optional string new_data_source = 3;
  if (has_new_data_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_data_source().data(), this->new_data_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_data_source(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string answer_status = 1;
    if (has_answer_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer_status());
    }

    // optional string operation_guid = 2;
    if (has_operation_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation_guid());
    }

    // optional string new_data_source = 3;
    if (has_new_data_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_data_source());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileData::MergeFrom(const FileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer_status()) {
      set_answer_status(from.answer_status());
    }
    if (from.has_operation_guid()) {
      set_operation_guid(from.operation_guid());
    }
    if (from.has_new_data_source()) {
      set_new_data_source(from.new_data_source());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileData::CopyFrom(const FileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileData::Swap(FileData* other) {
  if (other != this) {
    std::swap(answer_status_, other->answer_status_);
    std::swap(operation_guid_, other->operation_guid_);
    std::swap(new_data_source_, other->new_data_source_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileData_descriptor_;
  metadata.reflection = FileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteFile::kFileIdFieldNumber;
const int WriteFile::kSizeFieldNumber;
const int WriteFile::kDataFieldNumber;
const int WriteFile::kOffsetFieldNumber;
#endif  // !_MSC_VER

WriteFile::WriteFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteFile::InitAsDefaultInstance() {
}

WriteFile::WriteFile(const WriteFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteFile::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteFile::~WriteFile() {
  SharedDtor();
}

void WriteFile::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void WriteFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteFile_descriptor_;
}

const WriteFile& WriteFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

WriteFile* WriteFile::default_instance_ = NULL;

WriteFile* WriteFile::New() const {
  return new WriteFile;
}

void WriteFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    size_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    offset_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional int64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional int64 offset = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // optional int64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional int64 offset = 4 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // optional int64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional int64 offset = 4 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional int64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int64 offset = 4 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteFile::MergeFrom(const WriteFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteFile::CopyFrom(const WriteFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WriteFile::Swap(WriteFile* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(size_, other->size_);
    std::swap(data_, other->data_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteFile_descriptor_;
  metadata.reflection = WriteFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteInfo::kAnswerStatusFieldNumber;
const int WriteInfo::kBytesWrittenFieldNumber;
const int WriteInfo::kOperationGuidFieldNumber;
const int WriteInfo::kNewDataListenerFieldNumber;
#endif  // !_MSC_VER

WriteInfo::WriteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteInfo::InitAsDefaultInstance() {
}

WriteInfo::WriteInfo(const WriteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteInfo::SharedCtor() {
  _cached_size_ = 0;
  answer_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bytes_written_ = GOOGLE_LONGLONG(0);
  operation_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_data_listener_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteInfo::~WriteInfo() {
  SharedDtor();
}

void WriteInfo::SharedDtor() {
  if (answer_status_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_status_;
  }
  if (operation_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete operation_guid_;
  }
  if (new_data_listener_ != &::google::protobuf::internal::kEmptyString) {
    delete new_data_listener_;
  }
  if (this != default_instance_) {
  }
}

void WriteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteInfo_descriptor_;
}

const WriteInfo& WriteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

WriteInfo* WriteInfo::default_instance_ = NULL;

WriteInfo* WriteInfo::New() const {
  return new WriteInfo;
}

void WriteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer_status()) {
      if (answer_status_ != &::google::protobuf::internal::kEmptyString) {
        answer_status_->clear();
      }
    }
    bytes_written_ = GOOGLE_LONGLONG(0);
    if (has_operation_guid()) {
      if (operation_guid_ != &::google::protobuf::internal::kEmptyString) {
        operation_guid_->clear();
      }
    }
    if (has_new_data_listener()) {
      if (new_data_listener_ != &::google::protobuf::internal::kEmptyString) {
        new_data_listener_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string answer_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer_status().data(), this->answer_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytes_written;
        break;
      }

      // optional int64 bytes_written = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_written:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_written_)));
          set_has_bytes_written();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operation_guid;
        break;
      }

      // optional string operation_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operation_guid().data(), this->operation_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_data_listener;
        break;
      }

      // optional string new_data_listener = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_data_listener:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_data_listener()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_data_listener().data(), this->new_data_listener().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string answer_status = 1;
  if (has_answer_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_status().data(), this->answer_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer_status(), output);
  }

  // optional int64 bytes_written = 2 [default = 0];
  if (has_bytes_written()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytes_written(), output);
  }

  // optional string operation_guid = 3;
  if (has_operation_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation_guid().data(), this->operation_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->operation_guid(), output);
  }

  // optional string new_data_listener = 4;
  if (has_new_data_listener()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_data_listener().data(), this->new_data_listener().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_data_listener(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string answer_status = 1;
  if (has_answer_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_status().data(), this->answer_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer_status(), target);
  }

  // optional int64 bytes_written = 2 [default = 0];
  if (has_bytes_written()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytes_written(), target);
  }

  // optional string operation_guid = 3;
  if (has_operation_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation_guid().data(), this->operation_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operation_guid(), target);
  }

  // optional string new_data_listener = 4;
  if (has_new_data_listener()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_data_listener().data(), this->new_data_listener().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_data_listener(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string answer_status = 1;
    if (has_answer_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer_status());
    }

    // optional int64 bytes_written = 2 [default = 0];
    if (has_bytes_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes_written());
    }

    // optional string operation_guid = 3;
    if (has_operation_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation_guid());
    }

    // optional string new_data_listener = 4;
    if (has_new_data_listener()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_data_listener());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteInfo::MergeFrom(const WriteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer_status()) {
      set_answer_status(from.answer_status());
    }
    if (from.has_bytes_written()) {
      set_bytes_written(from.bytes_written());
    }
    if (from.has_operation_guid()) {
      set_operation_guid(from.operation_guid());
    }
    if (from.has_new_data_listener()) {
      set_new_data_listener(from.new_data_listener());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteInfo::CopyFrom(const WriteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WriteInfo::Swap(WriteInfo* other) {
  if (other != this) {
    std::swap(answer_status_, other->answer_status_);
    std::swap(bytes_written_, other->bytes_written_);
    std::swap(operation_guid_, other->operation_guid_);
    std::swap(new_data_listener_, other->new_data_listener_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteInfo_descriptor_;
  metadata.reflection = WriteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePermsAtStorage::kFileIdFieldNumber;
const int ChangePermsAtStorage::kPermsFieldNumber;
#endif  // !_MSC_VER

ChangePermsAtStorage::ChangePermsAtStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePermsAtStorage::InitAsDefaultInstance() {
}

ChangePermsAtStorage::ChangePermsAtStorage(const ChangePermsAtStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePermsAtStorage::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  perms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePermsAtStorage::~ChangePermsAtStorage() {
  SharedDtor();
}

void ChangePermsAtStorage::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void ChangePermsAtStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePermsAtStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePermsAtStorage_descriptor_;
}

const ChangePermsAtStorage& ChangePermsAtStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5ffile_5fmanagement_2eproto();
  return *default_instance_;
}

ChangePermsAtStorage* ChangePermsAtStorage::default_instance_ = NULL;

ChangePermsAtStorage* ChangePermsAtStorage::New() const {
  return new ChangePermsAtStorage;
}

void ChangePermsAtStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    perms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePermsAtStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_perms;
        break;
      }

      // required int32 perms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perms_)));
          set_has_perms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePermsAtStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required int32 perms = 2;
  if (has_perms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->perms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePermsAtStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required int32 perms = 2;
  if (has_perms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->perms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePermsAtStorage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required int32 perms = 2;
    if (has_perms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePermsAtStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePermsAtStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePermsAtStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePermsAtStorage::MergeFrom(const ChangePermsAtStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_perms()) {
      set_perms(from.perms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePermsAtStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePermsAtStorage::CopyFrom(const ChangePermsAtStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePermsAtStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangePermsAtStorage::Swap(ChangePermsAtStorage* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(perms_, other->perms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePermsAtStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePermsAtStorage_descriptor_;
  metadata.reflection = ChangePermsAtStorage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace remote_file_management
}  // namespace protocol
}  // namespace veil

// @@protoc_insertion_point(global_scope)
