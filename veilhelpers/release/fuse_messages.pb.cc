// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fuse_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fuse_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace veil {
namespace protocol {
namespace fuse_messages {

namespace {

const ::google::protobuf::Descriptor* ChannelRegistration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelRegistration_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNewFileLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNewFileLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileUuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileUuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileUuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileUuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileNotUsed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileNotUsed_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenewFileLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenewFileLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLocationValidity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLocationValidity_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileChildren_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileChildren_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileChildren_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileChildren_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateDir_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeFileOwner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFileOwner_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeFileGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFileGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeFilePerms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFilePerms_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckFilePerms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckFilePerms_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestChannelAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestChannelAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeRequest_EnvVariable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeRequest_EnvVariable_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeRequest_CertConfirmation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeRequest_CertConfirmation_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStorageTestFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStorageTestFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStorageTestFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStorageTestFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageTestFileModifiedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageTestFileModifiedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageTestFileModifiedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageTestFileModifiedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientStorageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientStorageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientStorageInfo_StorageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientStorageInfo_StorageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStatFS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStatFS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatFSInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatFSInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventFilterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventFilterConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventAggregatorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventAggregatorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventTransformerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventTransformerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventStreamConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventStreamConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventProducerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventProducerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fuse_5fmessages_2eproto() {
  protobuf_AddDesc_fuse_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fuse_messages.proto");
  GOOGLE_CHECK(file != NULL);
  ChannelRegistration_descriptor_ = file->message_type(0);
  static const int ChannelRegistration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRegistration, fuse_id_),
  };
  ChannelRegistration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelRegistration_descriptor_,
      ChannelRegistration::default_instance_,
      ChannelRegistration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRegistration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRegistration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelRegistration));
  ChannelClose_descriptor_ = file->message_type(1);
  static const int ChannelClose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelClose, fuse_id_),
  };
  ChannelClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelClose_descriptor_,
      ChannelClose::default_instance_,
      ChannelClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelClose));
  FuseMessage_descriptor_ = file->message_type(2);
  static const int FuseMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuseMessage, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuseMessage, input_),
  };
  FuseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuseMessage_descriptor_,
      FuseMessage::default_instance_,
      FuseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuseMessage));
  GetFileLocation_descriptor_ = file->message_type(3);
  static const int GetFileLocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLocation, file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLocation, open_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLocation, force_cluster_proxy_),
  };
  GetFileLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileLocation_descriptor_,
      GetFileLocation::default_instance_,
      GetFileLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileLocation));
  GetNewFileLocation_descriptor_ = file->message_type(4);
  static const int GetNewFileLocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNewFileLocation, file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNewFileLocation, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNewFileLocation, force_cluster_proxy_),
  };
  GetNewFileLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNewFileLocation_descriptor_,
      GetNewFileLocation::default_instance_,
      GetNewFileLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNewFileLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNewFileLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNewFileLocation));
  GetFileAttr_descriptor_ = file->message_type(5);
  static const int GetFileAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileAttr, file_logic_name_),
  };
  GetFileAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileAttr_descriptor_,
      GetFileAttr::default_instance_,
      GetFileAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileAttr));
  FileAttr_descriptor_ = file->message_type(6);
  static const int FileAttr_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, gname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, links_),
  };
  FileAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileAttr_descriptor_,
      FileAttr::default_instance_,
      FileAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileAttr));
  GetFileUuid_descriptor_ = file->message_type(7);
  static const int GetFileUuid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileUuid, file_logic_name_),
  };
  GetFileUuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileUuid_descriptor_,
      GetFileUuid::default_instance_,
      GetFileUuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileUuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileUuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileUuid));
  FileUuid_descriptor_ = file->message_type(8);
  static const int FileUuid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUuid, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUuid, uuid_),
  };
  FileUuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileUuid_descriptor_,
      FileUuid::default_instance_,
      FileUuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileUuid));
  FileLocation_descriptor_ = file->message_type(9);
  static const int FileLocation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, validity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, storage_helper_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, storage_helper_args_),
  };
  FileLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLocation_descriptor_,
      FileLocation::default_instance_,
      FileLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLocation));
  CreateFileAck_descriptor_ = file->message_type(10);
  static const int CreateFileAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileAck, file_logic_name_),
  };
  CreateFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateFileAck_descriptor_,
      CreateFileAck::default_instance_,
      CreateFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateFileAck));
  FileNotUsed_descriptor_ = file->message_type(11);
  static const int FileNotUsed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotUsed, file_logic_name_),
  };
  FileNotUsed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileNotUsed_descriptor_,
      FileNotUsed::default_instance_,
      FileNotUsed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotUsed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotUsed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileNotUsed));
  RenewFileLocation_descriptor_ = file->message_type(12);
  static const int RenewFileLocation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewFileLocation, file_logic_name_),
  };
  RenewFileLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenewFileLocation_descriptor_,
      RenewFileLocation::default_instance_,
      RenewFileLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewFileLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewFileLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenewFileLocation));
  FileLocationValidity_descriptor_ = file->message_type(13);
  static const int FileLocationValidity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationValidity, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationValidity, validity_),
  };
  FileLocationValidity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLocationValidity_descriptor_,
      FileLocationValidity::default_instance_,
      FileLocationValidity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationValidity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocationValidity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLocationValidity));
  GetFileChildren_descriptor_ = file->message_type(14);
  static const int GetFileChildren_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChildren, dir_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChildren, children_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChildren, offset_),
  };
  GetFileChildren_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileChildren_descriptor_,
      GetFileChildren::default_instance_,
      GetFileChildren_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChildren, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChildren, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileChildren));
  FileChildren_descriptor_ = file->message_type(15);
  static const int FileChildren_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChildren, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChildren, child_logic_name_),
  };
  FileChildren_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileChildren_descriptor_,
      FileChildren::default_instance_,
      FileChildren_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChildren, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChildren, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileChildren));
  CreateDir_descriptor_ = file->message_type(16);
  static const int CreateDir_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDir, dir_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDir, mode_),
  };
  CreateDir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateDir_descriptor_,
      CreateDir::default_instance_,
      CreateDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateDir));
  DeleteFile_descriptor_ = file->message_type(17);
  static const int DeleteFile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFile, file_logic_name_),
  };
  DeleteFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFile_descriptor_,
      DeleteFile::default_instance_,
      DeleteFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFile));
  CreateLink_descriptor_ = file->message_type(18);
  static const int CreateLink_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLink, from_file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLink, to_file_logic_name_),
  };
  CreateLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateLink_descriptor_,
      CreateLink::default_instance_,
      CreateLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateLink));
  GetLink_descriptor_ = file->message_type(19);
  static const int GetLink_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLink, file_logic_name_),
  };
  GetLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLink_descriptor_,
      GetLink::default_instance_,
      GetLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLink));
  LinkInfo_descriptor_ = file->message_type(20);
  static const int LinkInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkInfo, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkInfo, file_logic_name_),
  };
  LinkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkInfo_descriptor_,
      LinkInfo::default_instance_,
      LinkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkInfo));
  RenameFile_descriptor_ = file->message_type(21);
  static const int RenameFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFile, from_file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFile, to_file_logic_name_),
  };
  RenameFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameFile_descriptor_,
      RenameFile::default_instance_,
      RenameFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameFile));
  ChangeFileOwner_descriptor_ = file->message_type(22);
  static const int ChangeFileOwner_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileOwner, file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileOwner, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileOwner, uname_),
  };
  ChangeFileOwner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFileOwner_descriptor_,
      ChangeFileOwner::default_instance_,
      ChangeFileOwner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileOwner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileOwner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFileOwner));
  ChangeFileGroup_descriptor_ = file->message_type(23);
  static const int ChangeFileGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileGroup, file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileGroup, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileGroup, gname_),
  };
  ChangeFileGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFileGroup_descriptor_,
      ChangeFileGroup::default_instance_,
      ChangeFileGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFileGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFileGroup));
  ChangeFilePerms_descriptor_ = file->message_type(24);
  static const int ChangeFilePerms_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFilePerms, file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFilePerms, perms_),
  };
  ChangeFilePerms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFilePerms_descriptor_,
      ChangeFilePerms::default_instance_,
      ChangeFilePerms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFilePerms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFilePerms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFilePerms));
  CheckFilePerms_descriptor_ = file->message_type(25);
  static const int CheckFilePerms_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFilePerms, file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFilePerms, type_),
  };
  CheckFilePerms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckFilePerms_descriptor_,
      CheckFilePerms::default_instance_,
      CheckFilePerms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFilePerms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFilePerms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckFilePerms));
  UpdateTimes_descriptor_ = file->message_type(26);
  static const int UpdateTimes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimes, file_logic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimes, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimes, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimes, ctime_),
  };
  UpdateTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTimes_descriptor_,
      UpdateTimes::default_instance_,
      UpdateTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTimes));
  TestChannel_descriptor_ = file->message_type(27);
  static const int TestChannel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestChannel, answer_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestChannel, answer_delay_in_ms_),
  };
  TestChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestChannel_descriptor_,
      TestChannel::default_instance_,
      TestChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestChannel));
  TestChannelAnswer_descriptor_ = file->message_type(28);
  static const int TestChannelAnswer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestChannelAnswer, message_),
  };
  TestChannelAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestChannelAnswer_descriptor_,
      TestChannelAnswer::default_instance_,
      TestChannelAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestChannelAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestChannelAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestChannelAnswer));
  HandshakeRequest_descriptor_ = file->message_type(29);
  static const int HandshakeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest, cert_confirmation_),
  };
  HandshakeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeRequest_descriptor_,
      HandshakeRequest::default_instance_,
      HandshakeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeRequest));
  HandshakeRequest_EnvVariable_descriptor_ = HandshakeRequest_descriptor_->nested_type(0);
  static const int HandshakeRequest_EnvVariable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest_EnvVariable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest_EnvVariable, value_),
  };
  HandshakeRequest_EnvVariable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeRequest_EnvVariable_descriptor_,
      HandshakeRequest_EnvVariable::default_instance_,
      HandshakeRequest_EnvVariable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest_EnvVariable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest_EnvVariable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeRequest_EnvVariable));
  HandshakeRequest_CertConfirmation_descriptor_ = HandshakeRequest_descriptor_->nested_type(1);
  static const int HandshakeRequest_CertConfirmation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest_CertConfirmation, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest_CertConfirmation, result_),
  };
  HandshakeRequest_CertConfirmation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeRequest_CertConfirmation_descriptor_,
      HandshakeRequest_CertConfirmation::default_instance_,
      HandshakeRequest_CertConfirmation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest_CertConfirmation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequest_CertConfirmation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeRequest_CertConfirmation));
  HandshakeResponse_descriptor_ = file->message_type(30);
  static const int HandshakeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, fuse_id_),
  };
  HandshakeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeResponse_descriptor_,
      HandshakeResponse::default_instance_,
      HandshakeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeResponse));
  HandshakeAck_descriptor_ = file->message_type(31);
  static const int HandshakeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, fuse_id_),
  };
  HandshakeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeAck_descriptor_,
      HandshakeAck::default_instance_,
      HandshakeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeAck));
  CreateStorageTestFileRequest_descriptor_ = file->message_type(32);
  static const int CreateStorageTestFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageTestFileRequest, storage_id_),
  };
  CreateStorageTestFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStorageTestFileRequest_descriptor_,
      CreateStorageTestFileRequest::default_instance_,
      CreateStorageTestFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageTestFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageTestFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStorageTestFileRequest));
  CreateStorageTestFileResponse_descriptor_ = file->message_type(33);
  static const int CreateStorageTestFileResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageTestFileResponse, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageTestFileResponse, relative_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageTestFileResponse, text_),
  };
  CreateStorageTestFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStorageTestFileResponse_descriptor_,
      CreateStorageTestFileResponse::default_instance_,
      CreateStorageTestFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageTestFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageTestFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStorageTestFileResponse));
  StorageTestFileModifiedRequest_descriptor_ = file->message_type(34);
  static const int StorageTestFileModifiedRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTestFileModifiedRequest, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTestFileModifiedRequest, relative_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTestFileModifiedRequest, text_),
  };
  StorageTestFileModifiedRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageTestFileModifiedRequest_descriptor_,
      StorageTestFileModifiedRequest::default_instance_,
      StorageTestFileModifiedRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTestFileModifiedRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTestFileModifiedRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageTestFileModifiedRequest));
  StorageTestFileModifiedResponse_descriptor_ = file->message_type(35);
  static const int StorageTestFileModifiedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTestFileModifiedResponse, answer_),
  };
  StorageTestFileModifiedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageTestFileModifiedResponse_descriptor_,
      StorageTestFileModifiedResponse::default_instance_,
      StorageTestFileModifiedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTestFileModifiedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTestFileModifiedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageTestFileModifiedResponse));
  ClientStorageInfo_descriptor_ = file->message_type(36);
  static const int ClientStorageInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStorageInfo, storage_info_),
  };
  ClientStorageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientStorageInfo_descriptor_,
      ClientStorageInfo::default_instance_,
      ClientStorageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStorageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStorageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientStorageInfo));
  ClientStorageInfo_StorageInfo_descriptor_ = ClientStorageInfo_descriptor_->nested_type(0);
  static const int ClientStorageInfo_StorageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStorageInfo_StorageInfo, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStorageInfo_StorageInfo, absolute_path_),
  };
  ClientStorageInfo_StorageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientStorageInfo_StorageInfo_descriptor_,
      ClientStorageInfo_StorageInfo::default_instance_,
      ClientStorageInfo_StorageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStorageInfo_StorageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStorageInfo_StorageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientStorageInfo_StorageInfo));
  GetStatFS_descriptor_ = file->message_type(37);
  static const int GetStatFS_offsets_[1] = {
  };
  GetStatFS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStatFS_descriptor_,
      GetStatFS::default_instance_,
      GetStatFS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatFS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatFS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStatFS));
  StatFSInfo_descriptor_ = file->message_type(38);
  static const int StatFSInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatFSInfo, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatFSInfo, quota_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatFSInfo, files_size_),
  };
  StatFSInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatFSInfo_descriptor_,
      StatFSInfo::default_instance_,
      StatFSInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatFSInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatFSInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatFSInfo));
  EventFilterConfig_descriptor_ = file->message_type(39);
  static const int EventFilterConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventFilterConfig, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventFilterConfig, desired_value_),
  };
  EventFilterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventFilterConfig_descriptor_,
      EventFilterConfig::default_instance_,
      EventFilterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventFilterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventFilterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventFilterConfig));
  EventAggregatorConfig_descriptor_ = file->message_type(40);
  static const int EventAggregatorConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAggregatorConfig, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAggregatorConfig, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAggregatorConfig, sum_field_name_),
  };
  EventAggregatorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventAggregatorConfig_descriptor_,
      EventAggregatorConfig::default_instance_,
      EventAggregatorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAggregatorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAggregatorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventAggregatorConfig));
  EventTransformerConfig_descriptor_ = file->message_type(41);
  static const int EventTransformerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTransformerConfig, field_names_to_replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTransformerConfig, values_to_replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTransformerConfig, new_values_),
  };
  EventTransformerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventTransformerConfig_descriptor_,
      EventTransformerConfig::default_instance_,
      EventTransformerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTransformerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTransformerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventTransformerConfig));
  EventStreamConfig_descriptor_ = file->message_type(42);
  static const int EventStreamConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStreamConfig, wrapped_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStreamConfig, filter_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStreamConfig, aggregator_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStreamConfig, transformer_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStreamConfig, needed_envs_),
  };
  EventStreamConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventStreamConfig_descriptor_,
      EventStreamConfig::default_instance_,
      EventStreamConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStreamConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStreamConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventStreamConfig));
  EventProducerConfig_descriptor_ = file->message_type(43);
  static const int EventProducerConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventProducerConfig, event_streams_configs_),
  };
  EventProducerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventProducerConfig_descriptor_,
      EventProducerConfig::default_instance_,
      EventProducerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventProducerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventProducerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventProducerConfig));
  EventMessage_descriptor_ = file->message_type(44);
  static const int EventMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, numeric_properties_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, numeric_properties_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, string_properties_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, string_properties_values_),
  };
  EventMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventMessage_descriptor_,
      EventMessage::default_instance_,
      EventMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fuse_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelRegistration_descriptor_, &ChannelRegistration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelClose_descriptor_, &ChannelClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuseMessage_descriptor_, &FuseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileLocation_descriptor_, &GetFileLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNewFileLocation_descriptor_, &GetNewFileLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileAttr_descriptor_, &GetFileAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileAttr_descriptor_, &FileAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileUuid_descriptor_, &GetFileUuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileUuid_descriptor_, &FileUuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLocation_descriptor_, &FileLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateFileAck_descriptor_, &CreateFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileNotUsed_descriptor_, &FileNotUsed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenewFileLocation_descriptor_, &RenewFileLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLocationValidity_descriptor_, &FileLocationValidity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileChildren_descriptor_, &GetFileChildren::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileChildren_descriptor_, &FileChildren::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateDir_descriptor_, &CreateDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFile_descriptor_, &DeleteFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateLink_descriptor_, &CreateLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLink_descriptor_, &GetLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkInfo_descriptor_, &LinkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameFile_descriptor_, &RenameFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFileOwner_descriptor_, &ChangeFileOwner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFileGroup_descriptor_, &ChangeFileGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFilePerms_descriptor_, &ChangeFilePerms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckFilePerms_descriptor_, &CheckFilePerms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTimes_descriptor_, &UpdateTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestChannel_descriptor_, &TestChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestChannelAnswer_descriptor_, &TestChannelAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeRequest_descriptor_, &HandshakeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeRequest_EnvVariable_descriptor_, &HandshakeRequest_EnvVariable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeRequest_CertConfirmation_descriptor_, &HandshakeRequest_CertConfirmation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeResponse_descriptor_, &HandshakeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeAck_descriptor_, &HandshakeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStorageTestFileRequest_descriptor_, &CreateStorageTestFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStorageTestFileResponse_descriptor_, &CreateStorageTestFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageTestFileModifiedRequest_descriptor_, &StorageTestFileModifiedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageTestFileModifiedResponse_descriptor_, &StorageTestFileModifiedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientStorageInfo_descriptor_, &ClientStorageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientStorageInfo_StorageInfo_descriptor_, &ClientStorageInfo_StorageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStatFS_descriptor_, &GetStatFS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatFSInfo_descriptor_, &StatFSInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventFilterConfig_descriptor_, &EventFilterConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventAggregatorConfig_descriptor_, &EventAggregatorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventTransformerConfig_descriptor_, &EventTransformerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventStreamConfig_descriptor_, &EventStreamConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventProducerConfig_descriptor_, &EventProducerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventMessage_descriptor_, &EventMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fuse_5fmessages_2eproto() {
  delete ChannelRegistration::default_instance_;
  delete ChannelRegistration_reflection_;
  delete ChannelClose::default_instance_;
  delete ChannelClose_reflection_;
  delete FuseMessage::default_instance_;
  delete FuseMessage_reflection_;
  delete GetFileLocation::default_instance_;
  delete GetFileLocation_reflection_;
  delete GetNewFileLocation::default_instance_;
  delete GetNewFileLocation_reflection_;
  delete GetFileAttr::default_instance_;
  delete GetFileAttr_reflection_;
  delete FileAttr::default_instance_;
  delete FileAttr_reflection_;
  delete FileAttr::_default_answer_;
  delete GetFileUuid::default_instance_;
  delete GetFileUuid_reflection_;
  delete FileUuid::default_instance_;
  delete FileUuid_reflection_;
  delete FileUuid::_default_answer_;
  delete FileLocation::default_instance_;
  delete FileLocation_reflection_;
  delete FileLocation::_default_answer_;
  delete CreateFileAck::default_instance_;
  delete CreateFileAck_reflection_;
  delete FileNotUsed::default_instance_;
  delete FileNotUsed_reflection_;
  delete RenewFileLocation::default_instance_;
  delete RenewFileLocation_reflection_;
  delete FileLocationValidity::default_instance_;
  delete FileLocationValidity_reflection_;
  delete FileLocationValidity::_default_answer_;
  delete GetFileChildren::default_instance_;
  delete GetFileChildren_reflection_;
  delete FileChildren::default_instance_;
  delete FileChildren_reflection_;
  delete FileChildren::_default_answer_;
  delete CreateDir::default_instance_;
  delete CreateDir_reflection_;
  delete DeleteFile::default_instance_;
  delete DeleteFile_reflection_;
  delete CreateLink::default_instance_;
  delete CreateLink_reflection_;
  delete GetLink::default_instance_;
  delete GetLink_reflection_;
  delete LinkInfo::default_instance_;
  delete LinkInfo_reflection_;
  delete LinkInfo::_default_answer_;
  delete RenameFile::default_instance_;
  delete RenameFile_reflection_;
  delete ChangeFileOwner::default_instance_;
  delete ChangeFileOwner_reflection_;
  delete ChangeFileGroup::default_instance_;
  delete ChangeFileGroup_reflection_;
  delete ChangeFilePerms::default_instance_;
  delete ChangeFilePerms_reflection_;
  delete CheckFilePerms::default_instance_;
  delete CheckFilePerms_reflection_;
  delete CheckFilePerms::_default_type_;
  delete UpdateTimes::default_instance_;
  delete UpdateTimes_reflection_;
  delete TestChannel::default_instance_;
  delete TestChannel_reflection_;
  delete TestChannelAnswer::default_instance_;
  delete TestChannelAnswer_reflection_;
  delete HandshakeRequest::default_instance_;
  delete HandshakeRequest_reflection_;
  delete HandshakeRequest_EnvVariable::default_instance_;
  delete HandshakeRequest_EnvVariable_reflection_;
  delete HandshakeRequest_CertConfirmation::default_instance_;
  delete HandshakeRequest_CertConfirmation_reflection_;
  delete HandshakeResponse::default_instance_;
  delete HandshakeResponse_reflection_;
  delete HandshakeAck::default_instance_;
  delete HandshakeAck_reflection_;
  delete CreateStorageTestFileRequest::default_instance_;
  delete CreateStorageTestFileRequest_reflection_;
  delete CreateStorageTestFileResponse::default_instance_;
  delete CreateStorageTestFileResponse_reflection_;
  delete StorageTestFileModifiedRequest::default_instance_;
  delete StorageTestFileModifiedRequest_reflection_;
  delete StorageTestFileModifiedResponse::default_instance_;
  delete StorageTestFileModifiedResponse_reflection_;
  delete ClientStorageInfo::default_instance_;
  delete ClientStorageInfo_reflection_;
  delete ClientStorageInfo_StorageInfo::default_instance_;
  delete ClientStorageInfo_StorageInfo_reflection_;
  delete GetStatFS::default_instance_;
  delete GetStatFS_reflection_;
  delete StatFSInfo::default_instance_;
  delete StatFSInfo_reflection_;
  delete StatFSInfo::_default_answer_;
  delete EventFilterConfig::default_instance_;
  delete EventFilterConfig_reflection_;
  delete EventAggregatorConfig::default_instance_;
  delete EventAggregatorConfig_reflection_;
  delete EventTransformerConfig::default_instance_;
  delete EventTransformerConfig_reflection_;
  delete EventStreamConfig::default_instance_;
  delete EventStreamConfig_reflection_;
  delete EventProducerConfig::default_instance_;
  delete EventProducerConfig_reflection_;
  delete EventMessage::default_instance_;
  delete EventMessage_reflection_;
}

void protobuf_AddDesc_fuse_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023fuse_messages.proto\022\033veil.protocol.fus"
    "e_messages\"&\n\023ChannelRegistration\022\017\n\007fus"
    "e_id\030\001 \002(\t\"\037\n\014ChannelClose\022\017\n\007fuse_id\030\001 "
    "\002(\t\"2\n\013FuseMessage\022\024\n\014message_type\030\001 \002(\t"
    "\022\r\n\005input\030\002 \002(\014\"c\n\017GetFileLocation\022\027\n\017fi"
    "le_logic_name\030\001 \002(\t\022\023\n\topen_mode\030\002 \001(\t:\000"
    "\022\"\n\023force_cluster_proxy\030\003 \001(\010:\005false\"_\n\022"
    "GetNewFileLocation\022\027\n\017file_logic_name\030\001 "
    "\002(\t\022\014\n\004mode\030\002 \002(\r\022\"\n\023force_cluster_proxy"
    "\030\003 \001(\010:\005false\"&\n\013GetFileAttr\022\027\n\017file_log"
    "ic_name\030\001 \002(\t\"\306\001\n\010FileAttr\022\022\n\006answer\030\001 \001"
    "(\t:\002ok\022\014\n\004mode\030\002 \002(\005\022\013\n\003uid\030\003 \002(\005\022\013\n\003gid"
    "\030\004 \002(\005\022\r\n\005atime\030\005 \002(\003\022\r\n\005mtime\030\006 \002(\003\022\r\n\005"
    "ctime\030\007 \002(\003\022\014\n\004type\030\t \002(\t\022\017\n\004size\030\n \001(\003:"
    "\0010\022\017\n\005uname\030\013 \001(\t:\000\022\017\n\005gname\030\014 \001(\t:\000\022\020\n\005"
    "links\030\r \001(\005:\0011\"&\n\013GetFileUuid\022\027\n\017file_lo"
    "gic_name\030\001 \002(\t\",\n\010FileUuid\022\022\n\006answer\030\001 \001"
    "(\t:\002ok\022\014\n\004uuid\030\002 \002(\t\"\223\001\n\014FileLocation\022\022\n"
    "\006answer\030\001 \001(\t:\002ok\022\022\n\nstorage_id\030\002 \002(\005\022\017\n"
    "\007file_id\030\003 \002(\t\022\020\n\010validity\030\004 \002(\005\022\033\n\023stor"
    "age_helper_name\030\005 \001(\t\022\033\n\023storage_helper_"
    "args\030\006 \003(\t\"(\n\rCreateFileAck\022\027\n\017file_logi"
    "c_name\030\001 \002(\t\"&\n\013FileNotUsed\022\027\n\017file_logi"
    "c_name\030\001 \002(\t\",\n\021RenewFileLocation\022\027\n\017fil"
    "e_logic_name\030\001 \002(\t\"<\n\024FileLocationValidi"
    "ty\022\022\n\006answer\030\001 \001(\t:\002ok\022\020\n\010validity\030\002 \001(\005"
    "\"R\n\017GetFileChildren\022\026\n\016dir_logic_name\030\001 "
    "\002(\t\022\024\n\014children_num\030\002 \002(\005\022\021\n\006offset\030\003 \001("
    "\005:\0010\"<\n\014FileChildren\022\022\n\006answer\030\001 \001(\t:\002ok"
    "\022\030\n\020child_logic_name\030\002 \003(\t\"1\n\tCreateDir\022"
    "\026\n\016dir_logic_name\030\001 \002(\t\022\014\n\004mode\030\002 \002(\r\"%\n"
    "\nDeleteFile\022\027\n\017file_logic_name\030\001 \002(\t\"F\n\n"
    "CreateLink\022\034\n\024from_file_logic_name\030\001 \002(\t"
    "\022\032\n\022to_file_logic_name\030\002 \002(\t\"\"\n\007GetLink\022"
    "\027\n\017file_logic_name\030\001 \002(\t\"7\n\010LinkInfo\022\022\n\006"
    "answer\030\001 \001(\t:\002ok\022\027\n\017file_logic_name\030\002 \002("
    "\t\"F\n\nRenameFile\022\034\n\024from_file_logic_name\030"
    "\001 \002(\t\022\032\n\022to_file_logic_name\030\002 \002(\t\"H\n\017Cha"
    "ngeFileOwner\022\027\n\017file_logic_name\030\001 \002(\t\022\013\n"
    "\003uid\030\002 \002(\005\022\017\n\005uname\030\004 \001(\t:\000\"H\n\017ChangeFil"
    "eGroup\022\027\n\017file_logic_name\030\001 \002(\t\022\013\n\003gid\030\003"
    " \002(\005\022\017\n\005gname\030\005 \001(\t:\000\"9\n\017ChangeFilePerms"
    "\022\027\n\017file_logic_name\030\001 \002(\t\022\r\n\005perms\030\002 \002(\005"
    "\"=\n\016CheckFilePerms\022\027\n\017file_logic_name\030\001 "
    "\002(\t\022\022\n\004type\030\002 \002(\t:\004root\"_\n\013UpdateTimes\022\027"
    "\n\017file_logic_name\030\001 \002(\t\022\021\n\005atime\030\002 \001(\003:\002"
    "-1\022\021\n\005mtime\030\003 \001(\003:\002-1\022\021\n\005ctime\030\004 \001(\003:\002-1"
    "\"A\n\013TestChannel\022\026\n\016answer_message\030\001 \002(\t\022"
    "\032\n\022answer_delay_in_ms\030\002 \002(\005\"$\n\021TestChann"
    "elAnswer\022\017\n\007message\030\001 \002(\t\"\253\002\n\020HandshakeR"
    "equest\022\020\n\010hostname\030\001 \002(\t\022K\n\010variable\030\002 \003"
    "(\01329.veil.protocol.fuse_messages.Handsha"
    "keRequest.EnvVariable\022Y\n\021cert_confirmati"
    "on\030\003 \001(\0132>.veil.protocol.fuse_messages.H"
    "andshakeRequest.CertConfirmation\032*\n\013EnvV"
    "ariable\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\0321\n\020"
    "CertConfirmation\022\r\n\005login\030\001 \002(\t\022\016\n\006resul"
    "t\030\002 \002(\010\"$\n\021HandshakeResponse\022\017\n\007fuse_id\030"
    "\001 \002(\t\"\037\n\014HandshakeAck\022\017\n\007fuse_id\030\001 \002(\t\"2"
    "\n\034CreateStorageTestFileRequest\022\022\n\nstorag"
    "e_id\030\001 \002(\005\"X\n\035CreateStorageTestFileRespo"
    "nse\022\016\n\006answer\030\001 \002(\010\022\027\n\rrelative_path\030\002 \001"
    "(\t:\000\022\016\n\004text\030\003 \001(\t:\000\"Y\n\036StorageTestFileM"
    "odifiedRequest\022\022\n\nstorage_id\030\001 \002(\005\022\025\n\rre"
    "lative_path\030\002 \002(\t\022\014\n\004text\030\003 \002(\t\"1\n\037Stora"
    "geTestFileModifiedResponse\022\016\n\006answer\030\001 \002"
    "(\010\"\237\001\n\021ClientStorageInfo\022P\n\014storage_info"
    "\030\001 \003(\0132:.veil.protocol.fuse_messages.Cli"
    "entStorageInfo.StorageInfo\0328\n\013StorageInf"
    "o\022\022\n\nstorage_id\030\001 \002(\005\022\025\n\rabsolute_path\030\002"
    " \002(\t\"\013\n\tGetStatFS\"H\n\nStatFSInfo\022\022\n\006answe"
    "r\030\001 \001(\t:\002ok\022\022\n\nquota_size\030\002 \002(\003\022\022\n\nfiles"
    "_size\030\003 \002(\003\">\n\021EventFilterConfig\022\022\n\nfiel"
    "d_name\030\001 \002(\t\022\025\n\rdesired_value\030\002 \002(\t\"V\n\025E"
    "ventAggregatorConfig\022\022\n\nfield_name\030\001 \002(\t"
    "\022\021\n\tthreshold\030\002 \002(\004\022\026\n\016sum_field_name\030\003 "
    "\002(\t\"g\n\026EventTransformerConfig\022\036\n\026field_n"
    "ames_to_replace\030\001 \003(\t\022\031\n\021values_to_repla"
    "ce\030\002 \003(\t\022\022\n\nnew_values\030\003 \003(\t\"\327\002\n\021EventSt"
    "reamConfig\022F\n\016wrapped_config\030\001 \001(\0132..vei"
    "l.protocol.fuse_messages.EventStreamConf"
    "ig\022E\n\rfilter_config\030\002 \001(\0132..veil.protoco"
    "l.fuse_messages.EventFilterConfig\022M\n\021agg"
    "regator_config\030\003 \001(\01322.veil.protocol.fus"
    "e_messages.EventAggregatorConfig\022O\n\022tran"
    "sformer_config\030\004 \001(\01323.veil.protocol.fus"
    "e_messages.EventTransformerConfig\022\023\n\013nee"
    "ded_envs\030\005 \003(\t\"d\n\023EventProducerConfig\022M\n"
    "\025event_streams_configs\030\001 \003(\0132..veil.prot"
    "ocol.fuse_messages.EventStreamConfig\"\224\001\n"
    "\014EventMessage\022\037\n\027numeric_properties_keys"
    "\030\001 \003(\t\022!\n\031numeric_properties_values\030\002 \003("
    "\003\022\036\n\026string_properties_keys\030\003 \003(\t\022 \n\030str"
    "ing_properties_values\030\004 \003(\t", 3747);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fuse_messages.proto", &protobuf_RegisterTypes);
  ChannelRegistration::default_instance_ = new ChannelRegistration();
  ChannelClose::default_instance_ = new ChannelClose();
  FuseMessage::default_instance_ = new FuseMessage();
  GetFileLocation::default_instance_ = new GetFileLocation();
  GetNewFileLocation::default_instance_ = new GetNewFileLocation();
  GetFileAttr::default_instance_ = new GetFileAttr();
  FileAttr::_default_answer_ =
      new ::std::string("ok", 2);
  FileAttr::default_instance_ = new FileAttr();
  GetFileUuid::default_instance_ = new GetFileUuid();
  FileUuid::_default_answer_ =
      new ::std::string("ok", 2);
  FileUuid::default_instance_ = new FileUuid();
  FileLocation::_default_answer_ =
      new ::std::string("ok", 2);
  FileLocation::default_instance_ = new FileLocation();
  CreateFileAck::default_instance_ = new CreateFileAck();
  FileNotUsed::default_instance_ = new FileNotUsed();
  RenewFileLocation::default_instance_ = new RenewFileLocation();
  FileLocationValidity::_default_answer_ =
      new ::std::string("ok", 2);
  FileLocationValidity::default_instance_ = new FileLocationValidity();
  GetFileChildren::default_instance_ = new GetFileChildren();
  FileChildren::_default_answer_ =
      new ::std::string("ok", 2);
  FileChildren::default_instance_ = new FileChildren();
  CreateDir::default_instance_ = new CreateDir();
  DeleteFile::default_instance_ = new DeleteFile();
  CreateLink::default_instance_ = new CreateLink();
  GetLink::default_instance_ = new GetLink();
  LinkInfo::_default_answer_ =
      new ::std::string("ok", 2);
  LinkInfo::default_instance_ = new LinkInfo();
  RenameFile::default_instance_ = new RenameFile();
  ChangeFileOwner::default_instance_ = new ChangeFileOwner();
  ChangeFileGroup::default_instance_ = new ChangeFileGroup();
  ChangeFilePerms::default_instance_ = new ChangeFilePerms();
  CheckFilePerms::_default_type_ =
      new ::std::string("root", 4);
  CheckFilePerms::default_instance_ = new CheckFilePerms();
  UpdateTimes::default_instance_ = new UpdateTimes();
  TestChannel::default_instance_ = new TestChannel();
  TestChannelAnswer::default_instance_ = new TestChannelAnswer();
  HandshakeRequest::default_instance_ = new HandshakeRequest();
  HandshakeRequest_EnvVariable::default_instance_ = new HandshakeRequest_EnvVariable();
  HandshakeRequest_CertConfirmation::default_instance_ = new HandshakeRequest_CertConfirmation();
  HandshakeResponse::default_instance_ = new HandshakeResponse();
  HandshakeAck::default_instance_ = new HandshakeAck();
  CreateStorageTestFileRequest::default_instance_ = new CreateStorageTestFileRequest();
  CreateStorageTestFileResponse::default_instance_ = new CreateStorageTestFileResponse();
  StorageTestFileModifiedRequest::default_instance_ = new StorageTestFileModifiedRequest();
  StorageTestFileModifiedResponse::default_instance_ = new StorageTestFileModifiedResponse();
  ClientStorageInfo::default_instance_ = new ClientStorageInfo();
  ClientStorageInfo_StorageInfo::default_instance_ = new ClientStorageInfo_StorageInfo();
  GetStatFS::default_instance_ = new GetStatFS();
  StatFSInfo::_default_answer_ =
      new ::std::string("ok", 2);
  StatFSInfo::default_instance_ = new StatFSInfo();
  EventFilterConfig::default_instance_ = new EventFilterConfig();
  EventAggregatorConfig::default_instance_ = new EventAggregatorConfig();
  EventTransformerConfig::default_instance_ = new EventTransformerConfig();
  EventStreamConfig::default_instance_ = new EventStreamConfig();
  EventProducerConfig::default_instance_ = new EventProducerConfig();
  EventMessage::default_instance_ = new EventMessage();
  ChannelRegistration::default_instance_->InitAsDefaultInstance();
  ChannelClose::default_instance_->InitAsDefaultInstance();
  FuseMessage::default_instance_->InitAsDefaultInstance();
  GetFileLocation::default_instance_->InitAsDefaultInstance();
  GetNewFileLocation::default_instance_->InitAsDefaultInstance();
  GetFileAttr::default_instance_->InitAsDefaultInstance();
  FileAttr::default_instance_->InitAsDefaultInstance();
  GetFileUuid::default_instance_->InitAsDefaultInstance();
  FileUuid::default_instance_->InitAsDefaultInstance();
  FileLocation::default_instance_->InitAsDefaultInstance();
  CreateFileAck::default_instance_->InitAsDefaultInstance();
  FileNotUsed::default_instance_->InitAsDefaultInstance();
  RenewFileLocation::default_instance_->InitAsDefaultInstance();
  FileLocationValidity::default_instance_->InitAsDefaultInstance();
  GetFileChildren::default_instance_->InitAsDefaultInstance();
  FileChildren::default_instance_->InitAsDefaultInstance();
  CreateDir::default_instance_->InitAsDefaultInstance();
  DeleteFile::default_instance_->InitAsDefaultInstance();
  CreateLink::default_instance_->InitAsDefaultInstance();
  GetLink::default_instance_->InitAsDefaultInstance();
  LinkInfo::default_instance_->InitAsDefaultInstance();
  RenameFile::default_instance_->InitAsDefaultInstance();
  ChangeFileOwner::default_instance_->InitAsDefaultInstance();
  ChangeFileGroup::default_instance_->InitAsDefaultInstance();
  ChangeFilePerms::default_instance_->InitAsDefaultInstance();
  CheckFilePerms::default_instance_->InitAsDefaultInstance();
  UpdateTimes::default_instance_->InitAsDefaultInstance();
  TestChannel::default_instance_->InitAsDefaultInstance();
  TestChannelAnswer::default_instance_->InitAsDefaultInstance();
  HandshakeRequest::default_instance_->InitAsDefaultInstance();
  HandshakeRequest_EnvVariable::default_instance_->InitAsDefaultInstance();
  HandshakeRequest_CertConfirmation::default_instance_->InitAsDefaultInstance();
  HandshakeResponse::default_instance_->InitAsDefaultInstance();
  HandshakeAck::default_instance_->InitAsDefaultInstance();
  CreateStorageTestFileRequest::default_instance_->InitAsDefaultInstance();
  CreateStorageTestFileResponse::default_instance_->InitAsDefaultInstance();
  StorageTestFileModifiedRequest::default_instance_->InitAsDefaultInstance();
  StorageTestFileModifiedResponse::default_instance_->InitAsDefaultInstance();
  ClientStorageInfo::default_instance_->InitAsDefaultInstance();
  ClientStorageInfo_StorageInfo::default_instance_->InitAsDefaultInstance();
  GetStatFS::default_instance_->InitAsDefaultInstance();
  StatFSInfo::default_instance_->InitAsDefaultInstance();
  EventFilterConfig::default_instance_->InitAsDefaultInstance();
  EventAggregatorConfig::default_instance_->InitAsDefaultInstance();
  EventTransformerConfig::default_instance_->InitAsDefaultInstance();
  EventStreamConfig::default_instance_->InitAsDefaultInstance();
  EventProducerConfig::default_instance_->InitAsDefaultInstance();
  EventMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fuse_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fuse_5fmessages_2eproto {
  StaticDescriptorInitializer_fuse_5fmessages_2eproto() {
    protobuf_AddDesc_fuse_5fmessages_2eproto();
  }
} static_descriptor_initializer_fuse_5fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChannelRegistration::kFuseIdFieldNumber;
#endif  // !_MSC_VER

ChannelRegistration::ChannelRegistration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChannelRegistration::InitAsDefaultInstance() {
}

ChannelRegistration::ChannelRegistration(const ChannelRegistration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChannelRegistration::SharedCtor() {
  _cached_size_ = 0;
  fuse_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelRegistration::~ChannelRegistration() {
  SharedDtor();
}

void ChannelRegistration::SharedDtor() {
  if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fuse_id_;
  }
  if (this != default_instance_) {
  }
}

void ChannelRegistration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelRegistration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelRegistration_descriptor_;
}

const ChannelRegistration& ChannelRegistration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

ChannelRegistration* ChannelRegistration::default_instance_ = NULL;

ChannelRegistration* ChannelRegistration::New() const {
  return new ChannelRegistration;
}

void ChannelRegistration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fuse_id()) {
      if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
        fuse_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fuse_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fuse_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fuse_id().data(), this->fuse_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChannelRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fuse_id = 1;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fuse_id().data(), this->fuse_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fuse_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChannelRegistration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fuse_id = 1;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fuse_id().data(), this->fuse_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fuse_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChannelRegistration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fuse_id = 1;
    if (has_fuse_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fuse_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelRegistration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelRegistration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelRegistration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelRegistration::MergeFrom(const ChannelRegistration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuse_id()) {
      set_fuse_id(from.fuse_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelRegistration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelRegistration::CopyFrom(const ChannelRegistration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChannelRegistration::Swap(ChannelRegistration* other) {
  if (other != this) {
    std::swap(fuse_id_, other->fuse_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelRegistration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelRegistration_descriptor_;
  metadata.reflection = ChannelRegistration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelClose::kFuseIdFieldNumber;
#endif  // !_MSC_VER

ChannelClose::ChannelClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChannelClose::InitAsDefaultInstance() {
}

ChannelClose::ChannelClose(const ChannelClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChannelClose::SharedCtor() {
  _cached_size_ = 0;
  fuse_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelClose::~ChannelClose() {
  SharedDtor();
}

void ChannelClose::SharedDtor() {
  if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fuse_id_;
  }
  if (this != default_instance_) {
  }
}

void ChannelClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelClose_descriptor_;
}

const ChannelClose& ChannelClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

ChannelClose* ChannelClose::default_instance_ = NULL;

ChannelClose* ChannelClose::New() const {
  return new ChannelClose;
}

void ChannelClose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fuse_id()) {
      if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
        fuse_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fuse_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fuse_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fuse_id().data(), this->fuse_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChannelClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fuse_id = 1;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fuse_id().data(), this->fuse_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fuse_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChannelClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fuse_id = 1;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fuse_id().data(), this->fuse_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fuse_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChannelClose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fuse_id = 1;
    if (has_fuse_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fuse_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelClose::MergeFrom(const ChannelClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuse_id()) {
      set_fuse_id(from.fuse_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelClose::CopyFrom(const ChannelClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelClose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChannelClose::Swap(ChannelClose* other) {
  if (other != this) {
    std::swap(fuse_id_, other->fuse_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelClose_descriptor_;
  metadata.reflection = ChannelClose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuseMessage::kMessageTypeFieldNumber;
const int FuseMessage::kInputFieldNumber;
#endif  // !_MSC_VER

FuseMessage::FuseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FuseMessage::InitAsDefaultInstance() {
}

FuseMessage::FuseMessage(const FuseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FuseMessage::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuseMessage::~FuseMessage() {
  SharedDtor();
}

void FuseMessage::SharedDtor() {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    delete message_type_;
  }
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (this != default_instance_) {
  }
}

void FuseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuseMessage_descriptor_;
}

const FuseMessage& FuseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

FuseMessage* FuseMessage::default_instance_ = NULL;

FuseMessage* FuseMessage::New() const {
  return new FuseMessage;
}

void FuseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_type()) {
      if (message_type_ != &::google::protobuf::internal::kEmptyString) {
        message_type_->clear();
      }
    }
    if (has_input()) {
      if (input_ != &::google::protobuf::internal::kEmptyString) {
        input_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // required bytes input = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FuseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_type(), output);
  }

  // required bytes input = 2;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->input(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FuseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_type(), target);
  }

  // required bytes input = 2;
  if (has_input()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->input(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FuseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // required bytes input = 2;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->input());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuseMessage::MergeFrom(const FuseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_input()) {
      set_input(from.input());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuseMessage::CopyFrom(const FuseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FuseMessage::Swap(FuseMessage* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(input_, other->input_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuseMessage_descriptor_;
  metadata.reflection = FuseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileLocation::kFileLogicNameFieldNumber;
const int GetFileLocation::kOpenModeFieldNumber;
const int GetFileLocation::kForceClusterProxyFieldNumber;
#endif  // !_MSC_VER

GetFileLocation::GetFileLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileLocation::InitAsDefaultInstance() {
}

GetFileLocation::GetFileLocation(const GetFileLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileLocation::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  force_cluster_proxy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileLocation::~GetFileLocation() {
  SharedDtor();
}

void GetFileLocation::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (open_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete open_mode_;
  }
  if (this != default_instance_) {
  }
}

void GetFileLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileLocation_descriptor_;
}

const GetFileLocation& GetFileLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

GetFileLocation* GetFileLocation::default_instance_ = NULL;

GetFileLocation* GetFileLocation::New() const {
  return new GetFileLocation;
}

void GetFileLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
    if (has_open_mode()) {
      if (open_mode_ != &::google::protobuf::internal::kEmptyString) {
        open_mode_->clear();
      }
    }
    force_cluster_proxy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_open_mode;
        break;
      }

      // optional string open_mode = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_mode().data(), this->open_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_force_cluster_proxy;
        break;
      }

      // optional bool force_cluster_proxy = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_cluster_proxy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_cluster_proxy_)));
          set_has_force_cluster_proxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  // optional string open_mode = 2 [default = ""];
  if (has_open_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_mode().data(), this->open_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->open_mode(), output);
  }

  // optional bool force_cluster_proxy = 3 [default = false];
  if (has_force_cluster_proxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->force_cluster_proxy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  // optional string open_mode = 2 [default = ""];
  if (has_open_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_mode().data(), this->open_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->open_mode(), target);
  }

  // optional bool force_cluster_proxy = 3 [default = false];
  if (has_force_cluster_proxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->force_cluster_proxy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

    // optional string open_mode = 2 [default = ""];
    if (has_open_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_mode());
    }

    // optional bool force_cluster_proxy = 3 [default = false];
    if (has_force_cluster_proxy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileLocation::MergeFrom(const GetFileLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
    if (from.has_open_mode()) {
      set_open_mode(from.open_mode());
    }
    if (from.has_force_cluster_proxy()) {
      set_force_cluster_proxy(from.force_cluster_proxy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileLocation::CopyFrom(const GetFileLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFileLocation::Swap(GetFileLocation* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(open_mode_, other->open_mode_);
    std::swap(force_cluster_proxy_, other->force_cluster_proxy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileLocation_descriptor_;
  metadata.reflection = GetFileLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNewFileLocation::kFileLogicNameFieldNumber;
const int GetNewFileLocation::kModeFieldNumber;
const int GetNewFileLocation::kForceClusterProxyFieldNumber;
#endif  // !_MSC_VER

GetNewFileLocation::GetNewFileLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNewFileLocation::InitAsDefaultInstance() {
}

GetNewFileLocation::GetNewFileLocation(const GetNewFileLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNewFileLocation::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0u;
  force_cluster_proxy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNewFileLocation::~GetNewFileLocation() {
  SharedDtor();
}

void GetNewFileLocation::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void GetNewFileLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNewFileLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNewFileLocation_descriptor_;
}

const GetNewFileLocation& GetNewFileLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

GetNewFileLocation* GetNewFileLocation::default_instance_ = NULL;

GetNewFileLocation* GetNewFileLocation::New() const {
  return new GetNewFileLocation;
}

void GetNewFileLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
    mode_ = 0u;
    force_cluster_proxy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNewFileLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // required uint32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_force_cluster_proxy;
        break;
      }

      // optional bool force_cluster_proxy = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_cluster_proxy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_cluster_proxy_)));
          set_has_force_cluster_proxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNewFileLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  // required uint32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  // optional bool force_cluster_proxy = 3 [default = false];
  if (has_force_cluster_proxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->force_cluster_proxy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNewFileLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  // required uint32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  // optional bool force_cluster_proxy = 3 [default = false];
  if (has_force_cluster_proxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->force_cluster_proxy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNewFileLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

    // required uint32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional bool force_cluster_proxy = 3 [default = false];
    if (has_force_cluster_proxy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNewFileLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNewFileLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNewFileLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNewFileLocation::MergeFrom(const GetNewFileLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_force_cluster_proxy()) {
      set_force_cluster_proxy(from.force_cluster_proxy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNewFileLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewFileLocation::CopyFrom(const GetNewFileLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewFileLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetNewFileLocation::Swap(GetNewFileLocation* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(mode_, other->mode_);
    std::swap(force_cluster_proxy_, other->force_cluster_proxy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNewFileLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNewFileLocation_descriptor_;
  metadata.reflection = GetNewFileLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileAttr::kFileLogicNameFieldNumber;
#endif  // !_MSC_VER

GetFileAttr::GetFileAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileAttr::InitAsDefaultInstance() {
}

GetFileAttr::GetFileAttr(const GetFileAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileAttr::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileAttr::~GetFileAttr() {
  SharedDtor();
}

void GetFileAttr::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void GetFileAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileAttr_descriptor_;
}

const GetFileAttr& GetFileAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

GetFileAttr* GetFileAttr::default_instance_ = NULL;

GetFileAttr* GetFileAttr::New() const {
  return new GetFileAttr;
}

void GetFileAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileAttr::MergeFrom(const GetFileAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileAttr::CopyFrom(const GetFileAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFileAttr::Swap(GetFileAttr* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileAttr_descriptor_;
  metadata.reflection = GetFileAttr_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FileAttr::_default_answer_ = NULL;
#ifndef _MSC_VER
const int FileAttr::kAnswerFieldNumber;
const int FileAttr::kModeFieldNumber;
const int FileAttr::kUidFieldNumber;
const int FileAttr::kGidFieldNumber;
const int FileAttr::kAtimeFieldNumber;
const int FileAttr::kMtimeFieldNumber;
const int FileAttr::kCtimeFieldNumber;
const int FileAttr::kTypeFieldNumber;
const int FileAttr::kSizeFieldNumber;
const int FileAttr::kUnameFieldNumber;
const int FileAttr::kGnameFieldNumber;
const int FileAttr::kLinksFieldNumber;
#endif  // !_MSC_VER

FileAttr::FileAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileAttr::InitAsDefaultInstance() {
}

FileAttr::FileAttr(const FileAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileAttr::SharedCtor() {
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(_default_answer_);
  mode_ = 0;
  uid_ = 0;
  gid_ = 0;
  atime_ = GOOGLE_LONGLONG(0);
  mtime_ = GOOGLE_LONGLONG(0);
  ctime_ = GOOGLE_LONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_LONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  links_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileAttr::~FileAttr() {
  SharedDtor();
}

void FileAttr::SharedDtor() {
  if (answer_ != _default_answer_) {
    delete answer_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    delete uname_;
  }
  if (gname_ != &::google::protobuf::internal::kEmptyString) {
    delete gname_;
  }
  if (this != default_instance_) {
  }
}

void FileAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileAttr_descriptor_;
}

const FileAttr& FileAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

FileAttr* FileAttr::default_instance_ = NULL;

FileAttr* FileAttr::New() const {
  return new FileAttr;
}

void FileAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer()) {
      if (answer_ != _default_answer_) {
        answer_->assign(*_default_answer_);
      }
    }
    mode_ = 0;
    uid_ = 0;
    gid_ = 0;
    atime_ = GOOGLE_LONGLONG(0);
    mtime_ = GOOGLE_LONGLONG(0);
    ctime_ = GOOGLE_LONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    size_ = GOOGLE_LONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::kEmptyString) {
        uname_->clear();
      }
    }
    if (has_gname()) {
      if (gname_ != &::google::protobuf::internal::kEmptyString) {
        gname_->clear();
      }
    }
    links_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string answer = 1 [default = "ok"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // required int32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required int32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_atime;
        break;
      }

      // required int64 atime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atime_)));
          set_has_atime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mtime;
        break;
      }

      // required int64 mtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ctime;
        break;
      }

      // required int64 ctime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_type;
        break;
      }

      // required string type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_size;
        break;
      }

      // optional int64 size = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_uname;
        break;
      }

      // optional string uname = 11 [default = ""];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_gname;
        break;
      }

      // optional string gname = 12 [default = ""];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gname().data(), this->gname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_links;
        break;
      }

      // optional int32 links = 13 [default = 1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_links:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &links_)));
          set_has_links();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer(), output);
  }

  // required int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }

  // required int32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int64 atime = 5;
  if (has_atime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->atime(), output);
  }

  // required int64 mtime = 6;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->mtime(), output);
  }

  // required int64 ctime = 7;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ctime(), output);
  }

  // required string type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->type(), output);
  }

  // optional int64 size = 10 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->size(), output);
  }

  // optional string uname = 11 [default = ""];
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->uname(), output);
  }

  // optional string gname = 12 [default = ""];
  if (has_gname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gname().data(), this->gname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->gname(), output);
  }

  // optional int32 links = 13 [default = 1];
  if (has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->links(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // required int32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }

  // required int32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int64 atime = 5;
  if (has_atime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->atime(), target);
  }

  // required int64 mtime = 6;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->mtime(), target);
  }

  // required int64 ctime = 7;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ctime(), target);
  }

  // required string type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->type(), target);
  }

  // optional int64 size = 10 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->size(), target);
  }

  // optional string uname = 11 [default = ""];
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->uname(), target);
  }

  // optional string gname = 12 [default = ""];
  if (has_gname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gname().data(), this->gname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->gname(), target);
  }

  // optional int32 links = 13 [default = 1];
  if (has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->links(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string answer = 1 [default = "ok"];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // required int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // required int32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required int32 gid = 4;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // required int64 atime = 5;
    if (has_atime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->atime());
    }

    // required int64 mtime = 6;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

    // required int64 ctime = 7;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime());
    }

    // required string type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 size = 10 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional string uname = 11 [default = ""];
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional string gname = 12 [default = ""];
    if (has_gname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gname());
    }

    // optional int32 links = 13 [default = 1];
    if (has_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->links());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileAttr::MergeFrom(const FileAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_atime()) {
      set_atime(from.atime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_gname()) {
      set_gname(from.gname());
    }
    if (from.has_links()) {
      set_links(from.links());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileAttr::CopyFrom(const FileAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;

  return true;
}

void FileAttr::Swap(FileAttr* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(mode_, other->mode_);
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(atime_, other->atime_);
    std::swap(mtime_, other->mtime_);
    std::swap(ctime_, other->ctime_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(uname_, other->uname_);
    std::swap(gname_, other->gname_);
    std::swap(links_, other->links_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileAttr_descriptor_;
  metadata.reflection = FileAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileUuid::kFileLogicNameFieldNumber;
#endif  // !_MSC_VER

GetFileUuid::GetFileUuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileUuid::InitAsDefaultInstance() {
}

GetFileUuid::GetFileUuid(const GetFileUuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileUuid::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileUuid::~GetFileUuid() {
  SharedDtor();
}

void GetFileUuid::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void GetFileUuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileUuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileUuid_descriptor_;
}

const GetFileUuid& GetFileUuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

GetFileUuid* GetFileUuid::default_instance_ = NULL;

GetFileUuid* GetFileUuid::New() const {
  return new GetFileUuid;
}

void GetFileUuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileUuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileUuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileUuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileUuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileUuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileUuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileUuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileUuid::MergeFrom(const GetFileUuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileUuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileUuid::CopyFrom(const GetFileUuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileUuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFileUuid::Swap(GetFileUuid* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileUuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileUuid_descriptor_;
  metadata.reflection = GetFileUuid_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FileUuid::_default_answer_ = NULL;
#ifndef _MSC_VER
const int FileUuid::kAnswerFieldNumber;
const int FileUuid::kUuidFieldNumber;
#endif  // !_MSC_VER

FileUuid::FileUuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileUuid::InitAsDefaultInstance() {
}

FileUuid::FileUuid(const FileUuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileUuid::SharedCtor() {
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(_default_answer_);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileUuid::~FileUuid() {
  SharedDtor();
}

void FileUuid::SharedDtor() {
  if (answer_ != _default_answer_) {
    delete answer_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void FileUuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileUuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileUuid_descriptor_;
}

const FileUuid& FileUuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

FileUuid* FileUuid::default_instance_ = NULL;

FileUuid* FileUuid::New() const {
  return new FileUuid;
}

void FileUuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer()) {
      if (answer_ != _default_answer_) {
        answer_->assign(*_default_answer_);
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileUuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string answer = 1 [default = "ok"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // required string uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileUuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer(), output);
  }

  // required string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileUuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // required string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileUuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string answer = 1 [default = "ok"];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // required string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileUuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileUuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileUuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileUuid::MergeFrom(const FileUuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileUuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileUuid::CopyFrom(const FileUuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileUuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void FileUuid::Swap(FileUuid* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileUuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileUuid_descriptor_;
  metadata.reflection = FileUuid_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FileLocation::_default_answer_ = NULL;
#ifndef _MSC_VER
const int FileLocation::kAnswerFieldNumber;
const int FileLocation::kStorageIdFieldNumber;
const int FileLocation::kFileIdFieldNumber;
const int FileLocation::kValidityFieldNumber;
const int FileLocation::kStorageHelperNameFieldNumber;
const int FileLocation::kStorageHelperArgsFieldNumber;
#endif  // !_MSC_VER

FileLocation::FileLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLocation::InitAsDefaultInstance() {
}

FileLocation::FileLocation(const FileLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLocation::SharedCtor() {
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(_default_answer_);
  storage_id_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  validity_ = 0;
  storage_helper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLocation::~FileLocation() {
  SharedDtor();
}

void FileLocation::SharedDtor() {
  if (answer_ != _default_answer_) {
    delete answer_;
  }
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (storage_helper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete storage_helper_name_;
  }
  if (this != default_instance_) {
  }
}

void FileLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLocation_descriptor_;
}

const FileLocation& FileLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

FileLocation* FileLocation::default_instance_ = NULL;

FileLocation* FileLocation::New() const {
  return new FileLocation;
}

void FileLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer()) {
      if (answer_ != _default_answer_) {
        answer_->assign(*_default_answer_);
      }
    }
    storage_id_ = 0;
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    validity_ = 0;
    if (has_storage_helper_name()) {
      if (storage_helper_name_ != &::google::protobuf::internal::kEmptyString) {
        storage_helper_name_->clear();
      }
    }
  }
  storage_helper_args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string answer = 1 [default = "ok"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        break;
      }

      // required int32 storage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storage_id_)));
          set_has_storage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_id;
        break;
      }

      // required string file_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_validity;
        break;
      }

      // required int32 validity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validity_)));
          set_has_validity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_storage_helper_name;
        break;
      }

      // optional string storage_helper_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_helper_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_helper_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storage_helper_name().data(), this->storage_helper_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_storage_helper_args;
        break;
      }

      // repeated string storage_helper_args = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_helper_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_storage_helper_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storage_helper_args(this->storage_helper_args_size() - 1).data(),
            this->storage_helper_args(this->storage_helper_args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_storage_helper_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer(), output);
  }

  // required int32 storage_id = 2;
  if (has_storage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->storage_id(), output);
  }

  // required string file_id = 3;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_id(), output);
  }

  // required int32 validity = 4;
  if (has_validity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->validity(), output);
  }

  // optional string storage_helper_name = 5;
  if (has_storage_helper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storage_helper_name().data(), this->storage_helper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->storage_helper_name(), output);
  }

  // repeated string storage_helper_args = 6;
  for (int i = 0; i < this->storage_helper_args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->storage_helper_args(i).data(), this->storage_helper_args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->storage_helper_args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // required int32 storage_id = 2;
  if (has_storage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->storage_id(), target);
  }

  // required string file_id = 3;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_id(), target);
  }

  // required int32 validity = 4;
  if (has_validity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->validity(), target);
  }

  // optional string storage_helper_name = 5;
  if (has_storage_helper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storage_helper_name().data(), this->storage_helper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->storage_helper_name(), target);
  }

  // repeated string storage_helper_args = 6;
  for (int i = 0; i < this->storage_helper_args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storage_helper_args(i).data(), this->storage_helper_args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->storage_helper_args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string answer = 1 [default = "ok"];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // required int32 storage_id = 2;
    if (has_storage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storage_id());
    }

    // required string file_id = 3;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required int32 validity = 4;
    if (has_validity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validity());
    }

    // optional string storage_helper_name = 5;
    if (has_storage_helper_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_helper_name());
    }

  }
  // repeated string storage_helper_args = 6;
  total_size += 1 * this->storage_helper_args_size();
  for (int i = 0; i < this->storage_helper_args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->storage_helper_args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLocation::MergeFrom(const FileLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_helper_args_.MergeFrom(from.storage_helper_args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_storage_id()) {
      set_storage_id(from.storage_id());
    }
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_validity()) {
      set_validity(from.validity());
    }
    if (from.has_storage_helper_name()) {
      set_storage_helper_name(from.storage_helper_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLocation::CopyFrom(const FileLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void FileLocation::Swap(FileLocation* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(storage_id_, other->storage_id_);
    std::swap(file_id_, other->file_id_);
    std::swap(validity_, other->validity_);
    std::swap(storage_helper_name_, other->storage_helper_name_);
    storage_helper_args_.Swap(&other->storage_helper_args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLocation_descriptor_;
  metadata.reflection = FileLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateFileAck::kFileLogicNameFieldNumber;
#endif  // !_MSC_VER

CreateFileAck::CreateFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateFileAck::InitAsDefaultInstance() {
}

CreateFileAck::CreateFileAck(const CreateFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateFileAck::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateFileAck::~CreateFileAck() {
  SharedDtor();
}

void CreateFileAck::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void CreateFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateFileAck_descriptor_;
}

const CreateFileAck& CreateFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

CreateFileAck* CreateFileAck::default_instance_ = NULL;

CreateFileAck* CreateFileAck::New() const {
  return new CreateFileAck;
}

void CreateFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateFileAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateFileAck::MergeFrom(const CreateFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFileAck::CopyFrom(const CreateFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFileAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateFileAck::Swap(CreateFileAck* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateFileAck_descriptor_;
  metadata.reflection = CreateFileAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileNotUsed::kFileLogicNameFieldNumber;
#endif  // !_MSC_VER

FileNotUsed::FileNotUsed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileNotUsed::InitAsDefaultInstance() {
}

FileNotUsed::FileNotUsed(const FileNotUsed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileNotUsed::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileNotUsed::~FileNotUsed() {
  SharedDtor();
}

void FileNotUsed::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void FileNotUsed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileNotUsed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileNotUsed_descriptor_;
}

const FileNotUsed& FileNotUsed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

FileNotUsed* FileNotUsed::default_instance_ = NULL;

FileNotUsed* FileNotUsed::New() const {
  return new FileNotUsed;
}

void FileNotUsed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileNotUsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileNotUsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileNotUsed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileNotUsed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileNotUsed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileNotUsed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileNotUsed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileNotUsed::MergeFrom(const FileNotUsed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileNotUsed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileNotUsed::CopyFrom(const FileNotUsed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileNotUsed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileNotUsed::Swap(FileNotUsed* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileNotUsed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileNotUsed_descriptor_;
  metadata.reflection = FileNotUsed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenewFileLocation::kFileLogicNameFieldNumber;
#endif  // !_MSC_VER

RenewFileLocation::RenewFileLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenewFileLocation::InitAsDefaultInstance() {
}

RenewFileLocation::RenewFileLocation(const RenewFileLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenewFileLocation::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenewFileLocation::~RenewFileLocation() {
  SharedDtor();
}

void RenewFileLocation::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void RenewFileLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenewFileLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenewFileLocation_descriptor_;
}

const RenewFileLocation& RenewFileLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

RenewFileLocation* RenewFileLocation::default_instance_ = NULL;

RenewFileLocation* RenewFileLocation::New() const {
  return new RenewFileLocation;
}

void RenewFileLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenewFileLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenewFileLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenewFileLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenewFileLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenewFileLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenewFileLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenewFileLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenewFileLocation::MergeFrom(const RenewFileLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenewFileLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewFileLocation::CopyFrom(const RenewFileLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewFileLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RenewFileLocation::Swap(RenewFileLocation* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenewFileLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenewFileLocation_descriptor_;
  metadata.reflection = RenewFileLocation_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FileLocationValidity::_default_answer_ = NULL;
#ifndef _MSC_VER
const int FileLocationValidity::kAnswerFieldNumber;
const int FileLocationValidity::kValidityFieldNumber;
#endif  // !_MSC_VER

FileLocationValidity::FileLocationValidity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLocationValidity::InitAsDefaultInstance() {
}

FileLocationValidity::FileLocationValidity(const FileLocationValidity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLocationValidity::SharedCtor() {
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(_default_answer_);
  validity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLocationValidity::~FileLocationValidity() {
  SharedDtor();
}

void FileLocationValidity::SharedDtor() {
  if (answer_ != _default_answer_) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void FileLocationValidity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLocationValidity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLocationValidity_descriptor_;
}

const FileLocationValidity& FileLocationValidity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

FileLocationValidity* FileLocationValidity::default_instance_ = NULL;

FileLocationValidity* FileLocationValidity::New() const {
  return new FileLocationValidity;
}

void FileLocationValidity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer()) {
      if (answer_ != _default_answer_) {
        answer_->assign(*_default_answer_);
      }
    }
    validity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLocationValidity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string answer = 1 [default = "ok"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_validity;
        break;
      }

      // optional int32 validity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validity_)));
          set_has_validity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLocationValidity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer(), output);
  }

  // optional int32 validity = 2;
  if (has_validity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->validity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLocationValidity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // optional int32 validity = 2;
  if (has_validity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->validity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLocationValidity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string answer = 1 [default = "ok"];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // optional int32 validity = 2;
    if (has_validity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLocationValidity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLocationValidity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLocationValidity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLocationValidity::MergeFrom(const FileLocationValidity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_validity()) {
      set_validity(from.validity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLocationValidity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLocationValidity::CopyFrom(const FileLocationValidity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLocationValidity::IsInitialized() const {

  return true;
}

void FileLocationValidity::Swap(FileLocationValidity* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(validity_, other->validity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLocationValidity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLocationValidity_descriptor_;
  metadata.reflection = FileLocationValidity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileChildren::kDirLogicNameFieldNumber;
const int GetFileChildren::kChildrenNumFieldNumber;
const int GetFileChildren::kOffsetFieldNumber;
#endif  // !_MSC_VER

GetFileChildren::GetFileChildren()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileChildren::InitAsDefaultInstance() {
}

GetFileChildren::GetFileChildren(const GetFileChildren& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileChildren::SharedCtor() {
  _cached_size_ = 0;
  dir_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  children_num_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileChildren::~GetFileChildren() {
  SharedDtor();
}

void GetFileChildren::SharedDtor() {
  if (dir_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dir_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void GetFileChildren::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileChildren::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileChildren_descriptor_;
}

const GetFileChildren& GetFileChildren::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

GetFileChildren* GetFileChildren::default_instance_ = NULL;

GetFileChildren* GetFileChildren::New() const {
  return new GetFileChildren;
}

void GetFileChildren::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dir_logic_name()) {
      if (dir_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        dir_logic_name_->clear();
      }
    }
    children_num_ = 0;
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileChildren::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dir_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dir_logic_name().data(), this->dir_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_children_num;
        break;
      }

      // required int32 children_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_children_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &children_num_)));
          set_has_children_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int32 offset = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileChildren::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dir_logic_name = 1;
  if (has_dir_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir_logic_name().data(), this->dir_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dir_logic_name(), output);
  }

  // required int32 children_num = 2;
  if (has_children_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->children_num(), output);
  }

  // optional int32 offset = 3 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileChildren::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dir_logic_name = 1;
  if (has_dir_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir_logic_name().data(), this->dir_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dir_logic_name(), target);
  }

  // required int32 children_num = 2;
  if (has_children_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->children_num(), target);
  }

  // optional int32 offset = 3 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileChildren::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dir_logic_name = 1;
    if (has_dir_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir_logic_name());
    }

    // required int32 children_num = 2;
    if (has_children_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->children_num());
    }

    // optional int32 offset = 3 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileChildren::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileChildren* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileChildren*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileChildren::MergeFrom(const GetFileChildren& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir_logic_name()) {
      set_dir_logic_name(from.dir_logic_name());
    }
    if (from.has_children_num()) {
      set_children_num(from.children_num());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileChildren::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileChildren::CopyFrom(const GetFileChildren& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileChildren::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetFileChildren::Swap(GetFileChildren* other) {
  if (other != this) {
    std::swap(dir_logic_name_, other->dir_logic_name_);
    std::swap(children_num_, other->children_num_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileChildren::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileChildren_descriptor_;
  metadata.reflection = GetFileChildren_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FileChildren::_default_answer_ = NULL;
#ifndef _MSC_VER
const int FileChildren::kAnswerFieldNumber;
const int FileChildren::kChildLogicNameFieldNumber;
#endif  // !_MSC_VER

FileChildren::FileChildren()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileChildren::InitAsDefaultInstance() {
}

FileChildren::FileChildren(const FileChildren& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileChildren::SharedCtor() {
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(_default_answer_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileChildren::~FileChildren() {
  SharedDtor();
}

void FileChildren::SharedDtor() {
  if (answer_ != _default_answer_) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void FileChildren::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileChildren::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileChildren_descriptor_;
}

const FileChildren& FileChildren::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

FileChildren* FileChildren::default_instance_ = NULL;

FileChildren* FileChildren::New() const {
  return new FileChildren;
}

void FileChildren::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer()) {
      if (answer_ != _default_answer_) {
        answer_->assign(*_default_answer_);
      }
    }
  }
  child_logic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileChildren::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string answer = 1 [default = "ok"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_child_logic_name;
        break;
      }

      // repeated string child_logic_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child_logic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_child_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->child_logic_name(this->child_logic_name_size() - 1).data(),
            this->child_logic_name(this->child_logic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_child_logic_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileChildren::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer(), output);
  }

  // repeated string child_logic_name = 2;
  for (int i = 0; i < this->child_logic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->child_logic_name(i).data(), this->child_logic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->child_logic_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileChildren::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // repeated string child_logic_name = 2;
  for (int i = 0; i < this->child_logic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->child_logic_name(i).data(), this->child_logic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->child_logic_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileChildren::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string answer = 1 [default = "ok"];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

  }
  // repeated string child_logic_name = 2;
  total_size += 1 * this->child_logic_name_size();
  for (int i = 0; i < this->child_logic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->child_logic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileChildren::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileChildren* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileChildren*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileChildren::MergeFrom(const FileChildren& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_logic_name_.MergeFrom(from.child_logic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileChildren::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileChildren::CopyFrom(const FileChildren& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChildren::IsInitialized() const {

  return true;
}

void FileChildren::Swap(FileChildren* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    child_logic_name_.Swap(&other->child_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileChildren::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileChildren_descriptor_;
  metadata.reflection = FileChildren_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateDir::kDirLogicNameFieldNumber;
const int CreateDir::kModeFieldNumber;
#endif  // !_MSC_VER

CreateDir::CreateDir()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateDir::InitAsDefaultInstance() {
}

CreateDir::CreateDir(const CreateDir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateDir::SharedCtor() {
  _cached_size_ = 0;
  dir_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateDir::~CreateDir() {
  SharedDtor();
}

void CreateDir::SharedDtor() {
  if (dir_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dir_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void CreateDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateDir_descriptor_;
}

const CreateDir& CreateDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

CreateDir* CreateDir::default_instance_ = NULL;

CreateDir* CreateDir::New() const {
  return new CreateDir;
}

void CreateDir::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dir_logic_name()) {
      if (dir_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        dir_logic_name_->clear();
      }
    }
    mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dir_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dir_logic_name().data(), this->dir_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // required uint32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dir_logic_name = 1;
  if (has_dir_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir_logic_name().data(), this->dir_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dir_logic_name(), output);
  }

  // required uint32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateDir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dir_logic_name = 1;
  if (has_dir_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir_logic_name().data(), this->dir_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dir_logic_name(), target);
  }

  // required uint32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateDir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dir_logic_name = 1;
    if (has_dir_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir_logic_name());
    }

    // required uint32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateDir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateDir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateDir::MergeFrom(const CreateDir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir_logic_name()) {
      set_dir_logic_name(from.dir_logic_name());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateDir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDir::CopyFrom(const CreateDir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDir::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateDir::Swap(CreateDir* other) {
  if (other != this) {
    std::swap(dir_logic_name_, other->dir_logic_name_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateDir_descriptor_;
  metadata.reflection = CreateDir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFile::kFileLogicNameFieldNumber;
#endif  // !_MSC_VER

DeleteFile::DeleteFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFile::InitAsDefaultInstance() {
}

DeleteFile::DeleteFile(const DeleteFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFile::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFile::~DeleteFile() {
  SharedDtor();
}

void DeleteFile::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void DeleteFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFile_descriptor_;
}

const DeleteFile& DeleteFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

DeleteFile* DeleteFile::default_instance_ = NULL;

DeleteFile* DeleteFile::New() const {
  return new DeleteFile;
}

void DeleteFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFile::MergeFrom(const DeleteFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFile::CopyFrom(const DeleteFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteFile::Swap(DeleteFile* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFile_descriptor_;
  metadata.reflection = DeleteFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateLink::kFromFileLogicNameFieldNumber;
const int CreateLink::kToFileLogicNameFieldNumber;
#endif  // !_MSC_VER

CreateLink::CreateLink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateLink::InitAsDefaultInstance() {
}

CreateLink::CreateLink(const CreateLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateLink::SharedCtor() {
  _cached_size_ = 0;
  from_file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateLink::~CreateLink() {
  SharedDtor();
}

void CreateLink::SharedDtor() {
  if (from_file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_file_logic_name_;
  }
  if (to_file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void CreateLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateLink_descriptor_;
}

const CreateLink& CreateLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

CreateLink* CreateLink::default_instance_ = NULL;

CreateLink* CreateLink::New() const {
  return new CreateLink;
}

void CreateLink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from_file_logic_name()) {
      if (from_file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        from_file_logic_name_->clear();
      }
    }
    if (has_to_file_logic_name()) {
      if (to_file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        to_file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from_file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_file_logic_name().data(), this->from_file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to_file_logic_name;
        break;
      }

      // required string to_file_logic_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_file_logic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_file_logic_name().data(), this->to_file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from_file_logic_name = 1;
  if (has_from_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_file_logic_name().data(), this->from_file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from_file_logic_name(), output);
  }

  // required string to_file_logic_name = 2;
  if (has_to_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_file_logic_name().data(), this->to_file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to_file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from_file_logic_name = 1;
  if (has_from_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_file_logic_name().data(), this->from_file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_file_logic_name(), target);
  }

  // required string to_file_logic_name = 2;
  if (has_to_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_file_logic_name().data(), this->to_file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from_file_logic_name = 1;
    if (has_from_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_file_logic_name());
    }

    // required string to_file_logic_name = 2;
    if (has_to_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateLink::MergeFrom(const CreateLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_file_logic_name()) {
      set_from_file_logic_name(from.from_file_logic_name());
    }
    if (from.has_to_file_logic_name()) {
      set_to_file_logic_name(from.to_file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateLink::CopyFrom(const CreateLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateLink::Swap(CreateLink* other) {
  if (other != this) {
    std::swap(from_file_logic_name_, other->from_file_logic_name_);
    std::swap(to_file_logic_name_, other->to_file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateLink_descriptor_;
  metadata.reflection = CreateLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLink::kFileLogicNameFieldNumber;
#endif  // !_MSC_VER

GetLink::GetLink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLink::InitAsDefaultInstance() {
}

GetLink::GetLink(const GetLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLink::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLink::~GetLink() {
  SharedDtor();
}

void GetLink::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void GetLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLink_descriptor_;
}

const GetLink& GetLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

GetLink* GetLink::default_instance_ = NULL;

GetLink* GetLink::New() const {
  return new GetLink;
}

void GetLink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLink::MergeFrom(const GetLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLink::CopyFrom(const GetLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetLink::Swap(GetLink* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLink_descriptor_;
  metadata.reflection = GetLink_reflection_;
  return metadata;
}


// ===================================================================

::std::string* LinkInfo::_default_answer_ = NULL;
#ifndef _MSC_VER
const int LinkInfo::kAnswerFieldNumber;
const int LinkInfo::kFileLogicNameFieldNumber;
#endif  // !_MSC_VER

LinkInfo::LinkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinkInfo::InitAsDefaultInstance() {
}

LinkInfo::LinkInfo(const LinkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinkInfo::SharedCtor() {
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(_default_answer_);
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkInfo::~LinkInfo() {
  SharedDtor();
}

void LinkInfo::SharedDtor() {
  if (answer_ != _default_answer_) {
    delete answer_;
  }
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void LinkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkInfo_descriptor_;
}

const LinkInfo& LinkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

LinkInfo* LinkInfo::default_instance_ = NULL;

LinkInfo* LinkInfo::New() const {
  return new LinkInfo;
}

void LinkInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer()) {
      if (answer_ != _default_answer_) {
        answer_->assign(*_default_answer_);
      }
    }
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string answer = 1 [default = "ok"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_logic_name;
        break;
      }

      // required string file_logic_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_logic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer(), output);
  }

  // required string file_logic_name = 2;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // required string file_logic_name = 2;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string answer = 1 [default = "ok"];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // required string file_logic_name = 2;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkInfo::MergeFrom(const LinkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkInfo::CopyFrom(const LinkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LinkInfo::Swap(LinkInfo* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkInfo_descriptor_;
  metadata.reflection = LinkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameFile::kFromFileLogicNameFieldNumber;
const int RenameFile::kToFileLogicNameFieldNumber;
#endif  // !_MSC_VER

RenameFile::RenameFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameFile::InitAsDefaultInstance() {
}

RenameFile::RenameFile(const RenameFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameFile::SharedCtor() {
  _cached_size_ = 0;
  from_file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameFile::~RenameFile() {
  SharedDtor();
}

void RenameFile::SharedDtor() {
  if (from_file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_file_logic_name_;
  }
  if (to_file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void RenameFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameFile_descriptor_;
}

const RenameFile& RenameFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

RenameFile* RenameFile::default_instance_ = NULL;

RenameFile* RenameFile::New() const {
  return new RenameFile;
}

void RenameFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from_file_logic_name()) {
      if (from_file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        from_file_logic_name_->clear();
      }
    }
    if (has_to_file_logic_name()) {
      if (to_file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        to_file_logic_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from_file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_file_logic_name().data(), this->from_file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to_file_logic_name;
        break;
      }

      // required string to_file_logic_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_file_logic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_file_logic_name().data(), this->to_file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from_file_logic_name = 1;
  if (has_from_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_file_logic_name().data(), this->from_file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from_file_logic_name(), output);
  }

  // required string to_file_logic_name = 2;
  if (has_to_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_file_logic_name().data(), this->to_file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to_file_logic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from_file_logic_name = 1;
  if (has_from_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_file_logic_name().data(), this->from_file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_file_logic_name(), target);
  }

  // required string to_file_logic_name = 2;
  if (has_to_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_file_logic_name().data(), this->to_file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_file_logic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from_file_logic_name = 1;
    if (has_from_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_file_logic_name());
    }

    // required string to_file_logic_name = 2;
    if (has_to_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_file_logic_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameFile::MergeFrom(const RenameFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_file_logic_name()) {
      set_from_file_logic_name(from.from_file_logic_name());
    }
    if (from.has_to_file_logic_name()) {
      set_to_file_logic_name(from.to_file_logic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameFile::CopyFrom(const RenameFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RenameFile::Swap(RenameFile* other) {
  if (other != this) {
    std::swap(from_file_logic_name_, other->from_file_logic_name_);
    std::swap(to_file_logic_name_, other->to_file_logic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameFile_descriptor_;
  metadata.reflection = RenameFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeFileOwner::kFileLogicNameFieldNumber;
const int ChangeFileOwner::kUidFieldNumber;
const int ChangeFileOwner::kUnameFieldNumber;
#endif  // !_MSC_VER

ChangeFileOwner::ChangeFileOwner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeFileOwner::InitAsDefaultInstance() {
}

ChangeFileOwner::ChangeFileOwner(const ChangeFileOwner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeFileOwner::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFileOwner::~ChangeFileOwner() {
  SharedDtor();
}

void ChangeFileOwner::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void ChangeFileOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFileOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFileOwner_descriptor_;
}

const ChangeFileOwner& ChangeFileOwner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

ChangeFileOwner* ChangeFileOwner::default_instance_ = NULL;

ChangeFileOwner* ChangeFileOwner::New() const {
  return new ChangeFileOwner;
}

void ChangeFileOwner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
    uid_ = 0;
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::kEmptyString) {
        uname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFileOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uname;
        break;
      }

      // optional string uname = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeFileOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional string uname = 4 [default = ""];
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeFileOwner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // optional string uname = 4 [default = ""];
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeFileOwner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

    // required int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string uname = 4 [default = ""];
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFileOwner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFileOwner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFileOwner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFileOwner::MergeFrom(const ChangeFileOwner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFileOwner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFileOwner::CopyFrom(const ChangeFileOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFileOwner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeFileOwner::Swap(ChangeFileOwner* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFileOwner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFileOwner_descriptor_;
  metadata.reflection = ChangeFileOwner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeFileGroup::kFileLogicNameFieldNumber;
const int ChangeFileGroup::kGidFieldNumber;
const int ChangeFileGroup::kGnameFieldNumber;
#endif  // !_MSC_VER

ChangeFileGroup::ChangeFileGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeFileGroup::InitAsDefaultInstance() {
}

ChangeFileGroup::ChangeFileGroup(const ChangeFileGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeFileGroup::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = 0;
  gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFileGroup::~ChangeFileGroup() {
  SharedDtor();
}

void ChangeFileGroup::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (gname_ != &::google::protobuf::internal::kEmptyString) {
    delete gname_;
  }
  if (this != default_instance_) {
  }
}

void ChangeFileGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFileGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFileGroup_descriptor_;
}

const ChangeFileGroup& ChangeFileGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

ChangeFileGroup* ChangeFileGroup::default_instance_ = NULL;

ChangeFileGroup* ChangeFileGroup::New() const {
  return new ChangeFileGroup;
}

void ChangeFileGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
    gid_ = 0;
    if (has_gname()) {
      if (gname_ != &::google::protobuf::internal::kEmptyString) {
        gname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFileGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gname;
        break;
      }

      // optional string gname = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gname().data(), this->gname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeFileGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // optional string gname = 5 [default = ""];
  if (has_gname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gname().data(), this->gname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeFileGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // optional string gname = 5 [default = ""];
  if (has_gname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gname().data(), this->gname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeFileGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

    // required int32 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional string gname = 5 [default = ""];
    if (has_gname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFileGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFileGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFileGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFileGroup::MergeFrom(const ChangeFileGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_gname()) {
      set_gname(from.gname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFileGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFileGroup::CopyFrom(const ChangeFileGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFileGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeFileGroup::Swap(ChangeFileGroup* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(gid_, other->gid_);
    std::swap(gname_, other->gname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFileGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFileGroup_descriptor_;
  metadata.reflection = ChangeFileGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeFilePerms::kFileLogicNameFieldNumber;
const int ChangeFilePerms::kPermsFieldNumber;
#endif  // !_MSC_VER

ChangeFilePerms::ChangeFilePerms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeFilePerms::InitAsDefaultInstance() {
}

ChangeFilePerms::ChangeFilePerms(const ChangeFilePerms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeFilePerms::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  perms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFilePerms::~ChangeFilePerms() {
  SharedDtor();
}

void ChangeFilePerms::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void ChangeFilePerms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFilePerms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFilePerms_descriptor_;
}

const ChangeFilePerms& ChangeFilePerms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

ChangeFilePerms* ChangeFilePerms::default_instance_ = NULL;

ChangeFilePerms* ChangeFilePerms::New() const {
  return new ChangeFilePerms;
}

void ChangeFilePerms::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
    perms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFilePerms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_perms;
        break;
      }

      // required int32 perms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perms_)));
          set_has_perms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeFilePerms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  // required int32 perms = 2;
  if (has_perms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->perms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeFilePerms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  // required int32 perms = 2;
  if (has_perms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->perms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeFilePerms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

    // required int32 perms = 2;
    if (has_perms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFilePerms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFilePerms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFilePerms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFilePerms::MergeFrom(const ChangeFilePerms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
    if (from.has_perms()) {
      set_perms(from.perms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFilePerms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFilePerms::CopyFrom(const ChangeFilePerms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFilePerms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeFilePerms::Swap(ChangeFilePerms* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(perms_, other->perms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFilePerms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFilePerms_descriptor_;
  metadata.reflection = ChangeFilePerms_reflection_;
  return metadata;
}


// ===================================================================

::std::string* CheckFilePerms::_default_type_ = NULL;
#ifndef _MSC_VER
const int CheckFilePerms::kFileLogicNameFieldNumber;
const int CheckFilePerms::kTypeFieldNumber;
#endif  // !_MSC_VER

CheckFilePerms::CheckFilePerms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckFilePerms::InitAsDefaultInstance() {
}

CheckFilePerms::CheckFilePerms(const CheckFilePerms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckFilePerms::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(_default_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckFilePerms::~CheckFilePerms() {
  SharedDtor();
}

void CheckFilePerms::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (type_ != _default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void CheckFilePerms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckFilePerms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckFilePerms_descriptor_;
}

const CheckFilePerms& CheckFilePerms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

CheckFilePerms* CheckFilePerms::default_instance_ = NULL;

CheckFilePerms* CheckFilePerms::New() const {
  return new CheckFilePerms;
}

void CheckFilePerms::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != _default_type_) {
        type_->assign(*_default_type_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckFilePerms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = "root"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckFilePerms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  // required string type = 2 [default = "root"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckFilePerms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  // required string type = 2 [default = "root"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckFilePerms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

    // required string type = 2 [default = "root"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckFilePerms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckFilePerms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckFilePerms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckFilePerms::MergeFrom(const CheckFilePerms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckFilePerms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckFilePerms::CopyFrom(const CheckFilePerms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckFilePerms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckFilePerms::Swap(CheckFilePerms* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckFilePerms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckFilePerms_descriptor_;
  metadata.reflection = CheckFilePerms_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTimes::kFileLogicNameFieldNumber;
const int UpdateTimes::kAtimeFieldNumber;
const int UpdateTimes::kMtimeFieldNumber;
const int UpdateTimes::kCtimeFieldNumber;
#endif  // !_MSC_VER

UpdateTimes::UpdateTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateTimes::InitAsDefaultInstance() {
}

UpdateTimes::UpdateTimes(const UpdateTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateTimes::SharedCtor() {
  _cached_size_ = 0;
  file_logic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atime_ = GOOGLE_LONGLONG(-1);
  mtime_ = GOOGLE_LONGLONG(-1);
  ctime_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTimes::~UpdateTimes() {
  SharedDtor();
}

void UpdateTimes::SharedDtor() {
  if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_logic_name_;
  }
  if (this != default_instance_) {
  }
}

void UpdateTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTimes_descriptor_;
}

const UpdateTimes& UpdateTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

UpdateTimes* UpdateTimes::default_instance_ = NULL;

UpdateTimes* UpdateTimes::New() const {
  return new UpdateTimes;
}

void UpdateTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_logic_name()) {
      if (file_logic_name_ != &::google::protobuf::internal::kEmptyString) {
        file_logic_name_->clear();
      }
    }
    atime_ = GOOGLE_LONGLONG(-1);
    mtime_ = GOOGLE_LONGLONG(-1);
    ctime_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_logic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_logic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_logic_name().data(), this->file_logic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atime;
        break;
      }

      // optional int64 atime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atime_)));
          set_has_atime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mtime;
        break;
      }

      // optional int64 mtime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ctime;
        break;
      }

      // optional int64 ctime = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_logic_name(), output);
  }

  // optional int64 atime = 2 [default = -1];
  if (has_atime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->atime(), output);
  }

  // optional int64 mtime = 3 [default = -1];
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mtime(), output);
  }

  // optional int64 ctime = 4 [default = -1];
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ctime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_logic_name = 1;
  if (has_file_logic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_logic_name().data(), this->file_logic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_logic_name(), target);
  }

  // optional int64 atime = 2 [default = -1];
  if (has_atime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->atime(), target);
  }

  // optional int64 mtime = 3 [default = -1];
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mtime(), target);
  }

  // optional int64 ctime = 4 [default = -1];
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ctime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_logic_name = 1;
    if (has_file_logic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_logic_name());
    }

    // optional int64 atime = 2 [default = -1];
    if (has_atime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->atime());
    }

    // optional int64 mtime = 3 [default = -1];
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

    // optional int64 ctime = 4 [default = -1];
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTimes::MergeFrom(const UpdateTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_logic_name()) {
      set_file_logic_name(from.file_logic_name());
    }
    if (from.has_atime()) {
      set_atime(from.atime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTimes::CopyFrom(const UpdateTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTimes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateTimes::Swap(UpdateTimes* other) {
  if (other != this) {
    std::swap(file_logic_name_, other->file_logic_name_);
    std::swap(atime_, other->atime_);
    std::swap(mtime_, other->mtime_);
    std::swap(ctime_, other->ctime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTimes_descriptor_;
  metadata.reflection = UpdateTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestChannel::kAnswerMessageFieldNumber;
const int TestChannel::kAnswerDelayInMsFieldNumber;
#endif  // !_MSC_VER

TestChannel::TestChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestChannel::InitAsDefaultInstance() {
}

TestChannel::TestChannel(const TestChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestChannel::SharedCtor() {
  _cached_size_ = 0;
  answer_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  answer_delay_in_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestChannel::~TestChannel() {
  SharedDtor();
}

void TestChannel::SharedDtor() {
  if (answer_message_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_message_;
  }
  if (this != default_instance_) {
  }
}

void TestChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestChannel_descriptor_;
}

const TestChannel& TestChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

TestChannel* TestChannel::default_instance_ = NULL;

TestChannel* TestChannel::New() const {
  return new TestChannel;
}

void TestChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer_message()) {
      if (answer_message_ != &::google::protobuf::internal::kEmptyString) {
        answer_message_->clear();
      }
    }
    answer_delay_in_ms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string answer_message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer_message().data(), this->answer_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answer_delay_in_ms;
        break;
      }

      // required int32 answer_delay_in_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answer_delay_in_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_delay_in_ms_)));
          set_has_answer_delay_in_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string answer_message = 1;
  if (has_answer_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_message().data(), this->answer_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer_message(), output);
  }

  // required int32 answer_delay_in_ms = 2;
  if (has_answer_delay_in_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->answer_delay_in_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string answer_message = 1;
  if (has_answer_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_message().data(), this->answer_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer_message(), target);
  }

  // required int32 answer_delay_in_ms = 2;
  if (has_answer_delay_in_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->answer_delay_in_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string answer_message = 1;
    if (has_answer_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer_message());
    }

    // required int32 answer_delay_in_ms = 2;
    if (has_answer_delay_in_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer_delay_in_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestChannel::MergeFrom(const TestChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer_message()) {
      set_answer_message(from.answer_message());
    }
    if (from.has_answer_delay_in_ms()) {
      set_answer_delay_in_ms(from.answer_delay_in_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestChannel::CopyFrom(const TestChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestChannel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TestChannel::Swap(TestChannel* other) {
  if (other != this) {
    std::swap(answer_message_, other->answer_message_);
    std::swap(answer_delay_in_ms_, other->answer_delay_in_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestChannel_descriptor_;
  metadata.reflection = TestChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestChannelAnswer::kMessageFieldNumber;
#endif  // !_MSC_VER

TestChannelAnswer::TestChannelAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestChannelAnswer::InitAsDefaultInstance() {
}

TestChannelAnswer::TestChannelAnswer(const TestChannelAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestChannelAnswer::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestChannelAnswer::~TestChannelAnswer() {
  SharedDtor();
}

void TestChannelAnswer::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void TestChannelAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestChannelAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestChannelAnswer_descriptor_;
}

const TestChannelAnswer& TestChannelAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

TestChannelAnswer* TestChannelAnswer::default_instance_ = NULL;

TestChannelAnswer* TestChannelAnswer::New() const {
  return new TestChannelAnswer;
}

void TestChannelAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestChannelAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestChannelAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestChannelAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestChannelAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestChannelAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestChannelAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestChannelAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestChannelAnswer::MergeFrom(const TestChannelAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestChannelAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestChannelAnswer::CopyFrom(const TestChannelAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestChannelAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestChannelAnswer::Swap(TestChannelAnswer* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestChannelAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestChannelAnswer_descriptor_;
  metadata.reflection = TestChannelAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandshakeRequest_EnvVariable::kNameFieldNumber;
const int HandshakeRequest_EnvVariable::kValueFieldNumber;
#endif  // !_MSC_VER

HandshakeRequest_EnvVariable::HandshakeRequest_EnvVariable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeRequest_EnvVariable::InitAsDefaultInstance() {
}

HandshakeRequest_EnvVariable::HandshakeRequest_EnvVariable(const HandshakeRequest_EnvVariable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeRequest_EnvVariable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeRequest_EnvVariable::~HandshakeRequest_EnvVariable() {
  SharedDtor();
}

void HandshakeRequest_EnvVariable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void HandshakeRequest_EnvVariable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeRequest_EnvVariable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeRequest_EnvVariable_descriptor_;
}

const HandshakeRequest_EnvVariable& HandshakeRequest_EnvVariable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

HandshakeRequest_EnvVariable* HandshakeRequest_EnvVariable::default_instance_ = NULL;

HandshakeRequest_EnvVariable* HandshakeRequest_EnvVariable::New() const {
  return new HandshakeRequest_EnvVariable;
}

void HandshakeRequest_EnvVariable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeRequest_EnvVariable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeRequest_EnvVariable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeRequest_EnvVariable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeRequest_EnvVariable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeRequest_EnvVariable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeRequest_EnvVariable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeRequest_EnvVariable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeRequest_EnvVariable::MergeFrom(const HandshakeRequest_EnvVariable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeRequest_EnvVariable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeRequest_EnvVariable::CopyFrom(const HandshakeRequest_EnvVariable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeRequest_EnvVariable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HandshakeRequest_EnvVariable::Swap(HandshakeRequest_EnvVariable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeRequest_EnvVariable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeRequest_EnvVariable_descriptor_;
  metadata.reflection = HandshakeRequest_EnvVariable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HandshakeRequest_CertConfirmation::kLoginFieldNumber;
const int HandshakeRequest_CertConfirmation::kResultFieldNumber;
#endif  // !_MSC_VER

HandshakeRequest_CertConfirmation::HandshakeRequest_CertConfirmation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeRequest_CertConfirmation::InitAsDefaultInstance() {
}

HandshakeRequest_CertConfirmation::HandshakeRequest_CertConfirmation(const HandshakeRequest_CertConfirmation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeRequest_CertConfirmation::SharedCtor() {
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeRequest_CertConfirmation::~HandshakeRequest_CertConfirmation() {
  SharedDtor();
}

void HandshakeRequest_CertConfirmation::SharedDtor() {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    delete login_;
  }
  if (this != default_instance_) {
  }
}

void HandshakeRequest_CertConfirmation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeRequest_CertConfirmation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeRequest_CertConfirmation_descriptor_;
}

const HandshakeRequest_CertConfirmation& HandshakeRequest_CertConfirmation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

HandshakeRequest_CertConfirmation* HandshakeRequest_CertConfirmation::default_instance_ = NULL;

HandshakeRequest_CertConfirmation* HandshakeRequest_CertConfirmation::New() const {
  return new HandshakeRequest_CertConfirmation;
}

void HandshakeRequest_CertConfirmation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::kEmptyString) {
        login_->clear();
      }
    }
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeRequest_CertConfirmation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string login = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeRequest_CertConfirmation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->login(), output);
  }

  // required bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeRequest_CertConfirmation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // required bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeRequest_CertConfirmation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeRequest_CertConfirmation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeRequest_CertConfirmation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeRequest_CertConfirmation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeRequest_CertConfirmation::MergeFrom(const HandshakeRequest_CertConfirmation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeRequest_CertConfirmation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeRequest_CertConfirmation::CopyFrom(const HandshakeRequest_CertConfirmation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeRequest_CertConfirmation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HandshakeRequest_CertConfirmation::Swap(HandshakeRequest_CertConfirmation* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeRequest_CertConfirmation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeRequest_CertConfirmation_descriptor_;
  metadata.reflection = HandshakeRequest_CertConfirmation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HandshakeRequest::kHostnameFieldNumber;
const int HandshakeRequest::kVariableFieldNumber;
const int HandshakeRequest::kCertConfirmationFieldNumber;
#endif  // !_MSC_VER

HandshakeRequest::HandshakeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeRequest::InitAsDefaultInstance() {
  cert_confirmation_ = const_cast< ::veil::protocol::fuse_messages::HandshakeRequest_CertConfirmation*>(&::veil::protocol::fuse_messages::HandshakeRequest_CertConfirmation::default_instance());
}

HandshakeRequest::HandshakeRequest(const HandshakeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeRequest::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cert_confirmation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeRequest::~HandshakeRequest() {
  SharedDtor();
}

void HandshakeRequest::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete cert_confirmation_;
  }
}

void HandshakeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeRequest_descriptor_;
}

const HandshakeRequest& HandshakeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

HandshakeRequest* HandshakeRequest::default_instance_ = NULL;

HandshakeRequest* HandshakeRequest::New() const {
  return new HandshakeRequest;
}

void HandshakeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_cert_confirmation()) {
      if (cert_confirmation_ != NULL) cert_confirmation_->::veil::protocol::fuse_messages::HandshakeRequest_CertConfirmation::Clear();
    }
  }
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        break;
      }

      // repeated .veil.protocol.fuse_messages.HandshakeRequest.EnvVariable variable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        if (input->ExpectTag(26)) goto parse_cert_confirmation;
        break;
      }

      // optional .veil.protocol.fuse_messages.HandshakeRequest.CertConfirmation cert_confirmation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert_confirmation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert_confirmation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // repeated .veil.protocol.fuse_messages.HandshakeRequest.EnvVariable variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->variable(i), output);
  }

  // optional .veil.protocol.fuse_messages.HandshakeRequest.CertConfirmation cert_confirmation = 3;
  if (has_cert_confirmation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cert_confirmation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // repeated .veil.protocol.fuse_messages.HandshakeRequest.EnvVariable variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->variable(i), target);
  }

  // optional .veil.protocol.fuse_messages.HandshakeRequest.CertConfirmation cert_confirmation = 3;
  if (has_cert_confirmation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cert_confirmation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional .veil.protocol.fuse_messages.HandshakeRequest.CertConfirmation cert_confirmation = 3;
    if (has_cert_confirmation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cert_confirmation());
    }

  }
  // repeated .veil.protocol.fuse_messages.HandshakeRequest.EnvVariable variable = 2;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeRequest::MergeFrom(const HandshakeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_cert_confirmation()) {
      mutable_cert_confirmation()->::veil::protocol::fuse_messages::HandshakeRequest_CertConfirmation::MergeFrom(from.cert_confirmation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeRequest::CopyFrom(const HandshakeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < variable_size(); i++) {
    if (!this->variable(i).IsInitialized()) return false;
  }
  if (has_cert_confirmation()) {
    if (!this->cert_confirmation().IsInitialized()) return false;
  }
  return true;
}

void HandshakeRequest::Swap(HandshakeRequest* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    variable_.Swap(&other->variable_);
    std::swap(cert_confirmation_, other->cert_confirmation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeRequest_descriptor_;
  metadata.reflection = HandshakeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandshakeResponse::kFuseIdFieldNumber;
#endif  // !_MSC_VER

HandshakeResponse::HandshakeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeResponse::InitAsDefaultInstance() {
}

HandshakeResponse::HandshakeResponse(const HandshakeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeResponse::SharedCtor() {
  _cached_size_ = 0;
  fuse_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeResponse::~HandshakeResponse() {
  SharedDtor();
}

void HandshakeResponse::SharedDtor() {
  if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fuse_id_;
  }
  if (this != default_instance_) {
  }
}

void HandshakeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeResponse_descriptor_;
}

const HandshakeResponse& HandshakeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

HandshakeResponse* HandshakeResponse::default_instance_ = NULL;

HandshakeResponse* HandshakeResponse::New() const {
  return new HandshakeResponse;
}

void HandshakeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fuse_id()) {
      if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
        fuse_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fuse_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fuse_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fuse_id().data(), this->fuse_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fuse_id = 1;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fuse_id().data(), this->fuse_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fuse_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fuse_id = 1;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fuse_id().data(), this->fuse_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fuse_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fuse_id = 1;
    if (has_fuse_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fuse_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeResponse::MergeFrom(const HandshakeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuse_id()) {
      set_fuse_id(from.fuse_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeResponse::CopyFrom(const HandshakeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HandshakeResponse::Swap(HandshakeResponse* other) {
  if (other != this) {
    std::swap(fuse_id_, other->fuse_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeResponse_descriptor_;
  metadata.reflection = HandshakeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandshakeAck::kFuseIdFieldNumber;
#endif  // !_MSC_VER

HandshakeAck::HandshakeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeAck::InitAsDefaultInstance() {
}

HandshakeAck::HandshakeAck(const HandshakeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeAck::SharedCtor() {
  _cached_size_ = 0;
  fuse_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeAck::~HandshakeAck() {
  SharedDtor();
}

void HandshakeAck::SharedDtor() {
  if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fuse_id_;
  }
  if (this != default_instance_) {
  }
}

void HandshakeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeAck_descriptor_;
}

const HandshakeAck& HandshakeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

HandshakeAck* HandshakeAck::default_instance_ = NULL;

HandshakeAck* HandshakeAck::New() const {
  return new HandshakeAck;
}

void HandshakeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fuse_id()) {
      if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
        fuse_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fuse_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fuse_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fuse_id().data(), this->fuse_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fuse_id = 1;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fuse_id().data(), this->fuse_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fuse_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fuse_id = 1;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fuse_id().data(), this->fuse_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fuse_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fuse_id = 1;
    if (has_fuse_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fuse_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeAck::MergeFrom(const HandshakeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuse_id()) {
      set_fuse_id(from.fuse_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeAck::CopyFrom(const HandshakeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HandshakeAck::Swap(HandshakeAck* other) {
  if (other != this) {
    std::swap(fuse_id_, other->fuse_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeAck_descriptor_;
  metadata.reflection = HandshakeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateStorageTestFileRequest::kStorageIdFieldNumber;
#endif  // !_MSC_VER

CreateStorageTestFileRequest::CreateStorageTestFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateStorageTestFileRequest::InitAsDefaultInstance() {
}

CreateStorageTestFileRequest::CreateStorageTestFileRequest(const CreateStorageTestFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateStorageTestFileRequest::SharedCtor() {
  _cached_size_ = 0;
  storage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStorageTestFileRequest::~CreateStorageTestFileRequest() {
  SharedDtor();
}

void CreateStorageTestFileRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateStorageTestFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStorageTestFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStorageTestFileRequest_descriptor_;
}

const CreateStorageTestFileRequest& CreateStorageTestFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

CreateStorageTestFileRequest* CreateStorageTestFileRequest::default_instance_ = NULL;

CreateStorageTestFileRequest* CreateStorageTestFileRequest::New() const {
  return new CreateStorageTestFileRequest;
}

void CreateStorageTestFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storage_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateStorageTestFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 storage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storage_id_)));
          set_has_storage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateStorageTestFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 storage_id = 1;
  if (has_storage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateStorageTestFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 storage_id = 1;
  if (has_storage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->storage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateStorageTestFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 storage_id = 1;
    if (has_storage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStorageTestFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateStorageTestFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateStorageTestFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateStorageTestFileRequest::MergeFrom(const CreateStorageTestFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_id()) {
      set_storage_id(from.storage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateStorageTestFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStorageTestFileRequest::CopyFrom(const CreateStorageTestFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStorageTestFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateStorageTestFileRequest::Swap(CreateStorageTestFileRequest* other) {
  if (other != this) {
    std::swap(storage_id_, other->storage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateStorageTestFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStorageTestFileRequest_descriptor_;
  metadata.reflection = CreateStorageTestFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateStorageTestFileResponse::kAnswerFieldNumber;
const int CreateStorageTestFileResponse::kRelativePathFieldNumber;
const int CreateStorageTestFileResponse::kTextFieldNumber;
#endif  // !_MSC_VER

CreateStorageTestFileResponse::CreateStorageTestFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateStorageTestFileResponse::InitAsDefaultInstance() {
}

CreateStorageTestFileResponse::CreateStorageTestFileResponse(const CreateStorageTestFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateStorageTestFileResponse::SharedCtor() {
  _cached_size_ = 0;
  answer_ = false;
  relative_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStorageTestFileResponse::~CreateStorageTestFileResponse() {
  SharedDtor();
}

void CreateStorageTestFileResponse::SharedDtor() {
  if (relative_path_ != &::google::protobuf::internal::kEmptyString) {
    delete relative_path_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CreateStorageTestFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStorageTestFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStorageTestFileResponse_descriptor_;
}

const CreateStorageTestFileResponse& CreateStorageTestFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

CreateStorageTestFileResponse* CreateStorageTestFileResponse::default_instance_ = NULL;

CreateStorageTestFileResponse* CreateStorageTestFileResponse::New() const {
  return new CreateStorageTestFileResponse;
}

void CreateStorageTestFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answer_ = false;
    if (has_relative_path()) {
      if (relative_path_ != &::google::protobuf::internal::kEmptyString) {
        relative_path_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateStorageTestFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool answer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relative_path;
        break;
      }

      // optional string relative_path = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relative_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relative_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relative_path().data(), this->relative_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateStorageTestFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool answer = 1;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->answer(), output);
  }

  // optional string relative_path = 2 [default = ""];
  if (has_relative_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relative_path().data(), this->relative_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->relative_path(), output);
  }

  // optional string text = 3 [default = ""];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateStorageTestFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool answer = 1;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->answer(), target);
  }

  // optional string relative_path = 2 [default = ""];
  if (has_relative_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relative_path().data(), this->relative_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->relative_path(), target);
  }

  // optional string text = 3 [default = ""];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateStorageTestFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool answer = 1;
    if (has_answer()) {
      total_size += 1 + 1;
    }

    // optional string relative_path = 2 [default = ""];
    if (has_relative_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relative_path());
    }

    // optional string text = 3 [default = ""];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStorageTestFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateStorageTestFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateStorageTestFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateStorageTestFileResponse::MergeFrom(const CreateStorageTestFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_relative_path()) {
      set_relative_path(from.relative_path());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateStorageTestFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStorageTestFileResponse::CopyFrom(const CreateStorageTestFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStorageTestFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateStorageTestFileResponse::Swap(CreateStorageTestFileResponse* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(relative_path_, other->relative_path_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateStorageTestFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStorageTestFileResponse_descriptor_;
  metadata.reflection = CreateStorageTestFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorageTestFileModifiedRequest::kStorageIdFieldNumber;
const int StorageTestFileModifiedRequest::kRelativePathFieldNumber;
const int StorageTestFileModifiedRequest::kTextFieldNumber;
#endif  // !_MSC_VER

StorageTestFileModifiedRequest::StorageTestFileModifiedRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageTestFileModifiedRequest::InitAsDefaultInstance() {
}

StorageTestFileModifiedRequest::StorageTestFileModifiedRequest(const StorageTestFileModifiedRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageTestFileModifiedRequest::SharedCtor() {
  _cached_size_ = 0;
  storage_id_ = 0;
  relative_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageTestFileModifiedRequest::~StorageTestFileModifiedRequest() {
  SharedDtor();
}

void StorageTestFileModifiedRequest::SharedDtor() {
  if (relative_path_ != &::google::protobuf::internal::kEmptyString) {
    delete relative_path_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void StorageTestFileModifiedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageTestFileModifiedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageTestFileModifiedRequest_descriptor_;
}

const StorageTestFileModifiedRequest& StorageTestFileModifiedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

StorageTestFileModifiedRequest* StorageTestFileModifiedRequest::default_instance_ = NULL;

StorageTestFileModifiedRequest* StorageTestFileModifiedRequest::New() const {
  return new StorageTestFileModifiedRequest;
}

void StorageTestFileModifiedRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storage_id_ = 0;
    if (has_relative_path()) {
      if (relative_path_ != &::google::protobuf::internal::kEmptyString) {
        relative_path_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageTestFileModifiedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 storage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storage_id_)));
          set_has_storage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relative_path;
        break;
      }

      // required string relative_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relative_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relative_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relative_path().data(), this->relative_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // required string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageTestFileModifiedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 storage_id = 1;
  if (has_storage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storage_id(), output);
  }

  // required string relative_path = 2;
  if (has_relative_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relative_path().data(), this->relative_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->relative_path(), output);
  }

  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageTestFileModifiedRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 storage_id = 1;
  if (has_storage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->storage_id(), target);
  }

  // required string relative_path = 2;
  if (has_relative_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relative_path().data(), this->relative_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->relative_path(), target);
  }

  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageTestFileModifiedRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 storage_id = 1;
    if (has_storage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storage_id());
    }

    // required string relative_path = 2;
    if (has_relative_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relative_path());
    }

    // required string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageTestFileModifiedRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageTestFileModifiedRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageTestFileModifiedRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageTestFileModifiedRequest::MergeFrom(const StorageTestFileModifiedRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_id()) {
      set_storage_id(from.storage_id());
    }
    if (from.has_relative_path()) {
      set_relative_path(from.relative_path());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageTestFileModifiedRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageTestFileModifiedRequest::CopyFrom(const StorageTestFileModifiedRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageTestFileModifiedRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StorageTestFileModifiedRequest::Swap(StorageTestFileModifiedRequest* other) {
  if (other != this) {
    std::swap(storage_id_, other->storage_id_);
    std::swap(relative_path_, other->relative_path_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageTestFileModifiedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageTestFileModifiedRequest_descriptor_;
  metadata.reflection = StorageTestFileModifiedRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorageTestFileModifiedResponse::kAnswerFieldNumber;
#endif  // !_MSC_VER

StorageTestFileModifiedResponse::StorageTestFileModifiedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageTestFileModifiedResponse::InitAsDefaultInstance() {
}

StorageTestFileModifiedResponse::StorageTestFileModifiedResponse(const StorageTestFileModifiedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageTestFileModifiedResponse::SharedCtor() {
  _cached_size_ = 0;
  answer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageTestFileModifiedResponse::~StorageTestFileModifiedResponse() {
  SharedDtor();
}

void StorageTestFileModifiedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StorageTestFileModifiedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageTestFileModifiedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageTestFileModifiedResponse_descriptor_;
}

const StorageTestFileModifiedResponse& StorageTestFileModifiedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

StorageTestFileModifiedResponse* StorageTestFileModifiedResponse::default_instance_ = NULL;

StorageTestFileModifiedResponse* StorageTestFileModifiedResponse::New() const {
  return new StorageTestFileModifiedResponse;
}

void StorageTestFileModifiedResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answer_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageTestFileModifiedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool answer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageTestFileModifiedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool answer = 1;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageTestFileModifiedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool answer = 1;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageTestFileModifiedResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool answer = 1;
    if (has_answer()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageTestFileModifiedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageTestFileModifiedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageTestFileModifiedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageTestFileModifiedResponse::MergeFrom(const StorageTestFileModifiedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageTestFileModifiedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageTestFileModifiedResponse::CopyFrom(const StorageTestFileModifiedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageTestFileModifiedResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StorageTestFileModifiedResponse::Swap(StorageTestFileModifiedResponse* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageTestFileModifiedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageTestFileModifiedResponse_descriptor_;
  metadata.reflection = StorageTestFileModifiedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientStorageInfo_StorageInfo::kStorageIdFieldNumber;
const int ClientStorageInfo_StorageInfo::kAbsolutePathFieldNumber;
#endif  // !_MSC_VER

ClientStorageInfo_StorageInfo::ClientStorageInfo_StorageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientStorageInfo_StorageInfo::InitAsDefaultInstance() {
}

ClientStorageInfo_StorageInfo::ClientStorageInfo_StorageInfo(const ClientStorageInfo_StorageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientStorageInfo_StorageInfo::SharedCtor() {
  _cached_size_ = 0;
  storage_id_ = 0;
  absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientStorageInfo_StorageInfo::~ClientStorageInfo_StorageInfo() {
  SharedDtor();
}

void ClientStorageInfo_StorageInfo::SharedDtor() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_path_;
  }
  if (this != default_instance_) {
  }
}

void ClientStorageInfo_StorageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStorageInfo_StorageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientStorageInfo_StorageInfo_descriptor_;
}

const ClientStorageInfo_StorageInfo& ClientStorageInfo_StorageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

ClientStorageInfo_StorageInfo* ClientStorageInfo_StorageInfo::default_instance_ = NULL;

ClientStorageInfo_StorageInfo* ClientStorageInfo_StorageInfo::New() const {
  return new ClientStorageInfo_StorageInfo;
}

void ClientStorageInfo_StorageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storage_id_ = 0;
    if (has_absolute_path()) {
      if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
        absolute_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientStorageInfo_StorageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 storage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storage_id_)));
          set_has_storage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_absolute_path;
        break;
      }

      // required string absolute_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_absolute_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_path().data(), this->absolute_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientStorageInfo_StorageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 storage_id = 1;
  if (has_storage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storage_id(), output);
  }

  // required string absolute_path = 2;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->absolute_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientStorageInfo_StorageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 storage_id = 1;
  if (has_storage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->storage_id(), target);
  }

  // required string absolute_path = 2;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->absolute_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientStorageInfo_StorageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 storage_id = 1;
    if (has_storage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storage_id());
    }

    // required string absolute_path = 2;
    if (has_absolute_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStorageInfo_StorageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientStorageInfo_StorageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientStorageInfo_StorageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientStorageInfo_StorageInfo::MergeFrom(const ClientStorageInfo_StorageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_id()) {
      set_storage_id(from.storage_id());
    }
    if (from.has_absolute_path()) {
      set_absolute_path(from.absolute_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientStorageInfo_StorageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStorageInfo_StorageInfo::CopyFrom(const ClientStorageInfo_StorageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStorageInfo_StorageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientStorageInfo_StorageInfo::Swap(ClientStorageInfo_StorageInfo* other) {
  if (other != this) {
    std::swap(storage_id_, other->storage_id_);
    std::swap(absolute_path_, other->absolute_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientStorageInfo_StorageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientStorageInfo_StorageInfo_descriptor_;
  metadata.reflection = ClientStorageInfo_StorageInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientStorageInfo::kStorageInfoFieldNumber;
#endif  // !_MSC_VER

ClientStorageInfo::ClientStorageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientStorageInfo::InitAsDefaultInstance() {
}

ClientStorageInfo::ClientStorageInfo(const ClientStorageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientStorageInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientStorageInfo::~ClientStorageInfo() {
  SharedDtor();
}

void ClientStorageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientStorageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStorageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientStorageInfo_descriptor_;
}

const ClientStorageInfo& ClientStorageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

ClientStorageInfo* ClientStorageInfo::default_instance_ = NULL;

ClientStorageInfo* ClientStorageInfo::New() const {
  return new ClientStorageInfo;
}

void ClientStorageInfo::Clear() {
  storage_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientStorageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .veil.protocol.fuse_messages.ClientStorageInfo.StorageInfo storage_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storage_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_storage_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientStorageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .veil.protocol.fuse_messages.ClientStorageInfo.StorageInfo storage_info = 1;
  for (int i = 0; i < this->storage_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->storage_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientStorageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .veil.protocol.fuse_messages.ClientStorageInfo.StorageInfo storage_info = 1;
  for (int i = 0; i < this->storage_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->storage_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientStorageInfo::ByteSize() const {
  int total_size = 0;

  // repeated .veil.protocol.fuse_messages.ClientStorageInfo.StorageInfo storage_info = 1;
  total_size += 1 * this->storage_info_size();
  for (int i = 0; i < this->storage_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storage_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStorageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientStorageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientStorageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientStorageInfo::MergeFrom(const ClientStorageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_info_.MergeFrom(from.storage_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientStorageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStorageInfo::CopyFrom(const ClientStorageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStorageInfo::IsInitialized() const {

  for (int i = 0; i < storage_info_size(); i++) {
    if (!this->storage_info(i).IsInitialized()) return false;
  }
  return true;
}

void ClientStorageInfo::Swap(ClientStorageInfo* other) {
  if (other != this) {
    storage_info_.Swap(&other->storage_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientStorageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientStorageInfo_descriptor_;
  metadata.reflection = ClientStorageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetStatFS::GetStatFS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStatFS::InitAsDefaultInstance() {
}

GetStatFS::GetStatFS(const GetStatFS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStatFS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStatFS::~GetStatFS() {
  SharedDtor();
}

void GetStatFS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStatFS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStatFS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStatFS_descriptor_;
}

const GetStatFS& GetStatFS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

GetStatFS* GetStatFS::default_instance_ = NULL;

GetStatFS* GetStatFS::New() const {
  return new GetStatFS;
}

void GetStatFS::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStatFS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetStatFS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStatFS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStatFS::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStatFS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStatFS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStatFS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStatFS::MergeFrom(const GetStatFS& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStatFS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatFS::CopyFrom(const GetStatFS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatFS::IsInitialized() const {

  return true;
}

void GetStatFS::Swap(GetStatFS* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStatFS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStatFS_descriptor_;
  metadata.reflection = GetStatFS_reflection_;
  return metadata;
}


// ===================================================================

::std::string* StatFSInfo::_default_answer_ = NULL;
#ifndef _MSC_VER
const int StatFSInfo::kAnswerFieldNumber;
const int StatFSInfo::kQuotaSizeFieldNumber;
const int StatFSInfo::kFilesSizeFieldNumber;
#endif  // !_MSC_VER

StatFSInfo::StatFSInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatFSInfo::InitAsDefaultInstance() {
}

StatFSInfo::StatFSInfo(const StatFSInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatFSInfo::SharedCtor() {
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(_default_answer_);
  quota_size_ = GOOGLE_LONGLONG(0);
  files_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatFSInfo::~StatFSInfo() {
  SharedDtor();
}

void StatFSInfo::SharedDtor() {
  if (answer_ != _default_answer_) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void StatFSInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatFSInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatFSInfo_descriptor_;
}

const StatFSInfo& StatFSInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

StatFSInfo* StatFSInfo::default_instance_ = NULL;

StatFSInfo* StatFSInfo::New() const {
  return new StatFSInfo;
}

void StatFSInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer()) {
      if (answer_ != _default_answer_) {
        answer_->assign(*_default_answer_);
      }
    }
    quota_size_ = GOOGLE_LONGLONG(0);
    files_size_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatFSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string answer = 1 [default = "ok"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quota_size;
        break;
      }

      // required int64 quota_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quota_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quota_size_)));
          set_has_quota_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_files_size;
        break;
      }

      // required int64 files_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_files_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &files_size_)));
          set_has_files_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatFSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer(), output);
  }

  // required int64 quota_size = 2;
  if (has_quota_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->quota_size(), output);
  }

  // required int64 files_size = 3;
  if (has_files_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->files_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatFSInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string answer = 1 [default = "ok"];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // required int64 quota_size = 2;
  if (has_quota_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->quota_size(), target);
  }

  // required int64 files_size = 3;
  if (has_files_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->files_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatFSInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string answer = 1 [default = "ok"];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // required int64 quota_size = 2;
    if (has_quota_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quota_size());
    }

    // required int64 files_size = 3;
    if (has_files_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->files_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatFSInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatFSInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatFSInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatFSInfo::MergeFrom(const StatFSInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_quota_size()) {
      set_quota_size(from.quota_size());
    }
    if (from.has_files_size()) {
      set_files_size(from.files_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatFSInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatFSInfo::CopyFrom(const StatFSInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatFSInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void StatFSInfo::Swap(StatFSInfo* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(quota_size_, other->quota_size_);
    std::swap(files_size_, other->files_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatFSInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatFSInfo_descriptor_;
  metadata.reflection = StatFSInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventFilterConfig::kFieldNameFieldNumber;
const int EventFilterConfig::kDesiredValueFieldNumber;
#endif  // !_MSC_VER

EventFilterConfig::EventFilterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventFilterConfig::InitAsDefaultInstance() {
}

EventFilterConfig::EventFilterConfig(const EventFilterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventFilterConfig::SharedCtor() {
  _cached_size_ = 0;
  field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desired_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventFilterConfig::~EventFilterConfig() {
  SharedDtor();
}

void EventFilterConfig::SharedDtor() {
  if (field_name_ != &::google::protobuf::internal::kEmptyString) {
    delete field_name_;
  }
  if (desired_value_ != &::google::protobuf::internal::kEmptyString) {
    delete desired_value_;
  }
  if (this != default_instance_) {
  }
}

void EventFilterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventFilterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventFilterConfig_descriptor_;
}

const EventFilterConfig& EventFilterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

EventFilterConfig* EventFilterConfig::default_instance_ = NULL;

EventFilterConfig* EventFilterConfig::New() const {
  return new EventFilterConfig;
}

void EventFilterConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field_name()) {
      if (field_name_ != &::google::protobuf::internal::kEmptyString) {
        field_name_->clear();
      }
    }
    if (has_desired_value()) {
      if (desired_value_ != &::google::protobuf::internal::kEmptyString) {
        desired_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventFilterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desired_value;
        break;
      }

      // required string desired_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desired_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desired_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desired_value().data(), this->desired_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventFilterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string field_name = 1;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field_name(), output);
  }

  // required string desired_value = 2;
  if (has_desired_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desired_value().data(), this->desired_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desired_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventFilterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string field_name = 1;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // required string desired_value = 2;
  if (has_desired_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desired_value().data(), this->desired_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desired_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventFilterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field_name = 1;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

    // required string desired_value = 2;
    if (has_desired_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desired_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventFilterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventFilterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventFilterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventFilterConfig::MergeFrom(const EventFilterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_desired_value()) {
      set_desired_value(from.desired_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventFilterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventFilterConfig::CopyFrom(const EventFilterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventFilterConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EventFilterConfig::Swap(EventFilterConfig* other) {
  if (other != this) {
    std::swap(field_name_, other->field_name_);
    std::swap(desired_value_, other->desired_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventFilterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventFilterConfig_descriptor_;
  metadata.reflection = EventFilterConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventAggregatorConfig::kFieldNameFieldNumber;
const int EventAggregatorConfig::kThresholdFieldNumber;
const int EventAggregatorConfig::kSumFieldNameFieldNumber;
#endif  // !_MSC_VER

EventAggregatorConfig::EventAggregatorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventAggregatorConfig::InitAsDefaultInstance() {
}

EventAggregatorConfig::EventAggregatorConfig(const EventAggregatorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventAggregatorConfig::SharedCtor() {
  _cached_size_ = 0;
  field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threshold_ = GOOGLE_ULONGLONG(0);
  sum_field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventAggregatorConfig::~EventAggregatorConfig() {
  SharedDtor();
}

void EventAggregatorConfig::SharedDtor() {
  if (field_name_ != &::google::protobuf::internal::kEmptyString) {
    delete field_name_;
  }
  if (sum_field_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sum_field_name_;
  }
  if (this != default_instance_) {
  }
}

void EventAggregatorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventAggregatorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventAggregatorConfig_descriptor_;
}

const EventAggregatorConfig& EventAggregatorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

EventAggregatorConfig* EventAggregatorConfig::default_instance_ = NULL;

EventAggregatorConfig* EventAggregatorConfig::New() const {
  return new EventAggregatorConfig;
}

void EventAggregatorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field_name()) {
      if (field_name_ != &::google::protobuf::internal::kEmptyString) {
        field_name_->clear();
      }
    }
    threshold_ = GOOGLE_ULONGLONG(0);
    if (has_sum_field_name()) {
      if (sum_field_name_ != &::google::protobuf::internal::kEmptyString) {
        sum_field_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventAggregatorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_threshold;
        break;
      }

      // required uint64 threshold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sum_field_name;
        break;
      }

      // required string sum_field_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sum_field_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sum_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sum_field_name().data(), this->sum_field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventAggregatorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string field_name = 1;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field_name(), output);
  }

  // required uint64 threshold = 2;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->threshold(), output);
  }

  // required string sum_field_name = 3;
  if (has_sum_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sum_field_name().data(), this->sum_field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sum_field_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventAggregatorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string field_name = 1;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // required uint64 threshold = 2;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->threshold(), target);
  }

  // required string sum_field_name = 3;
  if (has_sum_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sum_field_name().data(), this->sum_field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sum_field_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventAggregatorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field_name = 1;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

    // required uint64 threshold = 2;
    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->threshold());
    }

    // required string sum_field_name = 3;
    if (has_sum_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sum_field_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventAggregatorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventAggregatorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventAggregatorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventAggregatorConfig::MergeFrom(const EventAggregatorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_sum_field_name()) {
      set_sum_field_name(from.sum_field_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventAggregatorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventAggregatorConfig::CopyFrom(const EventAggregatorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAggregatorConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EventAggregatorConfig::Swap(EventAggregatorConfig* other) {
  if (other != this) {
    std::swap(field_name_, other->field_name_);
    std::swap(threshold_, other->threshold_);
    std::swap(sum_field_name_, other->sum_field_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventAggregatorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventAggregatorConfig_descriptor_;
  metadata.reflection = EventAggregatorConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventTransformerConfig::kFieldNamesToReplaceFieldNumber;
const int EventTransformerConfig::kValuesToReplaceFieldNumber;
const int EventTransformerConfig::kNewValuesFieldNumber;
#endif  // !_MSC_VER

EventTransformerConfig::EventTransformerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventTransformerConfig::InitAsDefaultInstance() {
}

EventTransformerConfig::EventTransformerConfig(const EventTransformerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventTransformerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventTransformerConfig::~EventTransformerConfig() {
  SharedDtor();
}

void EventTransformerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventTransformerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventTransformerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventTransformerConfig_descriptor_;
}

const EventTransformerConfig& EventTransformerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

EventTransformerConfig* EventTransformerConfig::default_instance_ = NULL;

EventTransformerConfig* EventTransformerConfig::New() const {
  return new EventTransformerConfig;
}

void EventTransformerConfig::Clear() {
  field_names_to_replace_.Clear();
  values_to_replace_.Clear();
  new_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventTransformerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string field_names_to_replace = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_names_to_replace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_names_to_replace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_names_to_replace(this->field_names_to_replace_size() - 1).data(),
            this->field_names_to_replace(this->field_names_to_replace_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_field_names_to_replace;
        if (input->ExpectTag(18)) goto parse_values_to_replace;
        break;
      }

      // repeated string values_to_replace = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values_to_replace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values_to_replace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values_to_replace(this->values_to_replace_size() - 1).data(),
            this->values_to_replace(this->values_to_replace_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values_to_replace;
        if (input->ExpectTag(26)) goto parse_new_values;
        break;
      }

      // repeated string new_values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_values(this->new_values_size() - 1).data(),
            this->new_values(this->new_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventTransformerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string field_names_to_replace = 1;
  for (int i = 0; i < this->field_names_to_replace_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_names_to_replace(i).data(), this->field_names_to_replace(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field_names_to_replace(i), output);
  }

  // repeated string values_to_replace = 2;
  for (int i = 0; i < this->values_to_replace_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values_to_replace(i).data(), this->values_to_replace(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values_to_replace(i), output);
  }

  // repeated string new_values = 3;
  for (int i = 0; i < this->new_values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_values(i).data(), this->new_values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventTransformerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string field_names_to_replace = 1;
  for (int i = 0; i < this->field_names_to_replace_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_names_to_replace(i).data(), this->field_names_to_replace(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->field_names_to_replace(i), target);
  }

  // repeated string values_to_replace = 2;
  for (int i = 0; i < this->values_to_replace_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values_to_replace(i).data(), this->values_to_replace(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values_to_replace(i), target);
  }

  // repeated string new_values = 3;
  for (int i = 0; i < this->new_values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_values(i).data(), this->new_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->new_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventTransformerConfig::ByteSize() const {
  int total_size = 0;

  // repeated string field_names_to_replace = 1;
  total_size += 1 * this->field_names_to_replace_size();
  for (int i = 0; i < this->field_names_to_replace_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_names_to_replace(i));
  }

  // repeated string values_to_replace = 2;
  total_size += 1 * this->values_to_replace_size();
  for (int i = 0; i < this->values_to_replace_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values_to_replace(i));
  }

  // repeated string new_values = 3;
  total_size += 1 * this->new_values_size();
  for (int i = 0; i < this->new_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventTransformerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventTransformerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventTransformerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventTransformerConfig::MergeFrom(const EventTransformerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_names_to_replace_.MergeFrom(from.field_names_to_replace_);
  values_to_replace_.MergeFrom(from.values_to_replace_);
  new_values_.MergeFrom(from.new_values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventTransformerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventTransformerConfig::CopyFrom(const EventTransformerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventTransformerConfig::IsInitialized() const {

  return true;
}

void EventTransformerConfig::Swap(EventTransformerConfig* other) {
  if (other != this) {
    field_names_to_replace_.Swap(&other->field_names_to_replace_);
    values_to_replace_.Swap(&other->values_to_replace_);
    new_values_.Swap(&other->new_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventTransformerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventTransformerConfig_descriptor_;
  metadata.reflection = EventTransformerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventStreamConfig::kWrappedConfigFieldNumber;
const int EventStreamConfig::kFilterConfigFieldNumber;
const int EventStreamConfig::kAggregatorConfigFieldNumber;
const int EventStreamConfig::kTransformerConfigFieldNumber;
const int EventStreamConfig::kNeededEnvsFieldNumber;
#endif  // !_MSC_VER

EventStreamConfig::EventStreamConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventStreamConfig::InitAsDefaultInstance() {
  wrapped_config_ = const_cast< ::veil::protocol::fuse_messages::EventStreamConfig*>(&::veil::protocol::fuse_messages::EventStreamConfig::default_instance());
  filter_config_ = const_cast< ::veil::protocol::fuse_messages::EventFilterConfig*>(&::veil::protocol::fuse_messages::EventFilterConfig::default_instance());
  aggregator_config_ = const_cast< ::veil::protocol::fuse_messages::EventAggregatorConfig*>(&::veil::protocol::fuse_messages::EventAggregatorConfig::default_instance());
  transformer_config_ = const_cast< ::veil::protocol::fuse_messages::EventTransformerConfig*>(&::veil::protocol::fuse_messages::EventTransformerConfig::default_instance());
}

EventStreamConfig::EventStreamConfig(const EventStreamConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventStreamConfig::SharedCtor() {
  _cached_size_ = 0;
  wrapped_config_ = NULL;
  filter_config_ = NULL;
  aggregator_config_ = NULL;
  transformer_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventStreamConfig::~EventStreamConfig() {
  SharedDtor();
}

void EventStreamConfig::SharedDtor() {
  if (this != default_instance_) {
    delete wrapped_config_;
    delete filter_config_;
    delete aggregator_config_;
    delete transformer_config_;
  }
}

void EventStreamConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventStreamConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventStreamConfig_descriptor_;
}

const EventStreamConfig& EventStreamConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

EventStreamConfig* EventStreamConfig::default_instance_ = NULL;

EventStreamConfig* EventStreamConfig::New() const {
  return new EventStreamConfig;
}

void EventStreamConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wrapped_config()) {
      if (wrapped_config_ != NULL) wrapped_config_->::veil::protocol::fuse_messages::EventStreamConfig::Clear();
    }
    if (has_filter_config()) {
      if (filter_config_ != NULL) filter_config_->::veil::protocol::fuse_messages::EventFilterConfig::Clear();
    }
    if (has_aggregator_config()) {
      if (aggregator_config_ != NULL) aggregator_config_->::veil::protocol::fuse_messages::EventAggregatorConfig::Clear();
    }
    if (has_transformer_config()) {
      if (transformer_config_ != NULL) transformer_config_->::veil::protocol::fuse_messages::EventTransformerConfig::Clear();
    }
  }
  needed_envs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .veil.protocol.fuse_messages.EventStreamConfig wrapped_config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wrapped_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter_config;
        break;
      }

      // optional .veil.protocol.fuse_messages.EventFilterConfig filter_config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_aggregator_config;
        break;
      }

      // optional .veil.protocol.fuse_messages.EventAggregatorConfig aggregator_config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aggregator_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aggregator_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transformer_config;
        break;
      }

      // optional .veil.protocol.fuse_messages.EventTransformerConfig transformer_config = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transformer_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformer_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_needed_envs;
        break;
      }

      // repeated string needed_envs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needed_envs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_needed_envs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->needed_envs(this->needed_envs_size() - 1).data(),
            this->needed_envs(this->needed_envs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_needed_envs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .veil.protocol.fuse_messages.EventStreamConfig wrapped_config = 1;
  if (has_wrapped_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wrapped_config(), output);
  }

  // optional .veil.protocol.fuse_messages.EventFilterConfig filter_config = 2;
  if (has_filter_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter_config(), output);
  }

  // optional .veil.protocol.fuse_messages.EventAggregatorConfig aggregator_config = 3;
  if (has_aggregator_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->aggregator_config(), output);
  }

  // optional .veil.protocol.fuse_messages.EventTransformerConfig transformer_config = 4;
  if (has_transformer_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transformer_config(), output);
  }

  // repeated string needed_envs = 5;
  for (int i = 0; i < this->needed_envs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->needed_envs(i).data(), this->needed_envs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->needed_envs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventStreamConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .veil.protocol.fuse_messages.EventStreamConfig wrapped_config = 1;
  if (has_wrapped_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wrapped_config(), target);
  }

  // optional .veil.protocol.fuse_messages.EventFilterConfig filter_config = 2;
  if (has_filter_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter_config(), target);
  }

  // optional .veil.protocol.fuse_messages.EventAggregatorConfig aggregator_config = 3;
  if (has_aggregator_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->aggregator_config(), target);
  }

  // optional .veil.protocol.fuse_messages.EventTransformerConfig transformer_config = 4;
  if (has_transformer_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transformer_config(), target);
  }

  // repeated string needed_envs = 5;
  for (int i = 0; i < this->needed_envs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needed_envs(i).data(), this->needed_envs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->needed_envs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventStreamConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .veil.protocol.fuse_messages.EventStreamConfig wrapped_config = 1;
    if (has_wrapped_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wrapped_config());
    }

    // optional .veil.protocol.fuse_messages.EventFilterConfig filter_config = 2;
    if (has_filter_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_config());
    }

    // optional .veil.protocol.fuse_messages.EventAggregatorConfig aggregator_config = 3;
    if (has_aggregator_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aggregator_config());
    }

    // optional .veil.protocol.fuse_messages.EventTransformerConfig transformer_config = 4;
    if (has_transformer_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformer_config());
    }

  }
  // repeated string needed_envs = 5;
  total_size += 1 * this->needed_envs_size();
  for (int i = 0; i < this->needed_envs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->needed_envs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventStreamConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventStreamConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventStreamConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventStreamConfig::MergeFrom(const EventStreamConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  needed_envs_.MergeFrom(from.needed_envs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wrapped_config()) {
      mutable_wrapped_config()->::veil::protocol::fuse_messages::EventStreamConfig::MergeFrom(from.wrapped_config());
    }
    if (from.has_filter_config()) {
      mutable_filter_config()->::veil::protocol::fuse_messages::EventFilterConfig::MergeFrom(from.filter_config());
    }
    if (from.has_aggregator_config()) {
      mutable_aggregator_config()->::veil::protocol::fuse_messages::EventAggregatorConfig::MergeFrom(from.aggregator_config());
    }
    if (from.has_transformer_config()) {
      mutable_transformer_config()->::veil::protocol::fuse_messages::EventTransformerConfig::MergeFrom(from.transformer_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventStreamConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventStreamConfig::CopyFrom(const EventStreamConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStreamConfig::IsInitialized() const {

  if (has_wrapped_config()) {
    if (!this->wrapped_config().IsInitialized()) return false;
  }
  if (has_filter_config()) {
    if (!this->filter_config().IsInitialized()) return false;
  }
  if (has_aggregator_config()) {
    if (!this->aggregator_config().IsInitialized()) return false;
  }
  return true;
}

void EventStreamConfig::Swap(EventStreamConfig* other) {
  if (other != this) {
    std::swap(wrapped_config_, other->wrapped_config_);
    std::swap(filter_config_, other->filter_config_);
    std::swap(aggregator_config_, other->aggregator_config_);
    std::swap(transformer_config_, other->transformer_config_);
    needed_envs_.Swap(&other->needed_envs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventStreamConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventStreamConfig_descriptor_;
  metadata.reflection = EventStreamConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventProducerConfig::kEventStreamsConfigsFieldNumber;
#endif  // !_MSC_VER

EventProducerConfig::EventProducerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventProducerConfig::InitAsDefaultInstance() {
}

EventProducerConfig::EventProducerConfig(const EventProducerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventProducerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventProducerConfig::~EventProducerConfig() {
  SharedDtor();
}

void EventProducerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventProducerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventProducerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventProducerConfig_descriptor_;
}

const EventProducerConfig& EventProducerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

EventProducerConfig* EventProducerConfig::default_instance_ = NULL;

EventProducerConfig* EventProducerConfig::New() const {
  return new EventProducerConfig;
}

void EventProducerConfig::Clear() {
  event_streams_configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventProducerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .veil.protocol.fuse_messages.EventStreamConfig event_streams_configs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_streams_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_streams_configs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event_streams_configs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventProducerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .veil.protocol.fuse_messages.EventStreamConfig event_streams_configs = 1;
  for (int i = 0; i < this->event_streams_configs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_streams_configs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventProducerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .veil.protocol.fuse_messages.EventStreamConfig event_streams_configs = 1;
  for (int i = 0; i < this->event_streams_configs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event_streams_configs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventProducerConfig::ByteSize() const {
  int total_size = 0;

  // repeated .veil.protocol.fuse_messages.EventStreamConfig event_streams_configs = 1;
  total_size += 1 * this->event_streams_configs_size();
  for (int i = 0; i < this->event_streams_configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_streams_configs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventProducerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventProducerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventProducerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventProducerConfig::MergeFrom(const EventProducerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_streams_configs_.MergeFrom(from.event_streams_configs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventProducerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventProducerConfig::CopyFrom(const EventProducerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventProducerConfig::IsInitialized() const {

  for (int i = 0; i < event_streams_configs_size(); i++) {
    if (!this->event_streams_configs(i).IsInitialized()) return false;
  }
  return true;
}

void EventProducerConfig::Swap(EventProducerConfig* other) {
  if (other != this) {
    event_streams_configs_.Swap(&other->event_streams_configs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventProducerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventProducerConfig_descriptor_;
  metadata.reflection = EventProducerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventMessage::kNumericPropertiesKeysFieldNumber;
const int EventMessage::kNumericPropertiesValuesFieldNumber;
const int EventMessage::kStringPropertiesKeysFieldNumber;
const int EventMessage::kStringPropertiesValuesFieldNumber;
#endif  // !_MSC_VER

EventMessage::EventMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventMessage::InitAsDefaultInstance() {
}

EventMessage::EventMessage(const EventMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventMessage::~EventMessage() {
  SharedDtor();
}

void EventMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventMessage_descriptor_;
}

const EventMessage& EventMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuse_5fmessages_2eproto();
  return *default_instance_;
}

EventMessage* EventMessage::default_instance_ = NULL;

EventMessage* EventMessage::New() const {
  return new EventMessage;
}

void EventMessage::Clear() {
  numeric_properties_keys_.Clear();
  numeric_properties_values_.Clear();
  string_properties_keys_.Clear();
  string_properties_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string numeric_properties_keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_numeric_properties_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_numeric_properties_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->numeric_properties_keys(this->numeric_properties_keys_size() - 1).data(),
            this->numeric_properties_keys(this->numeric_properties_keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_numeric_properties_keys;
        if (input->ExpectTag(16)) goto parse_numeric_properties_values;
        break;
      }

      // repeated int64 numeric_properties_values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numeric_properties_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_numeric_properties_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_numeric_properties_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numeric_properties_values;
        if (input->ExpectTag(26)) goto parse_string_properties_keys;
        break;
      }

      // repeated string string_properties_keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_properties_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_properties_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_properties_keys(this->string_properties_keys_size() - 1).data(),
            this->string_properties_keys(this->string_properties_keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_properties_keys;
        if (input->ExpectTag(34)) goto parse_string_properties_values;
        break;
      }

      // repeated string string_properties_values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_properties_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_properties_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_properties_values(this->string_properties_values_size() - 1).data(),
            this->string_properties_values(this->string_properties_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string_properties_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string numeric_properties_keys = 1;
  for (int i = 0; i < this->numeric_properties_keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->numeric_properties_keys(i).data(), this->numeric_properties_keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->numeric_properties_keys(i), output);
  }

  // repeated int64 numeric_properties_values = 2;
  for (int i = 0; i < this->numeric_properties_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->numeric_properties_values(i), output);
  }

  // repeated string string_properties_keys = 3;
  for (int i = 0; i < this->string_properties_keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->string_properties_keys(i).data(), this->string_properties_keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_properties_keys(i), output);
  }

  // repeated string string_properties_values = 4;
  for (int i = 0; i < this->string_properties_values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->string_properties_values(i).data(), this->string_properties_values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string_properties_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string numeric_properties_keys = 1;
  for (int i = 0; i < this->numeric_properties_keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->numeric_properties_keys(i).data(), this->numeric_properties_keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->numeric_properties_keys(i), target);
  }

  // repeated int64 numeric_properties_values = 2;
  for (int i = 0; i < this->numeric_properties_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->numeric_properties_values(i), target);
  }

  // repeated string string_properties_keys = 3;
  for (int i = 0; i < this->string_properties_keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_properties_keys(i).data(), this->string_properties_keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->string_properties_keys(i), target);
  }

  // repeated string string_properties_values = 4;
  for (int i = 0; i < this->string_properties_values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_properties_values(i).data(), this->string_properties_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->string_properties_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventMessage::ByteSize() const {
  int total_size = 0;

  // repeated string numeric_properties_keys = 1;
  total_size += 1 * this->numeric_properties_keys_size();
  for (int i = 0; i < this->numeric_properties_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->numeric_properties_keys(i));
  }

  // repeated int64 numeric_properties_values = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->numeric_properties_values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->numeric_properties_values(i));
    }
    total_size += 1 * this->numeric_properties_values_size() + data_size;
  }

  // repeated string string_properties_keys = 3;
  total_size += 1 * this->string_properties_keys_size();
  for (int i = 0; i < this->string_properties_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_properties_keys(i));
  }

  // repeated string string_properties_values = 4;
  total_size += 1 * this->string_properties_values_size();
  for (int i = 0; i < this->string_properties_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_properties_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventMessage::MergeFrom(const EventMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  numeric_properties_keys_.MergeFrom(from.numeric_properties_keys_);
  numeric_properties_values_.MergeFrom(from.numeric_properties_values_);
  string_properties_keys_.MergeFrom(from.string_properties_keys_);
  string_properties_values_.MergeFrom(from.string_properties_values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMessage::CopyFrom(const EventMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMessage::IsInitialized() const {

  return true;
}

void EventMessage::Swap(EventMessage* other) {
  if (other != this) {
    numeric_properties_keys_.Swap(&other->numeric_properties_keys_);
    numeric_properties_values_.Swap(&other->numeric_properties_values_);
    string_properties_keys_.Swap(&other->string_properties_keys_);
    string_properties_values_.Swap(&other->string_properties_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventMessage_descriptor_;
  metadata.reflection = EventMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fuse_messages
}  // namespace protocol
}  // namespace veil

// @@protoc_insertion_point(global_scope)
