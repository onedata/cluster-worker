// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "communication_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace veil {
namespace protocol {
namespace communication_protocol {

namespace {

const ::google::protobuf::Descriptor* ClusterMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Answer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Answer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProviderMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProviderMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_communication_5fprotocol_2eproto() {
  protobuf_AddDesc_communication_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "communication_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ClusterMsg_descriptor_ = file->message_type(0);
  static const int ClusterMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, message_decoder_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, answer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, answer_decoder_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, synch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, global_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, token_hash_),
  };
  ClusterMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterMsg_descriptor_,
      ClusterMsg::default_instance_,
      ClusterMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterMsg));
  Answer_descriptor_ = file->message_type(1);
  static const int Answer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, answer_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, worker_answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, error_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, message_decoder_name_),
  };
  Answer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Answer_descriptor_,
      Answer::default_instance_,
      Answer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Answer));
  ProviderMsg_descriptor_ = file->message_type(2);
  static const int ProviderMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMsg, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMsg, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMsg, fuse_id_),
  };
  ProviderMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProviderMsg_descriptor_,
      ProviderMsg::default_instance_,
      ProviderMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProviderMsg));
  Atom_descriptor_ = file->message_type(3);
  static const int Atom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom, value_),
  };
  Atom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_descriptor_,
      Atom::default_instance_,
      Atom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_communication_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterMsg_descriptor_, &ClusterMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Answer_descriptor_, &Answer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProviderMsg_descriptor_, &ProviderMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_descriptor_, &Atom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_communication_5fprotocol_2eproto() {
  delete ClusterMsg::default_instance_;
  delete ClusterMsg_reflection_;
  delete Answer::default_instance_;
  delete Answer_reflection_;
  delete ProviderMsg::default_instance_;
  delete ProviderMsg_reflection_;
  delete Atom::default_instance_;
  delete Atom_reflection_;
}

void protobuf_AddDesc_communication_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034communication_protocol.proto\022$veil.pro"
    "tocol.communication_protocol\"\202\002\n\nCluster"
    "Msg\022\023\n\013module_name\030\001 \002(\t\022\024\n\014message_type"
    "\030\002 \002(\t\022\034\n\024message_decoder_name\030\003 \002(\t\022\023\n\013"
    "answer_type\030\004 \002(\t\022\033\n\023answer_decoder_name"
    "\030\005 \002(\t\022\r\n\005synch\030\006 \002(\010\022\030\n\020protocol_versio"
    "n\030\007 \002(\005\022\025\n\nmessage_id\030\010 \001(\005:\0010\022\r\n\005input\030"
    "\t \001(\014\022\026\n\016global_user_id\030\n \001(\014\022\022\n\ntoken_h"
    "ash\030\013 \001(\014\"\236\001\n\006Answer\022\025\n\ranswer_status\030\001 "
    "\002(\t\022\025\n\nmessage_id\030\002 \001(\005:\0010\022\026\n\014message_ty"
    "pe\030\003 \001(\t:\000\022\025\n\rworker_answer\030\004 \001(\014\022\031\n\021err"
    "or_description\030\005 \001(\t\022\034\n\024message_decoder_"
    "name\030\006 \001(\t\"C\n\013ProviderMsg\022\024\n\014message_typ"
    "e\030\001 \002(\t\022\r\n\005input\030\002 \002(\014\022\017\n\007fuse_id\030\003 \001(\014\""
    "\025\n\004Atom\022\r\n\005value\030\001 \002(\t", 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "communication_protocol.proto", &protobuf_RegisterTypes);
  ClusterMsg::default_instance_ = new ClusterMsg();
  Answer::default_instance_ = new Answer();
  ProviderMsg::default_instance_ = new ProviderMsg();
  Atom::default_instance_ = new Atom();
  ClusterMsg::default_instance_->InitAsDefaultInstance();
  Answer::default_instance_->InitAsDefaultInstance();
  ProviderMsg::default_instance_->InitAsDefaultInstance();
  Atom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_communication_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_communication_5fprotocol_2eproto {
  StaticDescriptorInitializer_communication_5fprotocol_2eproto() {
    protobuf_AddDesc_communication_5fprotocol_2eproto();
  }
} static_descriptor_initializer_communication_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClusterMsg::kModuleNameFieldNumber;
const int ClusterMsg::kMessageTypeFieldNumber;
const int ClusterMsg::kMessageDecoderNameFieldNumber;
const int ClusterMsg::kAnswerTypeFieldNumber;
const int ClusterMsg::kAnswerDecoderNameFieldNumber;
const int ClusterMsg::kSynchFieldNumber;
const int ClusterMsg::kProtocolVersionFieldNumber;
const int ClusterMsg::kMessageIdFieldNumber;
const int ClusterMsg::kInputFieldNumber;
const int ClusterMsg::kGlobalUserIdFieldNumber;
const int ClusterMsg::kTokenHashFieldNumber;
#endif  // !_MSC_VER

ClusterMsg::ClusterMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClusterMsg::InitAsDefaultInstance() {
}

ClusterMsg::ClusterMsg(const ClusterMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClusterMsg::SharedCtor() {
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  answer_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  answer_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  synch_ = false;
  protocol_version_ = 0;
  message_id_ = 0;
  input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  global_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterMsg::~ClusterMsg() {
  SharedDtor();
}

void ClusterMsg::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    delete message_type_;
  }
  if (message_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete message_decoder_name_;
  }
  if (answer_type_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_type_;
  }
  if (answer_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_decoder_name_;
  }
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (global_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete global_user_id_;
  }
  if (token_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete token_hash_;
  }
  if (this != default_instance_) {
  }
}

void ClusterMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterMsg_descriptor_;
}

const ClusterMsg& ClusterMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_5fprotocol_2eproto();
  return *default_instance_;
}

ClusterMsg* ClusterMsg::default_instance_ = NULL;

ClusterMsg* ClusterMsg::New() const {
  return new ClusterMsg;
}

void ClusterMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_message_type()) {
      if (message_type_ != &::google::protobuf::internal::kEmptyString) {
        message_type_->clear();
      }
    }
    if (has_message_decoder_name()) {
      if (message_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
        message_decoder_name_->clear();
      }
    }
    if (has_answer_type()) {
      if (answer_type_ != &::google::protobuf::internal::kEmptyString) {
        answer_type_->clear();
      }
    }
    if (has_answer_decoder_name()) {
      if (answer_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
        answer_decoder_name_->clear();
      }
    }
    synch_ = false;
    protocol_version_ = 0;
    message_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_input()) {
      if (input_ != &::google::protobuf::internal::kEmptyString) {
        input_->clear();
      }
    }
    if (has_global_user_id()) {
      if (global_user_id_ != &::google::protobuf::internal::kEmptyString) {
        global_user_id_->clear();
      }
    }
    if (has_token_hash()) {
      if (token_hash_ != &::google::protobuf::internal::kEmptyString) {
        token_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string module_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message_type;
        break;
      }

      // required string message_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message_decoder_name;
        break;
      }

      // required string message_decoder_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_decoder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_decoder_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_decoder_name().data(), this->message_decoder_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_answer_type;
        break;
      }

      // required string answer_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answer_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer_type().data(), this->answer_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_answer_decoder_name;
        break;
      }

      // required string answer_decoder_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answer_decoder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer_decoder_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer_decoder_name().data(), this->answer_decoder_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_synch;
        break;
      }

      // required bool synch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synch_)));
          set_has_synch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_protocol_version;
        break;
      }

      // required int32 protocol_version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_message_id;
        break;
      }

      // optional int32 message_id = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_input;
        break;
      }

      // optional bytes input = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_global_user_id;
        break;
      }

      // optional bytes global_user_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_global_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_global_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_token_hash;
        break;
      }

      // optional bytes token_hash = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClusterMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module_name(), output);
  }

  // required string message_type = 2;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message_type(), output);
  }

  // required string message_decoder_name = 3;
  if (has_message_decoder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_decoder_name().data(), this->message_decoder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message_decoder_name(), output);
  }

  // required string answer_type = 4;
  if (has_answer_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_type().data(), this->answer_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->answer_type(), output);
  }

  // required string answer_decoder_name = 5;
  if (has_answer_decoder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_decoder_name().data(), this->answer_decoder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->answer_decoder_name(), output);
  }

  // required bool synch = 6;
  if (has_synch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->synch(), output);
  }

  // required int32 protocol_version = 7;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->protocol_version(), output);
  }

  // optional int32 message_id = 8 [default = 0];
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->message_id(), output);
  }

  // optional bytes input = 9;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->input(), output);
  }

  // optional bytes global_user_id = 10;
  if (has_global_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->global_user_id(), output);
  }

  // optional bytes token_hash = 11;
  if (has_token_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->token_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClusterMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }

  // required string message_type = 2;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_type(), target);
  }

  // required string message_decoder_name = 3;
  if (has_message_decoder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_decoder_name().data(), this->message_decoder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_decoder_name(), target);
  }

  // required string answer_type = 4;
  if (has_answer_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_type().data(), this->answer_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->answer_type(), target);
  }

  // required string answer_decoder_name = 5;
  if (has_answer_decoder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_decoder_name().data(), this->answer_decoder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->answer_decoder_name(), target);
  }

  // required bool synch = 6;
  if (has_synch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->synch(), target);
  }

  // required int32 protocol_version = 7;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->protocol_version(), target);
  }

  // optional int32 message_id = 8 [default = 0];
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->message_id(), target);
  }

  // optional bytes input = 9;
  if (has_input()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->input(), target);
  }

  // optional bytes global_user_id = 10;
  if (has_global_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->global_user_id(), target);
  }

  // optional bytes token_hash = 11;
  if (has_token_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->token_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClusterMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string module_name = 1;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // required string message_type = 2;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // required string message_decoder_name = 3;
    if (has_message_decoder_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_decoder_name());
    }

    // required string answer_type = 4;
    if (has_answer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer_type());
    }

    // required string answer_decoder_name = 5;
    if (has_answer_decoder_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer_decoder_name());
    }

    // required bool synch = 6;
    if (has_synch()) {
      total_size += 1 + 1;
    }

    // required int32 protocol_version = 7;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol_version());
    }

    // optional int32 message_id = 8 [default = 0];
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes input = 9;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->input());
    }

    // optional bytes global_user_id = 10;
    if (has_global_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->global_user_id());
    }

    // optional bytes token_hash = 11;
    if (has_token_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterMsg::MergeFrom(const ClusterMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_message_decoder_name()) {
      set_message_decoder_name(from.message_decoder_name());
    }
    if (from.has_answer_type()) {
      set_answer_type(from.answer_type());
    }
    if (from.has_answer_decoder_name()) {
      set_answer_decoder_name(from.answer_decoder_name());
    }
    if (from.has_synch()) {
      set_synch(from.synch());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_input()) {
      set_input(from.input());
    }
    if (from.has_global_user_id()) {
      set_global_user_id(from.global_user_id());
    }
    if (from.has_token_hash()) {
      set_token_hash(from.token_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterMsg::CopyFrom(const ClusterMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ClusterMsg::Swap(ClusterMsg* other) {
  if (other != this) {
    std::swap(module_name_, other->module_name_);
    std::swap(message_type_, other->message_type_);
    std::swap(message_decoder_name_, other->message_decoder_name_);
    std::swap(answer_type_, other->answer_type_);
    std::swap(answer_decoder_name_, other->answer_decoder_name_);
    std::swap(synch_, other->synch_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(message_id_, other->message_id_);
    std::swap(input_, other->input_);
    std::swap(global_user_id_, other->global_user_id_);
    std::swap(token_hash_, other->token_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterMsg_descriptor_;
  metadata.reflection = ClusterMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Answer::kAnswerStatusFieldNumber;
const int Answer::kMessageIdFieldNumber;
const int Answer::kMessageTypeFieldNumber;
const int Answer::kWorkerAnswerFieldNumber;
const int Answer::kErrorDescriptionFieldNumber;
const int Answer::kMessageDecoderNameFieldNumber;
#endif  // !_MSC_VER

Answer::Answer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Answer::InitAsDefaultInstance() {
}

Answer::Answer(const Answer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Answer::SharedCtor() {
  _cached_size_ = 0;
  answer_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_id_ = 0;
  message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  worker_answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Answer::~Answer() {
  SharedDtor();
}

void Answer::SharedDtor() {
  if (answer_status_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_status_;
  }
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    delete message_type_;
  }
  if (worker_answer_ != &::google::protobuf::internal::kEmptyString) {
    delete worker_answer_;
  }
  if (error_description_ != &::google::protobuf::internal::kEmptyString) {
    delete error_description_;
  }
  if (message_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete message_decoder_name_;
  }
  if (this != default_instance_) {
  }
}

void Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Answer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Answer_descriptor_;
}

const Answer& Answer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_5fprotocol_2eproto();
  return *default_instance_;
}

Answer* Answer::default_instance_ = NULL;

Answer* Answer::New() const {
  return new Answer;
}

void Answer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_answer_status()) {
      if (answer_status_ != &::google::protobuf::internal::kEmptyString) {
        answer_status_->clear();
      }
    }
    message_id_ = 0;
    if (has_message_type()) {
      if (message_type_ != &::google::protobuf::internal::kEmptyString) {
        message_type_->clear();
      }
    }
    if (has_worker_answer()) {
      if (worker_answer_ != &::google::protobuf::internal::kEmptyString) {
        worker_answer_->clear();
      }
    }
    if (has_error_description()) {
      if (error_description_ != &::google::protobuf::internal::kEmptyString) {
        error_description_->clear();
      }
    }
    if (has_message_decoder_name()) {
      if (message_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
        message_decoder_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string answer_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer_status().data(), this->answer_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }

      // optional int32 message_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message_type;
        break;
      }

      // optional string message_type = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_worker_answer;
        break;
      }

      // optional bytes worker_answer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker_answer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_description;
        break;
      }

      // optional string error_description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_description().data(), this->error_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_message_decoder_name;
        break;
      }

      // optional string message_decoder_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_decoder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_decoder_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_decoder_name().data(), this->message_decoder_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string answer_status = 1;
  if (has_answer_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_status().data(), this->answer_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->answer_status(), output);
  }

  // optional int32 message_id = 2 [default = 0];
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->message_id(), output);
  }

  // optional string message_type = 3 [default = ""];
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message_type(), output);
  }

  // optional bytes worker_answer = 4;
  if (has_worker_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->worker_answer(), output);
  }

  // optional string error_description = 5;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_description().data(), this->error_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_description(), output);
  }

  // optional string message_decoder_name = 6;
  if (has_message_decoder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_decoder_name().data(), this->message_decoder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->message_decoder_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Answer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string answer_status = 1;
  if (has_answer_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer_status().data(), this->answer_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer_status(), target);
  }

  // optional int32 message_id = 2 [default = 0];
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->message_id(), target);
  }

  // optional string message_type = 3 [default = ""];
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_type(), target);
  }

  // optional bytes worker_answer = 4;
  if (has_worker_answer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->worker_answer(), target);
  }

  // optional string error_description = 5;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_description().data(), this->error_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_description(), target);
  }

  // optional string message_decoder_name = 6;
  if (has_message_decoder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_decoder_name().data(), this->message_decoder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message_decoder_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Answer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string answer_status = 1;
    if (has_answer_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer_status());
    }

    // optional int32 message_id = 2 [default = 0];
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // optional string message_type = 3 [default = ""];
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // optional bytes worker_answer = 4;
    if (has_worker_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker_answer());
    }

    // optional string error_description = 5;
    if (has_error_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_description());
    }

    // optional string message_decoder_name = 6;
    if (has_message_decoder_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_decoder_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Answer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Answer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Answer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Answer::MergeFrom(const Answer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer_status()) {
      set_answer_status(from.answer_status());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_worker_answer()) {
      set_worker_answer(from.worker_answer());
    }
    if (from.has_error_description()) {
      set_error_description(from.error_description());
    }
    if (from.has_message_decoder_name()) {
      set_message_decoder_name(from.message_decoder_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Answer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Answer::CopyFrom(const Answer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Answer::Swap(Answer* other) {
  if (other != this) {
    std::swap(answer_status_, other->answer_status_);
    std::swap(message_id_, other->message_id_);
    std::swap(message_type_, other->message_type_);
    std::swap(worker_answer_, other->worker_answer_);
    std::swap(error_description_, other->error_description_);
    std::swap(message_decoder_name_, other->message_decoder_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Answer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Answer_descriptor_;
  metadata.reflection = Answer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProviderMsg::kMessageTypeFieldNumber;
const int ProviderMsg::kInputFieldNumber;
const int ProviderMsg::kFuseIdFieldNumber;
#endif  // !_MSC_VER

ProviderMsg::ProviderMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProviderMsg::InitAsDefaultInstance() {
}

ProviderMsg::ProviderMsg(const ProviderMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProviderMsg::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fuse_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProviderMsg::~ProviderMsg() {
  SharedDtor();
}

void ProviderMsg::SharedDtor() {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    delete message_type_;
  }
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fuse_id_;
  }
  if (this != default_instance_) {
  }
}

void ProviderMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProviderMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProviderMsg_descriptor_;
}

const ProviderMsg& ProviderMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_5fprotocol_2eproto();
  return *default_instance_;
}

ProviderMsg* ProviderMsg::default_instance_ = NULL;

ProviderMsg* ProviderMsg::New() const {
  return new ProviderMsg;
}

void ProviderMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_type()) {
      if (message_type_ != &::google::protobuf::internal::kEmptyString) {
        message_type_->clear();
      }
    }
    if (has_input()) {
      if (input_ != &::google::protobuf::internal::kEmptyString) {
        input_->clear();
      }
    }
    if (has_fuse_id()) {
      if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
        fuse_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProviderMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // required bytes input = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fuse_id;
        break;
      }

      // optional bytes fuse_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fuse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fuse_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProviderMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_type(), output);
  }

  // required bytes input = 2;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->input(), output);
  }

  // optional bytes fuse_id = 3;
  if (has_fuse_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->fuse_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProviderMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_type(), target);
  }

  // required bytes input = 2;
  if (has_input()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->input(), target);
  }

  // optional bytes fuse_id = 3;
  if (has_fuse_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->fuse_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProviderMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // required bytes input = 2;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->input());
    }

    // optional bytes fuse_id = 3;
    if (has_fuse_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fuse_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProviderMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProviderMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProviderMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProviderMsg::MergeFrom(const ProviderMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_input()) {
      set_input(from.input());
    }
    if (from.has_fuse_id()) {
      set_fuse_id(from.fuse_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProviderMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderMsg::CopyFrom(const ProviderMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProviderMsg::Swap(ProviderMsg* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(input_, other->input_);
    std::swap(fuse_id_, other->fuse_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProviderMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProviderMsg_descriptor_;
  metadata.reflection = ProviderMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Atom::kValueFieldNumber;
#endif  // !_MSC_VER

Atom::Atom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom::InitAsDefaultInstance() {
}

Atom::Atom(const Atom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom::~Atom() {
  SharedDtor();
}

void Atom::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Atom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_descriptor_;
}

const Atom& Atom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_5fprotocol_2eproto();
  return *default_instance_;
}

Atom* Atom::default_instance_ = NULL;

Atom* Atom::New() const {
  return new Atom;
}

void Atom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom::MergeFrom(const Atom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom::CopyFrom(const Atom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Atom::Swap(Atom* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_descriptor_;
  metadata.reflection = Atom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication_protocol
}  // namespace protocol
}  // namespace veil

// @@protoc_insertion_point(global_scope)
