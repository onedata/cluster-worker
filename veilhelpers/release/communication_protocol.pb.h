// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication_protocol.proto

#ifndef PROTOBUF_communication_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_communication_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace veil {
namespace protocol {
namespace communication_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_communication_5fprotocol_2eproto();
void protobuf_AssignDesc_communication_5fprotocol_2eproto();
void protobuf_ShutdownFile_communication_5fprotocol_2eproto();

class ClusterMsg;
class Answer;
class ProviderMsg;
class Atom;

// ===================================================================

class ClusterMsg : public ::google::protobuf::Message {
 public:
  ClusterMsg();
  virtual ~ClusterMsg();

  ClusterMsg(const ClusterMsg& from);

  inline ClusterMsg& operator=(const ClusterMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterMsg& default_instance();

  void Swap(ClusterMsg* other);

  // implements Message ----------------------------------------------

  ClusterMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterMsg& from);
  void MergeFrom(const ClusterMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string module_name = 1;
  inline bool has_module_name() const;
  inline void clear_module_name();
  static const int kModuleNameFieldNumber = 1;
  inline const ::std::string& module_name() const;
  inline void set_module_name(const ::std::string& value);
  inline void set_module_name(const char* value);
  inline void set_module_name(const char* value, size_t size);
  inline ::std::string* mutable_module_name();
  inline ::std::string* release_module_name();
  inline void set_allocated_module_name(::std::string* module_name);

  // required string message_type = 2;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 2;
  inline const ::std::string& message_type() const;
  inline void set_message_type(const ::std::string& value);
  inline void set_message_type(const char* value);
  inline void set_message_type(const char* value, size_t size);
  inline ::std::string* mutable_message_type();
  inline ::std::string* release_message_type();
  inline void set_allocated_message_type(::std::string* message_type);

  // required string message_decoder_name = 3;
  inline bool has_message_decoder_name() const;
  inline void clear_message_decoder_name();
  static const int kMessageDecoderNameFieldNumber = 3;
  inline const ::std::string& message_decoder_name() const;
  inline void set_message_decoder_name(const ::std::string& value);
  inline void set_message_decoder_name(const char* value);
  inline void set_message_decoder_name(const char* value, size_t size);
  inline ::std::string* mutable_message_decoder_name();
  inline ::std::string* release_message_decoder_name();
  inline void set_allocated_message_decoder_name(::std::string* message_decoder_name);

  // required string answer_type = 4;
  inline bool has_answer_type() const;
  inline void clear_answer_type();
  static const int kAnswerTypeFieldNumber = 4;
  inline const ::std::string& answer_type() const;
  inline void set_answer_type(const ::std::string& value);
  inline void set_answer_type(const char* value);
  inline void set_answer_type(const char* value, size_t size);
  inline ::std::string* mutable_answer_type();
  inline ::std::string* release_answer_type();
  inline void set_allocated_answer_type(::std::string* answer_type);

  // required string answer_decoder_name = 5;
  inline bool has_answer_decoder_name() const;
  inline void clear_answer_decoder_name();
  static const int kAnswerDecoderNameFieldNumber = 5;
  inline const ::std::string& answer_decoder_name() const;
  inline void set_answer_decoder_name(const ::std::string& value);
  inline void set_answer_decoder_name(const char* value);
  inline void set_answer_decoder_name(const char* value, size_t size);
  inline ::std::string* mutable_answer_decoder_name();
  inline ::std::string* release_answer_decoder_name();
  inline void set_allocated_answer_decoder_name(::std::string* answer_decoder_name);

  // required bool synch = 6;
  inline bool has_synch() const;
  inline void clear_synch();
  static const int kSynchFieldNumber = 6;
  inline bool synch() const;
  inline void set_synch(bool value);

  // required int32 protocol_version = 7;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 7;
  inline ::google::protobuf::int32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::int32 value);

  // optional int32 message_id = 8 [default = 0];
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 8;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);

  // optional bytes input = 9;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 9;
  inline const ::std::string& input() const;
  inline void set_input(const ::std::string& value);
  inline void set_input(const char* value);
  inline void set_input(const void* value, size_t size);
  inline ::std::string* mutable_input();
  inline ::std::string* release_input();
  inline void set_allocated_input(::std::string* input);

  // optional bytes global_user_id = 10;
  inline bool has_global_user_id() const;
  inline void clear_global_user_id();
  static const int kGlobalUserIdFieldNumber = 10;
  inline const ::std::string& global_user_id() const;
  inline void set_global_user_id(const ::std::string& value);
  inline void set_global_user_id(const char* value);
  inline void set_global_user_id(const void* value, size_t size);
  inline ::std::string* mutable_global_user_id();
  inline ::std::string* release_global_user_id();
  inline void set_allocated_global_user_id(::std::string* global_user_id);

  // optional bytes token_hash = 11;
  inline bool has_token_hash() const;
  inline void clear_token_hash();
  static const int kTokenHashFieldNumber = 11;
  inline const ::std::string& token_hash() const;
  inline void set_token_hash(const ::std::string& value);
  inline void set_token_hash(const char* value);
  inline void set_token_hash(const void* value, size_t size);
  inline ::std::string* mutable_token_hash();
  inline ::std::string* release_token_hash();
  inline void set_allocated_token_hash(::std::string* token_hash);

  // @@protoc_insertion_point(class_scope:veil.protocol.communication_protocol.ClusterMsg)
 private:
  inline void set_has_module_name();
  inline void clear_has_module_name();
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_message_decoder_name();
  inline void clear_has_message_decoder_name();
  inline void set_has_answer_type();
  inline void clear_has_answer_type();
  inline void set_has_answer_decoder_name();
  inline void clear_has_answer_decoder_name();
  inline void set_has_synch();
  inline void clear_has_synch();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_global_user_id();
  inline void clear_has_global_user_id();
  inline void set_has_token_hash();
  inline void clear_has_token_hash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* module_name_;
  ::std::string* message_type_;
  ::std::string* message_decoder_name_;
  ::std::string* answer_type_;
  ::std::string* answer_decoder_name_;
  bool synch_;
  ::google::protobuf::int32 protocol_version_;
  ::std::string* input_;
  ::std::string* global_user_id_;
  ::std::string* token_hash_;
  ::google::protobuf::int32 message_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_communication_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_communication_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_communication_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ClusterMsg* default_instance_;
};
// -------------------------------------------------------------------

class Answer : public ::google::protobuf::Message {
 public:
  Answer();
  virtual ~Answer();

  Answer(const Answer& from);

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Answer& default_instance();

  void Swap(Answer* other);

  // implements Message ----------------------------------------------

  Answer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string answer_status = 1;
  inline bool has_answer_status() const;
  inline void clear_answer_status();
  static const int kAnswerStatusFieldNumber = 1;
  inline const ::std::string& answer_status() const;
  inline void set_answer_status(const ::std::string& value);
  inline void set_answer_status(const char* value);
  inline void set_answer_status(const char* value, size_t size);
  inline ::std::string* mutable_answer_status();
  inline ::std::string* release_answer_status();
  inline void set_allocated_answer_status(::std::string* answer_status);

  // optional int32 message_id = 2 [default = 0];
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);

  // optional string message_type = 3 [default = ""];
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 3;
  inline const ::std::string& message_type() const;
  inline void set_message_type(const ::std::string& value);
  inline void set_message_type(const char* value);
  inline void set_message_type(const char* value, size_t size);
  inline ::std::string* mutable_message_type();
  inline ::std::string* release_message_type();
  inline void set_allocated_message_type(::std::string* message_type);

  // optional bytes worker_answer = 4;
  inline bool has_worker_answer() const;
  inline void clear_worker_answer();
  static const int kWorkerAnswerFieldNumber = 4;
  inline const ::std::string& worker_answer() const;
  inline void set_worker_answer(const ::std::string& value);
  inline void set_worker_answer(const char* value);
  inline void set_worker_answer(const void* value, size_t size);
  inline ::std::string* mutable_worker_answer();
  inline ::std::string* release_worker_answer();
  inline void set_allocated_worker_answer(::std::string* worker_answer);

  // optional string error_description = 5;
  inline bool has_error_description() const;
  inline void clear_error_description();
  static const int kErrorDescriptionFieldNumber = 5;
  inline const ::std::string& error_description() const;
  inline void set_error_description(const ::std::string& value);
  inline void set_error_description(const char* value);
  inline void set_error_description(const char* value, size_t size);
  inline ::std::string* mutable_error_description();
  inline ::std::string* release_error_description();
  inline void set_allocated_error_description(::std::string* error_description);

  // optional string message_decoder_name = 6;
  inline bool has_message_decoder_name() const;
  inline void clear_message_decoder_name();
  static const int kMessageDecoderNameFieldNumber = 6;
  inline const ::std::string& message_decoder_name() const;
  inline void set_message_decoder_name(const ::std::string& value);
  inline void set_message_decoder_name(const char* value);
  inline void set_message_decoder_name(const char* value, size_t size);
  inline ::std::string* mutable_message_decoder_name();
  inline ::std::string* release_message_decoder_name();
  inline void set_allocated_message_decoder_name(::std::string* message_decoder_name);

  // @@protoc_insertion_point(class_scope:veil.protocol.communication_protocol.Answer)
 private:
  inline void set_has_answer_status();
  inline void clear_has_answer_status();
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_worker_answer();
  inline void clear_has_worker_answer();
  inline void set_has_error_description();
  inline void clear_has_error_description();
  inline void set_has_message_decoder_name();
  inline void clear_has_message_decoder_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* answer_status_;
  ::std::string* message_type_;
  ::std::string* worker_answer_;
  ::std::string* error_description_;
  ::std::string* message_decoder_name_;
  ::google::protobuf::int32 message_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_communication_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_communication_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_communication_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Answer* default_instance_;
};
// -------------------------------------------------------------------

class ProviderMsg : public ::google::protobuf::Message {
 public:
  ProviderMsg();
  virtual ~ProviderMsg();

  ProviderMsg(const ProviderMsg& from);

  inline ProviderMsg& operator=(const ProviderMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProviderMsg& default_instance();

  void Swap(ProviderMsg* other);

  // implements Message ----------------------------------------------

  ProviderMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProviderMsg& from);
  void MergeFrom(const ProviderMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message_type = 1;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  inline const ::std::string& message_type() const;
  inline void set_message_type(const ::std::string& value);
  inline void set_message_type(const char* value);
  inline void set_message_type(const char* value, size_t size);
  inline ::std::string* mutable_message_type();
  inline ::std::string* release_message_type();
  inline void set_allocated_message_type(::std::string* message_type);

  // required bytes input = 2;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 2;
  inline const ::std::string& input() const;
  inline void set_input(const ::std::string& value);
  inline void set_input(const char* value);
  inline void set_input(const void* value, size_t size);
  inline ::std::string* mutable_input();
  inline ::std::string* release_input();
  inline void set_allocated_input(::std::string* input);

  // optional bytes fuse_id = 3;
  inline bool has_fuse_id() const;
  inline void clear_fuse_id();
  static const int kFuseIdFieldNumber = 3;
  inline const ::std::string& fuse_id() const;
  inline void set_fuse_id(const ::std::string& value);
  inline void set_fuse_id(const char* value);
  inline void set_fuse_id(const void* value, size_t size);
  inline ::std::string* mutable_fuse_id();
  inline ::std::string* release_fuse_id();
  inline void set_allocated_fuse_id(::std::string* fuse_id);

  // @@protoc_insertion_point(class_scope:veil.protocol.communication_protocol.ProviderMsg)
 private:
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_fuse_id();
  inline void clear_has_fuse_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_type_;
  ::std::string* input_;
  ::std::string* fuse_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_communication_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_communication_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_communication_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ProviderMsg* default_instance_;
};
// -------------------------------------------------------------------

class Atom : public ::google::protobuf::Message {
 public:
  Atom();
  virtual ~Atom();

  Atom(const Atom& from);

  inline Atom& operator=(const Atom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom& default_instance();

  void Swap(Atom* other);

  // implements Message ----------------------------------------------

  Atom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom& from);
  void MergeFrom(const Atom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:veil.protocol.communication_protocol.Atom)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_communication_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_communication_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_communication_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Atom* default_instance_;
};
// ===================================================================


// ===================================================================

// ClusterMsg

// required string module_name = 1;
inline bool ClusterMsg::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterMsg::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterMsg::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterMsg::clear_module_name() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    module_name_->clear();
  }
  clear_has_module_name();
}
inline const ::std::string& ClusterMsg::module_name() const {
  return *module_name_;
}
inline void ClusterMsg::set_module_name(const ::std::string& value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void ClusterMsg::set_module_name(const char* value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void ClusterMsg::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClusterMsg::mutable_module_name() {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  return module_name_;
}
inline ::std::string* ClusterMsg::release_module_name() {
  clear_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_name_;
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClusterMsg::set_allocated_module_name(::std::string* module_name) {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (module_name) {
    set_has_module_name();
    module_name_ = module_name;
  } else {
    clear_has_module_name();
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string message_type = 2;
inline bool ClusterMsg::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClusterMsg::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClusterMsg::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClusterMsg::clear_message_type() {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    message_type_->clear();
  }
  clear_has_message_type();
}
inline const ::std::string& ClusterMsg::message_type() const {
  return *message_type_;
}
inline void ClusterMsg::set_message_type(const ::std::string& value) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(value);
}
inline void ClusterMsg::set_message_type(const char* value) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(value);
}
inline void ClusterMsg::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClusterMsg::mutable_message_type() {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  return message_type_;
}
inline ::std::string* ClusterMsg::release_message_type() {
  clear_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_type_;
    message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClusterMsg::set_allocated_message_type(::std::string* message_type) {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    delete message_type_;
  }
  if (message_type) {
    set_has_message_type();
    message_type_ = message_type;
  } else {
    clear_has_message_type();
    message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string message_decoder_name = 3;
inline bool ClusterMsg::has_message_decoder_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClusterMsg::set_has_message_decoder_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClusterMsg::clear_has_message_decoder_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClusterMsg::clear_message_decoder_name() {
  if (message_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_->clear();
  }
  clear_has_message_decoder_name();
}
inline const ::std::string& ClusterMsg::message_decoder_name() const {
  return *message_decoder_name_;
}
inline void ClusterMsg::set_message_decoder_name(const ::std::string& value) {
  set_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_ = new ::std::string;
  }
  message_decoder_name_->assign(value);
}
inline void ClusterMsg::set_message_decoder_name(const char* value) {
  set_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_ = new ::std::string;
  }
  message_decoder_name_->assign(value);
}
inline void ClusterMsg::set_message_decoder_name(const char* value, size_t size) {
  set_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_ = new ::std::string;
  }
  message_decoder_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClusterMsg::mutable_message_decoder_name() {
  set_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_ = new ::std::string;
  }
  return message_decoder_name_;
}
inline ::std::string* ClusterMsg::release_message_decoder_name() {
  clear_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_decoder_name_;
    message_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClusterMsg::set_allocated_message_decoder_name(::std::string* message_decoder_name) {
  if (message_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete message_decoder_name_;
  }
  if (message_decoder_name) {
    set_has_message_decoder_name();
    message_decoder_name_ = message_decoder_name;
  } else {
    clear_has_message_decoder_name();
    message_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string answer_type = 4;
inline bool ClusterMsg::has_answer_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClusterMsg::set_has_answer_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClusterMsg::clear_has_answer_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClusterMsg::clear_answer_type() {
  if (answer_type_ != &::google::protobuf::internal::kEmptyString) {
    answer_type_->clear();
  }
  clear_has_answer_type();
}
inline const ::std::string& ClusterMsg::answer_type() const {
  return *answer_type_;
}
inline void ClusterMsg::set_answer_type(const ::std::string& value) {
  set_has_answer_type();
  if (answer_type_ == &::google::protobuf::internal::kEmptyString) {
    answer_type_ = new ::std::string;
  }
  answer_type_->assign(value);
}
inline void ClusterMsg::set_answer_type(const char* value) {
  set_has_answer_type();
  if (answer_type_ == &::google::protobuf::internal::kEmptyString) {
    answer_type_ = new ::std::string;
  }
  answer_type_->assign(value);
}
inline void ClusterMsg::set_answer_type(const char* value, size_t size) {
  set_has_answer_type();
  if (answer_type_ == &::google::protobuf::internal::kEmptyString) {
    answer_type_ = new ::std::string;
  }
  answer_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClusterMsg::mutable_answer_type() {
  set_has_answer_type();
  if (answer_type_ == &::google::protobuf::internal::kEmptyString) {
    answer_type_ = new ::std::string;
  }
  return answer_type_;
}
inline ::std::string* ClusterMsg::release_answer_type() {
  clear_has_answer_type();
  if (answer_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = answer_type_;
    answer_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClusterMsg::set_allocated_answer_type(::std::string* answer_type) {
  if (answer_type_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_type_;
  }
  if (answer_type) {
    set_has_answer_type();
    answer_type_ = answer_type;
  } else {
    clear_has_answer_type();
    answer_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string answer_decoder_name = 5;
inline bool ClusterMsg::has_answer_decoder_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClusterMsg::set_has_answer_decoder_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClusterMsg::clear_has_answer_decoder_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClusterMsg::clear_answer_decoder_name() {
  if (answer_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    answer_decoder_name_->clear();
  }
  clear_has_answer_decoder_name();
}
inline const ::std::string& ClusterMsg::answer_decoder_name() const {
  return *answer_decoder_name_;
}
inline void ClusterMsg::set_answer_decoder_name(const ::std::string& value) {
  set_has_answer_decoder_name();
  if (answer_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    answer_decoder_name_ = new ::std::string;
  }
  answer_decoder_name_->assign(value);
}
inline void ClusterMsg::set_answer_decoder_name(const char* value) {
  set_has_answer_decoder_name();
  if (answer_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    answer_decoder_name_ = new ::std::string;
  }
  answer_decoder_name_->assign(value);
}
inline void ClusterMsg::set_answer_decoder_name(const char* value, size_t size) {
  set_has_answer_decoder_name();
  if (answer_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    answer_decoder_name_ = new ::std::string;
  }
  answer_decoder_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClusterMsg::mutable_answer_decoder_name() {
  set_has_answer_decoder_name();
  if (answer_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    answer_decoder_name_ = new ::std::string;
  }
  return answer_decoder_name_;
}
inline ::std::string* ClusterMsg::release_answer_decoder_name() {
  clear_has_answer_decoder_name();
  if (answer_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = answer_decoder_name_;
    answer_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClusterMsg::set_allocated_answer_decoder_name(::std::string* answer_decoder_name) {
  if (answer_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_decoder_name_;
  }
  if (answer_decoder_name) {
    set_has_answer_decoder_name();
    answer_decoder_name_ = answer_decoder_name;
  } else {
    clear_has_answer_decoder_name();
    answer_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool synch = 6;
inline bool ClusterMsg::has_synch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClusterMsg::set_has_synch() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClusterMsg::clear_has_synch() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClusterMsg::clear_synch() {
  synch_ = false;
  clear_has_synch();
}
inline bool ClusterMsg::synch() const {
  return synch_;
}
inline void ClusterMsg::set_synch(bool value) {
  set_has_synch();
  synch_ = value;
}

// required int32 protocol_version = 7;
inline bool ClusterMsg::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClusterMsg::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClusterMsg::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClusterMsg::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
inline ::google::protobuf::int32 ClusterMsg::protocol_version() const {
  return protocol_version_;
}
inline void ClusterMsg::set_protocol_version(::google::protobuf::int32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// optional int32 message_id = 8 [default = 0];
inline bool ClusterMsg::has_message_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClusterMsg::set_has_message_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClusterMsg::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClusterMsg::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 ClusterMsg::message_id() const {
  return message_id_;
}
inline void ClusterMsg::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// optional bytes input = 9;
inline bool ClusterMsg::has_input() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClusterMsg::set_has_input() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClusterMsg::clear_has_input() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClusterMsg::clear_input() {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    input_->clear();
  }
  clear_has_input();
}
inline const ::std::string& ClusterMsg::input() const {
  return *input_;
}
inline void ClusterMsg::set_input(const ::std::string& value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void ClusterMsg::set_input(const char* value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void ClusterMsg::set_input(const void* value, size_t size) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClusterMsg::mutable_input() {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  return input_;
}
inline ::std::string* ClusterMsg::release_input() {
  clear_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_;
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClusterMsg::set_allocated_input(::std::string* input) {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (input) {
    set_has_input();
    input_ = input;
  } else {
    clear_has_input();
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes global_user_id = 10;
inline bool ClusterMsg::has_global_user_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClusterMsg::set_has_global_user_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClusterMsg::clear_has_global_user_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClusterMsg::clear_global_user_id() {
  if (global_user_id_ != &::google::protobuf::internal::kEmptyString) {
    global_user_id_->clear();
  }
  clear_has_global_user_id();
}
inline const ::std::string& ClusterMsg::global_user_id() const {
  return *global_user_id_;
}
inline void ClusterMsg::set_global_user_id(const ::std::string& value) {
  set_has_global_user_id();
  if (global_user_id_ == &::google::protobuf::internal::kEmptyString) {
    global_user_id_ = new ::std::string;
  }
  global_user_id_->assign(value);
}
inline void ClusterMsg::set_global_user_id(const char* value) {
  set_has_global_user_id();
  if (global_user_id_ == &::google::protobuf::internal::kEmptyString) {
    global_user_id_ = new ::std::string;
  }
  global_user_id_->assign(value);
}
inline void ClusterMsg::set_global_user_id(const void* value, size_t size) {
  set_has_global_user_id();
  if (global_user_id_ == &::google::protobuf::internal::kEmptyString) {
    global_user_id_ = new ::std::string;
  }
  global_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClusterMsg::mutable_global_user_id() {
  set_has_global_user_id();
  if (global_user_id_ == &::google::protobuf::internal::kEmptyString) {
    global_user_id_ = new ::std::string;
  }
  return global_user_id_;
}
inline ::std::string* ClusterMsg::release_global_user_id() {
  clear_has_global_user_id();
  if (global_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = global_user_id_;
    global_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClusterMsg::set_allocated_global_user_id(::std::string* global_user_id) {
  if (global_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete global_user_id_;
  }
  if (global_user_id) {
    set_has_global_user_id();
    global_user_id_ = global_user_id;
  } else {
    clear_has_global_user_id();
    global_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes token_hash = 11;
inline bool ClusterMsg::has_token_hash() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ClusterMsg::set_has_token_hash() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ClusterMsg::clear_has_token_hash() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ClusterMsg::clear_token_hash() {
  if (token_hash_ != &::google::protobuf::internal::kEmptyString) {
    token_hash_->clear();
  }
  clear_has_token_hash();
}
inline const ::std::string& ClusterMsg::token_hash() const {
  return *token_hash_;
}
inline void ClusterMsg::set_token_hash(const ::std::string& value) {
  set_has_token_hash();
  if (token_hash_ == &::google::protobuf::internal::kEmptyString) {
    token_hash_ = new ::std::string;
  }
  token_hash_->assign(value);
}
inline void ClusterMsg::set_token_hash(const char* value) {
  set_has_token_hash();
  if (token_hash_ == &::google::protobuf::internal::kEmptyString) {
    token_hash_ = new ::std::string;
  }
  token_hash_->assign(value);
}
inline void ClusterMsg::set_token_hash(const void* value, size_t size) {
  set_has_token_hash();
  if (token_hash_ == &::google::protobuf::internal::kEmptyString) {
    token_hash_ = new ::std::string;
  }
  token_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClusterMsg::mutable_token_hash() {
  set_has_token_hash();
  if (token_hash_ == &::google::protobuf::internal::kEmptyString) {
    token_hash_ = new ::std::string;
  }
  return token_hash_;
}
inline ::std::string* ClusterMsg::release_token_hash() {
  clear_has_token_hash();
  if (token_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_hash_;
    token_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClusterMsg::set_allocated_token_hash(::std::string* token_hash) {
  if (token_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete token_hash_;
  }
  if (token_hash) {
    set_has_token_hash();
    token_hash_ = token_hash;
  } else {
    clear_has_token_hash();
    token_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Answer

// required string answer_status = 1;
inline bool Answer::has_answer_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Answer::set_has_answer_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Answer::clear_has_answer_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Answer::clear_answer_status() {
  if (answer_status_ != &::google::protobuf::internal::kEmptyString) {
    answer_status_->clear();
  }
  clear_has_answer_status();
}
inline const ::std::string& Answer::answer_status() const {
  return *answer_status_;
}
inline void Answer::set_answer_status(const ::std::string& value) {
  set_has_answer_status();
  if (answer_status_ == &::google::protobuf::internal::kEmptyString) {
    answer_status_ = new ::std::string;
  }
  answer_status_->assign(value);
}
inline void Answer::set_answer_status(const char* value) {
  set_has_answer_status();
  if (answer_status_ == &::google::protobuf::internal::kEmptyString) {
    answer_status_ = new ::std::string;
  }
  answer_status_->assign(value);
}
inline void Answer::set_answer_status(const char* value, size_t size) {
  set_has_answer_status();
  if (answer_status_ == &::google::protobuf::internal::kEmptyString) {
    answer_status_ = new ::std::string;
  }
  answer_status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_answer_status() {
  set_has_answer_status();
  if (answer_status_ == &::google::protobuf::internal::kEmptyString) {
    answer_status_ = new ::std::string;
  }
  return answer_status_;
}
inline ::std::string* Answer::release_answer_status() {
  clear_has_answer_status();
  if (answer_status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = answer_status_;
    answer_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Answer::set_allocated_answer_status(::std::string* answer_status) {
  if (answer_status_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_status_;
  }
  if (answer_status) {
    set_has_answer_status();
    answer_status_ = answer_status;
  } else {
    clear_has_answer_status();
    answer_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 message_id = 2 [default = 0];
inline bool Answer::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Answer::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Answer::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Answer::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 Answer::message_id() const {
  return message_id_;
}
inline void Answer::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// optional string message_type = 3 [default = ""];
inline bool Answer::has_message_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Answer::set_has_message_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Answer::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Answer::clear_message_type() {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    message_type_->clear();
  }
  clear_has_message_type();
}
inline const ::std::string& Answer::message_type() const {
  return *message_type_;
}
inline void Answer::set_message_type(const ::std::string& value) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(value);
}
inline void Answer::set_message_type(const char* value) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(value);
}
inline void Answer::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_message_type() {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  return message_type_;
}
inline ::std::string* Answer::release_message_type() {
  clear_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_type_;
    message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Answer::set_allocated_message_type(::std::string* message_type) {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    delete message_type_;
  }
  if (message_type) {
    set_has_message_type();
    message_type_ = message_type;
  } else {
    clear_has_message_type();
    message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes worker_answer = 4;
inline bool Answer::has_worker_answer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Answer::set_has_worker_answer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Answer::clear_has_worker_answer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Answer::clear_worker_answer() {
  if (worker_answer_ != &::google::protobuf::internal::kEmptyString) {
    worker_answer_->clear();
  }
  clear_has_worker_answer();
}
inline const ::std::string& Answer::worker_answer() const {
  return *worker_answer_;
}
inline void Answer::set_worker_answer(const ::std::string& value) {
  set_has_worker_answer();
  if (worker_answer_ == &::google::protobuf::internal::kEmptyString) {
    worker_answer_ = new ::std::string;
  }
  worker_answer_->assign(value);
}
inline void Answer::set_worker_answer(const char* value) {
  set_has_worker_answer();
  if (worker_answer_ == &::google::protobuf::internal::kEmptyString) {
    worker_answer_ = new ::std::string;
  }
  worker_answer_->assign(value);
}
inline void Answer::set_worker_answer(const void* value, size_t size) {
  set_has_worker_answer();
  if (worker_answer_ == &::google::protobuf::internal::kEmptyString) {
    worker_answer_ = new ::std::string;
  }
  worker_answer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_worker_answer() {
  set_has_worker_answer();
  if (worker_answer_ == &::google::protobuf::internal::kEmptyString) {
    worker_answer_ = new ::std::string;
  }
  return worker_answer_;
}
inline ::std::string* Answer::release_worker_answer() {
  clear_has_worker_answer();
  if (worker_answer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = worker_answer_;
    worker_answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Answer::set_allocated_worker_answer(::std::string* worker_answer) {
  if (worker_answer_ != &::google::protobuf::internal::kEmptyString) {
    delete worker_answer_;
  }
  if (worker_answer) {
    set_has_worker_answer();
    worker_answer_ = worker_answer;
  } else {
    clear_has_worker_answer();
    worker_answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string error_description = 5;
inline bool Answer::has_error_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Answer::set_has_error_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Answer::clear_has_error_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Answer::clear_error_description() {
  if (error_description_ != &::google::protobuf::internal::kEmptyString) {
    error_description_->clear();
  }
  clear_has_error_description();
}
inline const ::std::string& Answer::error_description() const {
  return *error_description_;
}
inline void Answer::set_error_description(const ::std::string& value) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::kEmptyString) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(value);
}
inline void Answer::set_error_description(const char* value) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::kEmptyString) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(value);
}
inline void Answer::set_error_description(const char* value, size_t size) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::kEmptyString) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_error_description() {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::kEmptyString) {
    error_description_ = new ::std::string;
  }
  return error_description_;
}
inline ::std::string* Answer::release_error_description() {
  clear_has_error_description();
  if (error_description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_description_;
    error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Answer::set_allocated_error_description(::std::string* error_description) {
  if (error_description_ != &::google::protobuf::internal::kEmptyString) {
    delete error_description_;
  }
  if (error_description) {
    set_has_error_description();
    error_description_ = error_description;
  } else {
    clear_has_error_description();
    error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string message_decoder_name = 6;
inline bool Answer::has_message_decoder_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Answer::set_has_message_decoder_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Answer::clear_has_message_decoder_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Answer::clear_message_decoder_name() {
  if (message_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_->clear();
  }
  clear_has_message_decoder_name();
}
inline const ::std::string& Answer::message_decoder_name() const {
  return *message_decoder_name_;
}
inline void Answer::set_message_decoder_name(const ::std::string& value) {
  set_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_ = new ::std::string;
  }
  message_decoder_name_->assign(value);
}
inline void Answer::set_message_decoder_name(const char* value) {
  set_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_ = new ::std::string;
  }
  message_decoder_name_->assign(value);
}
inline void Answer::set_message_decoder_name(const char* value, size_t size) {
  set_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_ = new ::std::string;
  }
  message_decoder_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Answer::mutable_message_decoder_name() {
  set_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    message_decoder_name_ = new ::std::string;
  }
  return message_decoder_name_;
}
inline ::std::string* Answer::release_message_decoder_name() {
  clear_has_message_decoder_name();
  if (message_decoder_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_decoder_name_;
    message_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Answer::set_allocated_message_decoder_name(::std::string* message_decoder_name) {
  if (message_decoder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete message_decoder_name_;
  }
  if (message_decoder_name) {
    set_has_message_decoder_name();
    message_decoder_name_ = message_decoder_name;
  } else {
    clear_has_message_decoder_name();
    message_decoder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProviderMsg

// required string message_type = 1;
inline bool ProviderMsg::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProviderMsg::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProviderMsg::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProviderMsg::clear_message_type() {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    message_type_->clear();
  }
  clear_has_message_type();
}
inline const ::std::string& ProviderMsg::message_type() const {
  return *message_type_;
}
inline void ProviderMsg::set_message_type(const ::std::string& value) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(value);
}
inline void ProviderMsg::set_message_type(const char* value) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(value);
}
inline void ProviderMsg::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProviderMsg::mutable_message_type() {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  return message_type_;
}
inline ::std::string* ProviderMsg::release_message_type() {
  clear_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_type_;
    message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProviderMsg::set_allocated_message_type(::std::string* message_type) {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    delete message_type_;
  }
  if (message_type) {
    set_has_message_type();
    message_type_ = message_type;
  } else {
    clear_has_message_type();
    message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes input = 2;
inline bool ProviderMsg::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProviderMsg::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProviderMsg::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProviderMsg::clear_input() {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    input_->clear();
  }
  clear_has_input();
}
inline const ::std::string& ProviderMsg::input() const {
  return *input_;
}
inline void ProviderMsg::set_input(const ::std::string& value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void ProviderMsg::set_input(const char* value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void ProviderMsg::set_input(const void* value, size_t size) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProviderMsg::mutable_input() {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  return input_;
}
inline ::std::string* ProviderMsg::release_input() {
  clear_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_;
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProviderMsg::set_allocated_input(::std::string* input) {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (input) {
    set_has_input();
    input_ = input;
  } else {
    clear_has_input();
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes fuse_id = 3;
inline bool ProviderMsg::has_fuse_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProviderMsg::set_has_fuse_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProviderMsg::clear_has_fuse_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProviderMsg::clear_fuse_id() {
  if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
    fuse_id_->clear();
  }
  clear_has_fuse_id();
}
inline const ::std::string& ProviderMsg::fuse_id() const {
  return *fuse_id_;
}
inline void ProviderMsg::set_fuse_id(const ::std::string& value) {
  set_has_fuse_id();
  if (fuse_id_ == &::google::protobuf::internal::kEmptyString) {
    fuse_id_ = new ::std::string;
  }
  fuse_id_->assign(value);
}
inline void ProviderMsg::set_fuse_id(const char* value) {
  set_has_fuse_id();
  if (fuse_id_ == &::google::protobuf::internal::kEmptyString) {
    fuse_id_ = new ::std::string;
  }
  fuse_id_->assign(value);
}
inline void ProviderMsg::set_fuse_id(const void* value, size_t size) {
  set_has_fuse_id();
  if (fuse_id_ == &::google::protobuf::internal::kEmptyString) {
    fuse_id_ = new ::std::string;
  }
  fuse_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProviderMsg::mutable_fuse_id() {
  set_has_fuse_id();
  if (fuse_id_ == &::google::protobuf::internal::kEmptyString) {
    fuse_id_ = new ::std::string;
  }
  return fuse_id_;
}
inline ::std::string* ProviderMsg::release_fuse_id() {
  clear_has_fuse_id();
  if (fuse_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fuse_id_;
    fuse_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProviderMsg::set_allocated_fuse_id(::std::string* fuse_id) {
  if (fuse_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fuse_id_;
  }
  if (fuse_id) {
    set_has_fuse_id();
    fuse_id_ = fuse_id;
  } else {
    clear_has_fuse_id();
    fuse_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Atom

// required string value = 1;
inline bool Atom::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Atom::value() const {
  return *value_;
}
inline void Atom::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Atom::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Atom::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Atom::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Atom::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication_protocol
}  // namespace protocol
}  // namespace veil

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_communication_5fprotocol_2eproto__INCLUDED
