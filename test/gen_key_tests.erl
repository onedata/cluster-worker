%%%-------------------------------------------------------------------
%%% @author MichaÅ‚ Stanisz
%%% @copyright (C) 2018 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%-------------------------------------------------------------------
%%% @doc This module tests the functionality of couchbase_batch, using eunit tests.
%%% @end
%%%-------------------------------------------------------------------
-module(gen_key_tests).

-ifdef(TEST).

-include("global_definitions.hrl").
-include_lib("eunit/include/eunit.hrl").

%%%===================================================================
%%% Tests description
%%%===================================================================

gen_key_test_() ->
    {timeout, 60, fun test_gen_key/0}.

%%%===================================================================
%%% Test functions
%%%===================================================================

test_gen_key() ->
    lists:foreach(fun(_) -> gen_key_test_base() end, lists:seq(1,10)).

gen_key_test_base() ->
    Repeats = 10000,
    Key = gen_hex(16),
    Times = lists:map(fun(_) ->
        gen_key(<<"seed">>,Key)
    end, lists:seq(0,Repeats)),
    
    TT = lists:foldl(fun(TimesList, AccList) -> 
        lists:map(fun({T, A}) -> T+A end, lists:zip(TimesList, AccList))
    end, [0,0,0,0,0,0], Times),
    
    List = lists:map(fun(T) -> T/Repeats end, TT),
    Total = lists:sum(List),
    ct:print("Init[ns]: ~p~n"
             "Hash update1[ns]: ~p~n"
             "Hash update2[ns]: ~p~n"
             "Hash final[ns]: ~p~n"
             "Hex[ns]: ~p~n"
             "NewHex[ns]: ~p~n"
             "Total[ns]: ~p~n"
             "Hex in Total[%]: ~p"
        ,List ++ [Total, lists:nth(5, List)/Total*100]).

-endif.


%%%===================================================================
%%% Internal
%%%===================================================================

gen_hex(Size) ->
    hex2(crypto:strong_rand_bytes(Size)).

gen_key(Seed, Key) when is_binary(Seed) ->
    Start1 = erlang:monotonic_time(nanosecond),
    Ctx = crypto:hash_init(md5),
    End1 = erlang:monotonic_time(nanosecond),
    
    Start2 = erlang:monotonic_time(nanosecond),
    Ctx2 = crypto:hash_update(Ctx, Seed),
    End2 = erlang:monotonic_time(nanosecond),

    Start3 = erlang:monotonic_time(nanosecond),
    Ctx3 = crypto:hash_update(Ctx2, Key),
    End3 = erlang:monotonic_time(nanosecond),

    Start4 = erlang:monotonic_time(nanosecond),
    Digest = crypto:hash_final(Ctx3),
    End4 = erlang:monotonic_time(nanosecond),
    
    Start = erlang:monotonic_time(nanosecond),
    Hex = hex2(Digest),
    End = erlang:monotonic_time(nanosecond),
    
    StartNew = erlang:monotonic_time(nanosecond),
    bin_to_hex(Digest),
    EndNew = erlang:monotonic_time(nanosecond),
    
    [End1-Start1, End2-Start2, End3-Start3, End4-Start4, End-Start, EndNew-StartNew].


hex2(Digest) ->
    Hex = {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $a, $b, $c, $d, $e, $f},
    <<
        <<(element(B bsr 4 + 1, Hex)), (element(B band 16#0F + 1, Hex))>> ||
        <<B:8>> <= Digest
    >>.

hex1(Digest) -> 
    Hex = {<<"00">>,<<"01">>,<<"02">>,<<"03">>,<<"04">>,<<"05">>,<<"06">>,<<"07">>,
        <<"08">>,<<"09">>,<<"0a">>,<<"0b">>,<<"0c">>,<<"0d">>,<<"0e">>,<<"0f">>,
        <<"10">>,<<"11">>,<<"12">>,<<"13">>,<<"14">>,<<"15">>,<<"16">>,<<"17">>,
        <<"18">>,<<"19">>,<<"1a">>,<<"1b">>,<<"1c">>,<<"1d">>,<<"1e">>,<<"1f">>,
        <<"20">>,<<"21">>,<<"22">>,<<"23">>,<<"24">>,<<"25">>,
        <<"26">>,<<"27">>,<<"28">>,<<"29">>,<<"2a">>,<<"2b">>,
        <<"2c">>,<<"2d">>,<<"2e">>,<<"2f">>,<<"30">>,<<"31">>,
        <<"32">>,<<"33">>,<<"34">>,<<"35">>,<<"36">>,<<"37">>,
        <<"38">>,<<"39">>,<<"3a">>,<<"3b">>,<<"3c">>,<<"3d">>,
        <<"3e">>,<<"3f">>,<<"40">>,<<"41">>,<<"42">>,<<"43">>,
        <<"44">>,<<"45">>,<<"46">>,<<"47">>,<<"48">>,<<"49">>,
        <<"4a">>,<<"4b">>,<<"4c">>,<<"4d">>,<<"4e">>,<<"4f">>,
        <<"50">>,<<"51">>,<<"52">>,<<"53">>,<<"54">>,<<"55">>,
        <<"56">>,<<"57">>,<<"58">>,<<"59">>,<<"5a">>,<<"5b">>,
        <<"5c">>,<<"5d">>,<<"5e">>,<<"5f">>,<<"60">>,<<"61">>,
        <<"62">>,<<"63">>,<<"64">>,<<"65">>,<<"66">>,<<"67">>,
        <<"68">>,<<"69">>,<<"6a">>,<<"6b">>,<<"6c">>,<<"6d">>,
        <<"6e">>,<<"6f">>,<<"70">>,<<"71">>,<<"72">>,<<"73">>,
        <<"74">>,<<"75">>,<<"76">>,<<"77">>,<<"78">>,<<"79">>,
        <<"7a">>,<<"7b">>,<<"7c">>,<<"7d">>,<<"7e">>,<<"7f">>,
        <<"80">>,<<"81">>,<<"82">>,<<"83">>,<<"84">>,<<"85">>,
        <<"86">>,<<"87">>,<<"88">>,<<"89">>,<<"8a">>,<<"8b">>,
        <<"8c">>,<<"8d">>,<<"8e">>,<<"8f">>,<<"90">>,<<"91">>,
        <<"92">>,<<"93">>,<<"94">>,<<"95">>,<<"96">>,<<"97">>,
        <<"98">>,<<"99">>,<<"9a">>,<<"9b">>,<<"9c">>,<<"9d">>,
        <<"9e">>,<<"9f">>,<<"a0">>,<<"a1">>,<<"a2">>,<<"a3">>,
        <<"a4">>,<<"a5">>,<<"a6">>,<<"a7">>,<<"a8">>,<<"a9">>,
        <<"aa">>,<<"ab">>,<<"ac">>,<<"ad">>,<<"ae">>,<<"af">>,
        <<"b0">>,<<"b1">>,<<"b2">>,<<"b3">>,<<"b4">>,<<"b5">>,
        <<"b6">>,<<"b7">>,<<"b8">>,<<"b9">>,<<"ba">>,<<"bb">>,
        <<"bc">>,<<"bd">>,<<"be">>,<<"bf">>,<<"c0">>,<<"c1">>,
        <<"c2">>,<<"c3">>,<<"c4">>,<<"c5">>,<<"c6">>,<<"c7">>,
        <<"c8">>,<<"c9">>,<<"ca">>,<<"cb">>,<<"cc">>,<<"cd">>,
        <<"ce">>,<<"cf">>,<<"d0">>,<<"d1">>,<<"d2">>,<<"d3">>,
        <<"d4">>,<<"d5">>,<<"d6">>,<<"d7">>,<<"d8">>,<<"d9">>,
        <<"da">>,<<"db">>,<<"dc">>,<<"dd">>,<<"de">>,<<"df">>,
        <<"e0">>,<<"e1">>,<<"e2">>,<<"e3">>,<<"e4">>,<<"e5">>,
        <<"e6">>,<<"e7">>,<<"e8">>,<<"e9">>,<<"ea">>,<<"eb">>,
        <<"ec">>,<<"ed">>,<<"ee">>,<<"ef">>,<<"f0">>,<<"f1">>,
        <<"f2">>,<<"f3">>,<<"f4">>,<<"f5">>,<<"f6">>,<<"f7">>,
        <<"f8">>,<<"f9">>,<<"fa">>,<<"fb">>,<<"fc">>,<<"fd">>,
        <<"fe">>,<<"ff">>},
    << (element(B+1, Hex)) || <<B:8>> <= Digest >>.

bin_to_hex(B) when is_binary(B) ->
    bin_to_hex(B, <<>>).

-define(H(X), (hex(X)):16).

bin_to_hex(<<>>, Acc) -> Acc;
bin_to_hex(Bin, Acc) when byte_size(Bin) band 7 =:= 0 ->
    bin_to_hex_(Bin, Acc);
bin_to_hex(<<X:8, Rest/binary>>, Acc) ->
    bin_to_hex(Rest, <<Acc/binary, ?H(X)>>).

bin_to_hex_(<<>>, Acc) -> Acc;
bin_to_hex_(<<A:8, B:8, C:8, D:8, E:8, F:8, G:8, H:8, Rest/binary>>, Acc) ->
    bin_to_hex_(
        Rest,
        <<Acc/binary,
            ?H(A), ?H(B), ?H(C), ?H(D), ?H(E), ?H(F), ?H(G), ?H(H)>>).

hex(X) ->
    element(
        X+1, {16#3030, 16#3031, 16#3032, 16#3033, 16#3034, 16#3035, 16#3036,
            16#3037, 16#3038, 16#3039, 16#3041, 16#3042, 16#3043, 16#3044,
            16#3045, 16#3046, 16#3130, 16#3131, 16#3132, 16#3133, 16#3134,
            16#3135, 16#3136, 16#3137, 16#3138, 16#3139, 16#3141, 16#3142,
            16#3143, 16#3144, 16#3145, 16#3146, 16#3230, 16#3231, 16#3232,
            16#3233, 16#3234, 16#3235, 16#3236, 16#3237, 16#3238, 16#3239,
            16#3241, 16#3242, 16#3243, 16#3244, 16#3245, 16#3246, 16#3330,
            16#3331, 16#3332, 16#3333, 16#3334, 16#3335, 16#3336, 16#3337,
            16#3338, 16#3339, 16#3341, 16#3342, 16#3343, 16#3344, 16#3345,
            16#3346, 16#3430, 16#3431, 16#3432, 16#3433, 16#3434, 16#3435,
            16#3436, 16#3437, 16#3438, 16#3439, 16#3441, 16#3442, 16#3443,
            16#3444, 16#3445, 16#3446, 16#3530, 16#3531, 16#3532, 16#3533,
            16#3534, 16#3535, 16#3536, 16#3537, 16#3538, 16#3539, 16#3541,
            16#3542, 16#3543, 16#3544, 16#3545, 16#3546, 16#3630, 16#3631,
            16#3632, 16#3633, 16#3634, 16#3635, 16#3636, 16#3637, 16#3638,
            16#3639, 16#3641, 16#3642, 16#3643, 16#3644, 16#3645, 16#3646,
            16#3730, 16#3731, 16#3732, 16#3733, 16#3734, 16#3735, 16#3736,
            16#3737, 16#3738, 16#3739, 16#3741, 16#3742, 16#3743, 16#3744,
            16#3745, 16#3746, 16#3830, 16#3831, 16#3832, 16#3833, 16#3834,
            16#3835, 16#3836, 16#3837, 16#3838, 16#3839, 16#3841, 16#3842,
            16#3843, 16#3844, 16#3845, 16#3846, 16#3930, 16#3931, 16#3932,
            16#3933, 16#3934, 16#3935, 16#3936, 16#3937, 16#3938, 16#3939,
            16#3941, 16#3942, 16#3943, 16#3944, 16#3945, 16#3946, 16#4130,
            16#4131, 16#4132, 16#4133, 16#4134, 16#4135, 16#4136, 16#4137,
            16#4138, 16#4139, 16#4141, 16#4142, 16#4143, 16#4144, 16#4145,
            16#4146, 16#4230, 16#4231, 16#4232, 16#4233, 16#4234, 16#4235,
            16#4236, 16#4237, 16#4238, 16#4239, 16#4241, 16#4242, 16#4243,
            16#4244, 16#4245, 16#4246, 16#4330, 16#4331, 16#4332, 16#4333,
            16#4334, 16#4335, 16#4336, 16#4337, 16#4338, 16#4339, 16#4341,
            16#4342, 16#4343, 16#4344, 16#4345, 16#4346, 16#4430, 16#4431,
            16#4432, 16#4433, 16#4434, 16#4435, 16#4436, 16#4437, 16#4438,
            16#4439, 16#4441, 16#4442, 16#4443, 16#4444, 16#4445, 16#4446,
            16#4530, 16#4531, 16#4532, 16#4533, 16#4534, 16#4535, 16#4536,
            16#4537, 16#4538, 16#4539, 16#4541, 16#4542, 16#4543, 16#4544,
            16#4545, 16#4546, 16#4630, 16#4631, 16#4632, 16#4633, 16#4634,
            16#4635, 16#4636, 16#4637, 16#4638, 16#4639, 16#4641, 16#4642,
            16#4643, 16#4644, 16#4645, 16#4646}).
