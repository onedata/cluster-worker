// ===================================================================
// Author: Lukasz Opiola
// Copyright (C): 2014 ACK CYFRONET AGH
// This software is released under the MIT license
// cited in 'LICENSE.txt'.
// ===================================================================
// This file contains JS functions used on file_manager page.
// ===================================================================

// IDs of checkboxes used to set mode
var CHMOD_CHECKBOXES = ['chbx_ur', 'chbx_uw', 'chbx_ux',
    'chbx_gr', 'chbx_gw', 'chbx_gx',
    'chbx_or', 'chbx_ow', 'chbx_ox'];

// Indicates if checkbox change event was generated by the user
var user_event = true;

// Initialize chmod table with checkboxes and add event listeners
init_chmod_table = function () {
    for (var i = 0; i < CHMOD_CHECKBOXES.length; i++) {
        var chbx = $('#' + CHMOD_CHECKBOXES[i]);
        chbx.checkbox();
        chbx.change(function (event) {
                console.log("change");
                if (user_event) {
                    console.log("user_event");
                    var mode = calculate_mode().toString(8);
                    $('#octal_form_textbox').val((mode + "00").substring(0, 3));
                }
            });
    }
    $('#chbx_recursive').checkbox();
    $('#octal_form_submit').click(function (event) {
        var textbox_value = $('#octal_form_textbox').val();
        var mode_oct = parseInt(textbox_value, 8);
        if (textbox_value.length != 3 || isNaN(mode_oct) || mode_oct < 0 || mode_oct > 511) {
            alert('This is not a valid octal representation of mode. Please type in a number between 000 and 777.');
        } else {
            // Make sure this doesn't trigger change events
            console.log("asdasD");
            user_event = false;
            for (var i = 0; i < CHMOD_CHECKBOXES.length; i++) {
                var chbx = $('#' + CHMOD_CHECKBOXES[i]);
                if ((mode_oct & Math.pow(2, 8 - i)) > 0) {
                    chbx.checkbox('check');
                } else {
                    chbx.checkbox('uncheck');
                }
            }
            user_event = true;
        }
    });
};

// Submit newly chosen mode to the server
submit_chmod = function () {
    $('#spinner').delay(150).show();
    // Below function is registered from n2o context
    submit_chmod_event([calculate_mode(), $('#chbx_recursive').is(':checked')]);
};

// Calculate mode depending on checked checkboxes
calculate_mode = function () {
    var mode = 0;
    for (var i = 0; i < CHMOD_CHECKBOXES.length; i++) {
        if ($('#' + CHMOD_CHECKBOXES[i]).is(':checked')) {
            mode += Math.pow(2, 8 - i);
        }
    }
    return mode;
};




