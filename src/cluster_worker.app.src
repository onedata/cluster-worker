%%%--------------------------------------------------------------------
%%% @author Michal Zmuda
%%% @copyright (C) 2013 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%--------------------------------------------------------------------
%%% @doc It is the description of application.
%%% @end
%%%--------------------------------------------------------------------
{application, cluster_worker,
    [
        {description, "Application starts node of oneprovider cluster"},
        {vsn, "3.0.0-beta3"},
        {registered, [cluster_worker_sup]},
        {applications, [
            kernel,
            stdlib,
            os_mon,
            sasl,
            public_key,
            crypto,
            ssl,
            % Meck is needed only for development purposes, should be removed before release.
            meck,
            % ctool already requires those apps below, but they are here
            % for awareness of them being used in the project and
            % to make sure they are started before the application.
            lager,
            hackney,
            web_client,
            cowboy,
            worker_pool,
            exometer_core
        ]},
        {mod, {cluster_worker_app, []}},
        {env, [

            %% ===================================================================
            %% GENERAL
            %% ===================================================================

            %% How long (in ms) should worker wait between heartbeats (when connected to cm)
            {heartbeat_interval, 500},
            %% How long (in ms) should worker wait between next connection try (when not registered in cm)
            {cm_connection_retry_period, 1000},
            %% Memory size which stores information about worker load
            {worker_load_memory_size, 1000},
            %% Memory usage level above which caches will be cleared
            {node_mem_ratio_to_clear_cache, 90},

            %% Number of tp processes to reduce tp process idle time
            {throttling_reduce_idle_time_memory_proc_number, 1000},
            {throttling_min_idle_time_memory_proc_number, 10000},
            %% Interval of throttling configuration when throttling is used
            {throttling_active_check_interval_seconds, 1},
            %% Interval of throttling configuration
            {throttling_check_interval_seconds, 2},

            % Throttlers configuration
            {throttling_config, [
                {default, [
                    {base_time_ms, 2048},
                    {strength, 5},
                    {tp_param_strength, 1},
                    {db_param_strength, 1},
                    {mem_param_strength, 0},
                    {tp_proc_expected, 20000},
                    {tp_proc_limit, 40000},
                    {db_queue_expected, 5000},
                    {db_queue_limit, 15000},
                    {memory_expected, 90},
                    {memory_limit, 95}
                ]}
            ]},

            % Number of tp subtrees
            % (tree of tp_servers is divided into several subtrees)
            {tp_subtrees_number, 10},
            % Enable handling of link and doc calls in single tp proc
            {aggregate_tp, true},
            % Size of tp key space (0 - unlimited)
            {tp_space_size, 0},

            % Thresholds to start node analysis
            {node_mem_analysis_treshold, 2000000000}, % 2 GB
            {procs_num_analysis_treshold, 20000},
            {min_analysis_interval_sek, 10},
            {max_analysis_interval_min, 15},
            %% Additional monitoring of erlang schedulers
            {schedulers_monitoring, 'false'},
            %% How long task should wait between function calls (when function execution ends with error)
            %% Min and max waiting value
            {task_fail_min_sleep_time_ms, 3000},
            {task_fail_max_sleep_time_ms, 30000},
            %% Number of task repeats by a single process
            {task_repeats, 3},
            %% The memory will be cleared once a period defined in this variable, even when usage level is acceptable
            {clear_cache_max_period_ms, 86400}, % 1 day
            %% How often node manager checks if caches cleaning is needed
            {check_mem_interval_minutes, 1},
            %% List of beam directories to be covered, cover is not started if list is empty
            {covered_dirs, []},
            %% List of modules to be excluded during cover analysis
            {covered_excluded_modules, []},
            %% Minimal delay in cache dumping to disk (changes done before this time causes cancelation of dump)
            %% Warning - too small delay may result in cache inconsistency
            {cache_to_disk_delay_ms, 3000},
            %% Maximal delay in cache dumping to disk
            {cache_to_disk_force_delay_ms, 5000},
            %% Maximal idle time of memory store process
            {memory_store_idle_timeout_ms, 30000},
            %% Minimal idle time of memory store process
            {memory_store_min_idle_timeout_ms, 100},
            %% Period between checkings of tasks lists (to find tasks without owner)
            {task_checking_period_minutes, 5},
            %% Heap size limit for changes stream (it works all the time and must be limited)
            {changes_max_heap_size_words, 33554432}, % 256 MB with 8byte word
            %% Period between calling node_manager_plugin callback for memory checking
            {memory_check_interval_seconds, 300},

            %% ===================================================================
            %% PLUGINS
            %% ===================================================================

            % names of modules implementing given plugins
            {datastore_config_plugin, datastore_config_plugin_default},
            {node_manager_plugin, node_manager_plugin_default},

            %% ===================================================================
            %% HTTP
            %% ===================================================================

            %% Port on which nagios is available
            {http_nagios_port, 6666},
            %% Port on which standard HTTP will be opened to redirect requests to HTTPS
            {http_redirect_port, 80},
            %% Number of accepting processes in http listeners
            {http_number_of_acceptors, 100},
            %% Number of accepting processes on port 80 (redirecting to https)
            {http_number_of_http_acceptors, 50},
            %% Maximum number of HTTP requests without closing the connection (HTTP/1.1 only)
            {http_max_keepalive, 30},
            %% Socket timeout in sek
            {http_socket_timeout_seconds, 300},

            %% ===================================================================
            %% NAGIOS
            %% ===================================================================

            %% Answers from nagios will be cached for maximum of this time (in ms) and served from cache.
            %% The reason is that a healthcheck can generate a considerable traffic.
            {nagios_caching_time, 1000},
            %% Time in ms after healthcheck is considered failed
            {nagios_healthcheck_timeout, 30000},


            %% ===================================================================
            %% DISPATCHER
            %% ===================================================================

            %% Time in ms that must have passed since last update of dispatcher
            %% or DNS to assume they are out of sync.
            {disp_out_of_sync_threshold, 60000},

            %% ===================================================================
            %% DATASTORE
            %% ===================================================================

            {tp_processes_limit, 250000},

            {datastore_doc_commit_retry_delay, 5000},
            {datastore_doc_revisions_history_length, 1},
            {datastore_doc_mutators_history_length, 1},

            {datastore_cache_size, [
                {memory, 100000},
                {disc, 500000}
            ]},

            {couchbase_config_total_timeout, 30000},
            {couchbase_pool_operation_timeout, 1800000},
            {couchbase_operation_timeout, 60000},
            {couchbase_view_timeout, 120000},
            {couchbase_durability_interval, 500},
            {couchbase_durability_timeout, 60000},
            {couchbase_http_timeout, 60000},
            {couchbase_pool_size, [
                {'_', [
                    {read, 10},
                    {write, 20},
                    {changes, 3}
                ]}
            ]},
            {couchbase_pool_batch_size, 1000},
            {couchbase_changes_batch_size, 200},
            {couchbase_changes_update_interval, 1000},
            {couchbase_changes_stream_batch_size, 200},
            {couchbase_changes_stream_update_interval, 1000}
        ]}
    ]}.
