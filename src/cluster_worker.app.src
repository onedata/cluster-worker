%%%--------------------------------------------------------------------
%%% @author Michal Zmuda
%%% @copyright (C) 2013 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%--------------------------------------------------------------------
%%% @doc It is the description of application.
%%% @end
%%%--------------------------------------------------------------------
{application, cluster_worker,
    [
        {description, "Application starts node of oneprovider cluster"},
        {vsn, "3.0.0-beta3"},
        {registered, [cluster_worker_sup]},
        {applications, [
            kernel,
            stdlib,
            os_mon,
            sasl,
            public_key,
            crypto,
            % Meck is needed only for development purposes, should be removed before release.
            meck,
            % ctool already requires those apps below, but they are here
            % for awareness of them being used in the project and
            % to make sure they are started before the application.
            lager,
            etls,
            hackney,
            web_client,
            cowboy
        ]},
        {mod, {cluster_worker_app, []}},
        {env, [

            %% ===================================================================
            %% GENERAL
            %% ===================================================================

            %% How long (in ms) should worker wait between heartbeats (when connected to cm)
            {heartbeat_interval, 500},
            %% How long (in ms) should worker wait between next connection try (when not registered in cm)
            {cm_connection_retry_period, 1000},
            %% Memory size which stores information about worker load
            {worker_load_memory_size, 1000},
            %% Memory usage level above which caches will be cleared
            {node_mem_ratio_to_clear_cache, 90},
            {erlang_mem_to_clear_cache_mb, 5000},
            %% Memory clearing will be stopped if memory usage less than {mem_clearing_ratio_to_stop}% clearing levels
            {mem_clearing_ratio_to_stop, 75},
            %% Time to wait before memory check during clearing procedure
            {clearing_time_to_refresh_stats, 5000},
            %% Clearing value from memory when tp process terminates
            {tp_proc_terminate_clear_memory, true},

            %% Memory percent that results in blocking operations on mnesia
            {throttling_block_mem_error_ratio, 95},
            %% Number of tp processes to reduce tp process idle time
            {throttling_reduce_idle_time_memory_proc_number, 1000},
            %% Number of tp processes to introduce delay
            {throttling_start_memory_proc_number, 30000},
            %% Number of tp processes to start throttling
            {throttling_max_memory_proc_number, 150000},
            %% Number of tp processes allowed when throttling blocks actions
            {throttling_block_memory_proc_number, 150000},
            %% Size of couch queue to start throttling
            {throttling_db_queue_limit, 10000},
            %% Size of couch queue to introduce delay
            {throttling_delay_db_queue_size, 50},
            %% Base time for throttling
            {throttling_base_time_ms, 16},
            %% Maximum throttling time
            {throttling_max_time_ms, 1024},
            %% Interval of throttling configuration when throttling is used
            {throttling_active_check_interval_seconds, 5},
            %% Interval of throttling configuration
            {throttling_check_interval_seconds, 5},

            % Thresholds to start node analysis
            {node_mem_analysis_treshold, 2000000000}, % 2 GB
            {procs_num_analysis_treshold, 20000},
            {min_analysis_interval_sek, 10},
            {max_analysis_interval_min, 15},
            %% Additional monitoring of erlang schedulers
            {schedulers_monitoring, 'false'},
            %% How long task should wait between function calls (when function execution ends with error)
            %% Min and max waiting value
            {task_fail_min_sleep_time_ms, 3000},
            {task_fail_max_sleep_time_ms, 30000},
            %% Number of task repeats by a single process
            {task_repeats, 3},
            %% The memory will be cleared once a period defined in this variable, even when usage level is acceptable
            {clear_cache_max_period_ms, 86400}, % 1 day
            %% How often node manager checks if caches cleaning is needed
            {check_mem_interval_minutes, 1},
            %% List of beam directories to be covered, cover is not started if list is empty
            {covered_dirs, []},
            %% List of modules to be excluded during cover analysis
            {covered_excluded_modules, []},
            %% Minimal delay in cache dumping to disk (changes done before this time causes cancelation of dump)
            %% Warning - too small delay may result in cache inconsistency
            {cache_to_disk_delay_ms, 3000},
            %% Maximal delay in cache dumping to disk
            {cache_to_disk_force_delay_ms, 5000},
            %% Maximal idle time of memory store process
            {memory_store_idle_timeout_ms, 30000},
            %% Minimal idle time of memory store process
            {memory_store_min_idle_timeout_ms, 100},
            %% Time between flush operations after fail
            {memory_store_flush_error_suspension_ms, 60000},
            %% Period between checkings of tasks lists (to find tasks without owner)
            {task_checking_period_minutes, 5},
            %% Heap size limit for changes stream (it works all the time and must be limited)
            {changes_max_heap_size_words, 33554432}, % 256 MB with 8byte word

            %% ===================================================================
            %% PLUGINS
            %% ===================================================================

            % names of modules implementing given plugins
            {datastore_config_plugin, datastore_config_plugin_default},
            {node_manager_plugin, node_manager_plugin_default},
            {dns_worker_plugin, dns_worker_plugin_default},

            %% ===================================================================
            %% IDENTITY
            %% ===================================================================

            %% Module which implements identity repository
            {identity_repository, identity_repository_default},
            %% Module which implements identity cache
            %% In order to disable cache, use no_identity_cache here
            {identity_cache, db_identity_cache},
            %% Maximum number of seconds until identity cache entry is considered invalid
            {identity_cache_ttl_seconds, 3600},

            %% ===================================================================
            %% HTTP
            %% ===================================================================

            %% Port on which nagios is available
            {http_nagios_port, 6666},
            %% Port on which standard HTTP will be opened to redirect requests to HTTPS
            {http_redirect_port, 80},
            %% Number of accepting processes in http listeners
            {http_number_of_acceptors, 100},
            %% Number of accepting processes on port 80 (redirecting to https)
            {http_number_of_http_acceptors, 50},
            %% Maximum number of HTTP requests without closing the connection (HTTP/1.1 only)
            {http_max_keepalive, 30},
            %% Socket timeout in sek
            {http_socket_timeout_seconds, 300},

            %% ===================================================================
            %% NAGIOS
            %% ===================================================================

            %% Answers from nagios will be cached for maximum of this time (in ms) and served from cache.
            %% The reason is that a healthcheck can generate a considerable traffic.
            {nagios_caching_time, 1000},
            %% Time in ms after healthcheck is considered failed
            {nagios_healthcheck_timeout, 5000},


            %% ===================================================================
            %% DISPATCHER
            %% ===================================================================

            %% Time in ms that must have passed since last update of dispatcher
            %% or DNS to assume they are out of sync.
            {dns_disp_out_of_sync_threshold, 60000},

            %% ===================================================================
            %% DNS
            %% ===================================================================

            %% DNS port
            {dns_port, 53},
            %% How long dns response of type A remains valid (in sec)
            {dns_a_response_ttl, 60},
            %% How long dns response of type NS remains valid (in sec)
            {dns_ns_response_ttl, 600},
            %% Maximum supported UDP size, that will be advertised by the server (via EDNS). If a client advertises a bigger
            %% value, it will be assumed to be as high as this.
            {edns_max_udp_size, 1280},
            %% Number of dns tcp acceptors
            {dns_tcp_acceptor_pool_size, 20},
            %% Time (in sec) after which dns closes idle connection
            {dns_tcp_timeout_seconds, 300},

            %% ===================================================================
            %% DATASTORE
            %% ===================================================================

            %% Persistence driver to use in datastore.
            %% Supported values: couchbase_datastore_driver, riak_datastore_driver, couchdb_datastore_driver
            {persistence_driver_module, 'couchdb_datastore_driver'},
            %% Limit for the number of active tp processes.
            {tp_processes_limit, 200},
            %% Delay in ms between consecutive calls to tp_server logic
            %% terminate callback in case of an error
            {tp_server_terminate_retry_delay, 1000},
            %% Size of a datastore worker pool
            {datastore_pool_size, 5},
            %% Max number of requests a pool worker may aggregate
            {datastore_pool_batch_size, 25},
            %% Max delay in milliseconds before a pool worker queue is flushed
            {datastore_pool_batch_delay, 500},
            %% Range of port numbers for a CouchBase gateway API port
            {couchbase_gateway_api_port_range, {12000, 12999}},
            %% Range of port numbers for a CouchBase gateway admin port
            {couchbase_gateway_admin_port_range, {13000, 13999}}
        ]}
    ]}.
