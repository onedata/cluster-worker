# - Try to find the Globus library
#
# Once done this will define
#
# GLOBUS_FOUND - System has Globus
# GLOBUS_INCLUDE_DIR - The Globus include directory
# GLOBUS_LIBRARIES - The libraries needed to use Globus
# GLOBUS_DEFINITIONS - Compiler switches required for using Globus


IF (NOT WIN32)
    FIND_PACKAGE(PkgConfig)
    PKG_SEARCH_MODULE(PC_GLOBUS_GSI_CALLBACK globus-gsi-callback)
    PKG_SEARCH_MODULE(PC_GLOBUS_OPENSSL globus-openssl-module)
    PKG_SEARCH_MODULE(PC_GLOBUS_GSI_SSL globus-gsi-proxy-ssl)
    PKG_SEARCH_MODULE(PC_GLOBUS_CORE globus-core)
    PKG_SEARCH_MODULE(PC_GLOBUS_COMMON globus-common)
    PKG_SEARCH_MODULE(PC_GLOBUS_GSI_SYSCONFIG globus-gsi-sysconfig)
    PKG_SEARCH_MODULE(PC_GLOBUS_GSI_UTILS globus-gsi-cert-utils)

    SET(GLOBUS_DEFINITIONS ${PC_GLOBUS_GSI_CALLBACK_CFLAGS})
ENDIF (NOT WIN32)

FIND_PATH(GLOBUS_INCLUDE_DIR globus/globus_gsi_callback.h
    HINTS
    ${PC_GLOBUS_INCLUDEDIR}
    ${PC_GLOBUS_INCLUDE_DIRS}
)

FIND_LIBRARY(GLOBUS_GSI_CALLBACK_LIBRARY NAMES ${PC_GLOBUS_GSI_CALLBACK_LIBRARIES}
    HINTS
    ${PC_GLOBUS_GSI_CALLBACK_LIBDIR}
    ${PC_GLOBUS_GSI_CALLBACK_LIBRARY_DIRS}
)

FIND_LIBRARY(GLOBUS_COMMON_LIBRARY NAMES ${PC_GLOBUS_COMMON_LIBRARIES}
    HINTS
    ${PC_GLOBUS_COMMON_LIBDIR}
    ${PC_GLOBUS_COMMON_LIBRARY_DIRS}
)



MARK_AS_ADVANCED(GLOBUS_INCLUDE_DIR GLOBUS_GSI_CALLBACK_LIBRARY)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(GlobusGSI DEFAULT_MSG GLOBUS_GSI_CALLBACK_LIBRARY GLOBUS_INCLUDE_DIR)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(GlobusCommon DEFAULT_MSG GLOBUS_COMMON_LIBRARY GLOBUS_INCLUDE_DIR)


SET(GLOBUS_LIBRARIES ${GLOBUS_GSI_CALLBACK_LIBRARY} ${GLOBUS_COMMON_LIBRARY})
SET(GLOBUS_INCLUDE_DIRS ${GLOBUS_INCLUDE_DIR})