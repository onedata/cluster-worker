[
    %% SASL config
    {sasl, [{sasl_error_logger, false}]},

    %% logger configuration
    {lager, [
        {handlers, [
            %% show info level or higher level logs at console
            {lager_console_backend, info},
            %% rotate error log once a month (first day of month, 1 a.m) or when it reaches 1 GB; keep 1000 rotated logs
            {lager_file_backend, [{file, "log/error.log"}, {level, error}, {size, 1048576000}, {date, "$M1D1"}, {count, 1000}]},
            %% rotate info log once a week (friday at 11 p.m) or when it reaches 100 MB; keep 100 rotated logs
            {lager_file_backend, [{file, "log/info.log"}, {level, info}, {size, 104857600}, {date, "$W5D23"}, {count, 100}]},
            %% rotate info log once a day (at midnight) or when it reaches 10 MB; keep 10 rotated logs
            {lager_file_backend, [{file, "log/debug.log"}, {level, debug}, {size, 10485760}, {date, "$D0"}, {count, 10}]}
            %% {central_logging_backend, debug} todo uncomment when logging worker appears
        ]},
        {error_logger_hwm, 200},
        % When lager should change mode to synchronous (log queue is longer than async_threshold)
        {async_threshold, 500},
        % When lager should return from mode to synchronous (log queue is shorter than (async_threshold - async_threshold_window)
        {async_threshold_window, 50}
    ]},

    %% oneprovider_node config
    {oneprovider_node, [
        %% ===================================================================
        %% GENERAL
        %% ===================================================================

        %% Node type (worker or ccm) - configured automatically by configurator.erl lib, used in GEN_DEV script
        {node_type, ccm},
        %% List of possible ccm nodes - configured automatically by configurator.erl lib, used in GEN_DEV script
        {ccm_nodes, ['ccm@127.0.0.1']},
        %% List of all DBMS nodes - configured automatically by configurator.erl lib, used in GEN_DEV script
        {db_nodes, ['127.0.0.1:49161']},
        %% How many nodes connected to ccm trigger cluster initialization - configured automatically by configurator.erl lib, used in GEN_DEV script
        {workers_to_trigger_init, infinity},
        %% How long (in sec) should ccm wait for workers before it initializes cluster
        {initialization_time_seconds, 5},
        %% How long (in sec) should worker sleep before heartbeat (when connected to ccm)
        {heartbeat_success_interval_seconds, 60},
        %% How long (in sec) should worker sleep before next connection try (when not registered in ccm)
        {heartbeat_fail_interval_seconds, 1},
        %% Memory size which stores information about worker load
        {worker_load_memory_size, 1000},
        %% Path to certificate used by ranch_ssl in gui handler
        {web_ssl_cert_path, "./certs/onedataServerWeb.pem"},
        %% Path to certificate used by ranch_ssl in fuse clients handler
        {fuse_ssl_cert_path, "./certs/onedataServerFuse.pem"},
        %% Prefix to c_lib directory containing NIF libs
        {nif_prefix, "."},

        %% ===================================================================
        %% DISPATCHER
        %% ===================================================================

        %% Number of threads used by dispatcher
        {dispatcher_pool_size, 100},
        %% Number of port used by dispatcher
        {dispatcher_port, 5555},
        %% path to dir containing CA and CRL certs used by GSI handler
        {ca_dir, "cacerts"},
        %% path to dir containing server certs used by GSI handler
        {certs_dir, certs},
        %% the interval between CRL updates done by GSI handler
        {crl_update_interval, 3600000},

        %% ===================================================================
        %% HTTP_WORKER
        %% ===================================================================

        %% Port on which http_worker is available
        {http_worker_https_port, 443},
        %% Port on which standard HTTP will be opened to redirect requests to HTTPS
        {http_worker_redirect_port, 80},
        %% Port on which REST API is available
        {http_worker_rest_port, 8443},
        %% Directory in release where static gui files are stored
        {http_worker_static_files_root, "./gui_static"},
        %% Number of accepting processes in http_worker listener
        {http_worker_number_of_acceptors, 100},
        %% Number of accepting processes on port 80 (redirecting to https)
        {http_worker_number_of_http_acceptors, 50},
        %% Maximum number of HTTP requests without closing the connection (HTTP/1.1 only)
        {http_worker_max_keepalive, 30},
        %% Socket timeout in ms
        {http_worker_socket_timeout, 60000},

        %% Time in ms after healthcheck is considered failed
        {nagios_healthcheck_timeout, 5000},

        %% ===================================================================
        %% DNS
        %% ===================================================================

        %% DNS port
        {dns_port, 53},
        %% How long dns response of type A remains valid (in sec)
        {dns_a_response_ttl, 60},
        %% How long dns response of type NS remains valid (in sec)
        {dns_ns_response_ttl, 600},
        %% Maximum supported UDP size, that will be advertised by the server (via EDNS). If a client advertises a bigger
        %% value, it will be assumed to be as high as this.
        {edns_max_udp_size, 1280},
        %% Number of dns tcp acceptors
        {dns_tcp_acceptor_pool_size, 20},
        %% Time (in sec) after which dns closes idle connection
        {dns_tcp_timeout_seconds, 20},

        %% ===================================================================
        %% SEQUENCER_MANAGER
        %% ===================================================================

        %% Maximal amount of messages that can be forwarded by sequencer
        %% stream between successive emissions of acknowledgement messages
        {sequencer_stream_messages_ack_window, 100},
        %% Maximal delay in seconds between successive emissions of
        %% acknowledgement messages
        {sequencer_stream_seconds_ack_window, 30}

    ]}
].
